<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python, 주식 on Lifelog 2025</title>
    <link>http://localhost:1313/categories/python-%EC%A3%BC%EC%8B%9D/</link>
    <description>Recent content in Python, 주식 on Lifelog 2025</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/python-%EC%A3%BC%EC%8B%9D/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>추세매매전략, AI 주가예측전략</title>
      <link>http://localhost:1313/docs/study/tech/tech6/</link>
      <pubDate>Mon, 14 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/tech/tech6/</guid>
      <description>추세매매전략, AI 주가예측전략 # 목록 # 2025-04-14 ⋯ 보조지표로 만드는 추세매매전략&#xA;보조지표로 만드는 추세매매전략 # 1. 개념 # RSI: 과열 여부 기반 매매&#xA;주식의 가격이 &amp;lsquo;너무&amp;rsquo;오를 때 팔고, &amp;lsquo;너무&amp;rsquo; 내릴 때 사는 전략 &amp;lsquo;너무&amp;rsquo;의 정의는? 과매도/과매수를 판별하는 기술적 지표(Technical Indicator)를 통해 데이터를 통한 매매. Technical Indicator&#xA;Trend-Following: 가격 움직임의 추세 및 방향 e.g. Simple Moving Average (SMA) Momentum: 가격 움직임의 강도 e.g. Relative Strength Index (RSI) Volatility: 가격 움직임 및 시장의 변동성 e.</description>
    </item>
    <item>
      <title>백테스팅 #1 (2025년 4월 11일 삼성전자)</title>
      <link>http://localhost:1313/docs/study/tech/tech4/</link>
      <pubDate>Sat, 12 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/tech/tech4/</guid>
      <description>백테스팅 #1 (2025년 4월 11일 삼성전자) # #2025-04-13&#xA;복습삼아!! 주가 데이터를 FinanceDataReader로 가져와서 돌려보았다. 환경은 jupyter notebook이고 python version 3.8이다. !python --version Python 3.8.19 1. Install Packages # !pip install plotly !pip install finance-datareader 2. Load Data # import pandas as pd import numpy as np import matplotlib.pyplot as plt import FinanceDataReader as fdr d = fdr.DataReader(&amp;#39;005930&amp;#39;, &amp;#39;2010&amp;#39;) d[&amp;#39;timestamp&amp;#39;] = d.index.tolist() d = d.reset_index() d.columns = [col.lower() for col in d.</description>
    </item>
    <item>
      <title>전략 백테스팅</title>
      <link>http://localhost:1313/docs/study/tech/tech1/</link>
      <pubDate>Mon, 31 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/tech/tech1/</guid>
      <description>전략 백테스팅 # 목록 # 2025-03-31 ⋯ 전략 백테스팅, 매매 시그널&#xA;2025-03-31 ⋯ 기초 백테스팅 모델 개발&#xA;전략 백테스팅, 매매 시그널 # 1. 개념 # 백테스팅(Backtesting): 과거 데이터로부터 내 전략의 예상 수익과 리스크를 정량적으로 평가하는 테스트 방법. 매매 시그널&#xA;알고리즘으로 계산한 매수/매도 타점 몇 주를 살지, 매매 가능한 시점인지(거래정지 등)도 고려 백테스팅과 매매 시그널의 관계&#xA;매매 시그널대로 매매할 때, 각 시점별 수억률 그래프를 그려보는 것이 백테스팅 2. 실습 # 매매 시그널 생성 실습 데이터: 삼성전자 일봉 데이터 전략: 전일 종가가 최근 5일 종가 중 가장 낮다면 종가 매수, 마지막 매수 5일 후 전량 종가 매도.</description>
    </item>
    <item>
      <title>정량적 백테스팅 성과 분석</title>
      <link>http://localhost:1313/docs/study/tech/tech2/</link>
      <pubDate>Mon, 31 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/tech/tech2/</guid>
      <description>정량적 백테스팅 성과 분석 # 목록 # 2025-03-31 ⋯ 전략 백테스팅과 수익률 그래프 그리기&#xA;2025-03-31 ⋯ 정량적 백테스팅 성과 분석&#xA;2025-03-31 ⋯ 전략과 벤치마크 성과지표 비교&#xA;전략 백테스팅과 수익률 그래프 그리기 # 1. 개념 # 로직 설명&#xA;삼성전자 일봉 사용 최근 5일 종가 중 당일 종가 가격이 가장 낮고, 20일 이동평균보다 종가가 더 낮은 경우 매수 (여기까지만 있다면? 주가가 무한히 떨어지면 무한 매수하게되므로 실거래시에는 사용하기어려움. 그래서 아래 2개 추가) 단, 현재 보유 종목이 있다면 추가매수 없음 매수 3일차 종가에 매도 슬리피지 적용</description>
    </item>
    <item>
      <title>Kaggle 타이타닉 EDA</title>
      <link>http://localhost:1313/docs/study/tech/tech3/</link>
      <pubDate>Sun, 30 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/tech/tech3/</guid>
      <description>Kaggle 타이타닉 EDA # 목록 # 2025-03-30 ⋯ Kaggle API 사용법&#xA;Kaggle API 사용법 # 1. 사전 설정 # !pip install kaggle Collecting kaggle Downloading kaggle-1.7.4.2-py3-none-any.whl.metadata (16 kB) Requirement already satisfied: bleach in /opt/anaconda3/envs/workspace/lib/python3.8/site-packages (from kaggle) (6.1.0) Requirement already satisfied: certifi&amp;gt;=14.05.14 in /opt/anaconda3/envs/workspace/lib/python3.8/site-packages (from kaggle) (2024.7.4) Requirement already satisfied: charset-normalizer in /opt/anaconda3/envs/workspace/lib/python3.8/site-packages (from kaggle) (3.3.2) Requirement already satisfied: idna in /opt/anaconda3/envs/workspace/lib/python3.8/site-packages (from kaggle) (3.7) Collecting protobuf (from kaggle) Downloading protobuf-5.</description>
    </item>
  </channel>
</rss>
