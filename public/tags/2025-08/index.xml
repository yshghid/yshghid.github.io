<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2025-08 on  </title>
    <link>http://localhost:1313/tags/2025-08/</link>
    <description>Recent content in 2025-08 on  </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Aug 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/2025-08/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>생성형 AI #1 생성형 AI 기초 및 Prompt Engineering</title>
      <link>http://localhost:1313/docs/study/ai/ai18/</link>
      <pubDate>Sat, 09 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/ai/ai18/</guid>
      <description>생성형 AI #1 생성형 AI 기초 및 Prompt Engineering # #2025-08-09&#xA;#1 RAG (p.27)&#xA;RAG의 역할?&#xA;질문을 LLM에 던지기 전에 knowledge corpus에 질문을 미리 검색한다(회사 데이터에 대한 지식 벡터 db). 질문과 연관된 문서를 찾고 적절하게 만들어서 retrieval 던지면 의도대로 답변이 잘 나온다. # #2 LLM 출력 구성 (p.42-45)&#xA;Output Length (Max Tockens)&#xA;500자로 제한을 걸면 500자로 맞춰주는게 아니라 500자 넘으면 출력을 멈춘다. Sampling Controls&#xA;LLM은 다음에 올 단어를 고를 때 미리 계산된 사전 확률분포를 가지고 거기서 하나를 뽑는다</description>
    </item>
    <item>
      <title>생성형 AI #2 Prompt Engineering 실습 미리돌려보기</title>
      <link>http://localhost:1313/docs/study/ai/ai19/</link>
      <pubDate>Sat, 09 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/ai/ai19/</guid>
      <description>생성형 AI #2 Prompt Engineering 실습 미리돌려보기 # #2025-08-09&#xA;1. VOC 분석 # setting&#xA;https://openrouter.ai/ Model: GPT-5 Temperature: 0.2 (낮게: 일관성 있는 분류 결과) Top-k / Top-p: default Max tokens: 1024 system prompt&#xA;너는 IT 시스템의 평가전문가야. 이번에 개발한 AI를 적용한 회계세무 시스템을 테스트한 고객의 평가내용인 VOC를 분석하는 것이 너의 역할이야. 판단근거를 2가지로 함께 제시해줘. user prompt&#xA;아래에 제공하는 모든 VOC 문장을 긍정, 중립, 부정 중 하나로 분류하고, 특히 부정일 경우 그렇게 판단한 이유를 2가지로 요약해줘.</description>
    </item>
    <item>
      <title>데이터 분석 #3 회귀분석</title>
      <link>http://localhost:1313/docs/study/ai/ai17/</link>
      <pubDate>Thu, 07 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/ai/ai17/</guid>
      <description>데이터 분석 #3 회귀분석 # #2025-08-07&#xA;#1 Oversampling Techinique (p.69-71)&#xA;SMOTE&#xA;소수 클래스 포인트 중 하나를 랜덤하게 고르고 이웃 포인트 k개를 찾고 이 이웃들과의 연결선을 따라 중간 어딘가에 새로운 샘플을 만든다. 즉 원본과 이웃 사이에 위치한 점들을 생성한다. 소수 클래스 포인트들 사이의 직선 위에서만 새로운 데이터를 만들기 때문에 실제로는 decision boundary 근처에서 중요한 데이터를 놓칠 수 있다 Borderline-SMOTE&#xA;소수 클래스의 포인트에 대해 kNN을 수행해서 이웃들을 찾는데 이때 이웃 중에서 과반수 이상이 다수 클래스인 경우 위험한 샘플(danger set)으로 간주된다 즉 이 샘플은 결정 경계에 가깝기 때문에 모델 입장에서 헷갈릴 가능성이 높다.</description>
    </item>
    <item>
      <title>데이터 분석 #2 Preprocessing</title>
      <link>http://localhost:1313/docs/study/ai/ai16/</link>
      <pubDate>Wed, 06 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/ai/ai16/</guid>
      <description>데이터 분석 #2 Preprocessing # #2025-08-06&#xA;#1 머신러닝 프로세스 (p.25)&#xA;test data가 필요한 이유? hyperparameter tuning을 하면서 validation data는 모델이 이미 참고했다 즉 간접적으로 학습에 영향을 줬기 때문에 모델 학습 과정에서 한번도 보지않은 데이터가 필요함. # #2 Box plot (p.38)&#xA;그림이 7개 차종에서 연비 플롯이라고 가정&#xA;투입됏을때 예측에 긍정적영향을 줄수잇는건?&#xA;납작한애들. 두꺼우면 대표성이 떨어진다. 2번에서 이상치들이 많으니까 잘 처리해야하고&#xA;만약 그림같지 않고 y축 높이가 다 비슷비슷했다면?&#xA;이 변수들이 연비를 결정하는데 큰 영향을 못줌.</description>
    </item>
    <item>
      <title>생성형AI #1 생성형AI 기초</title>
      <link>http://localhost:1313/docs/study/ai/ai15/</link>
      <pubDate>Wed, 06 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/ai/ai15/</guid>
      <description>생성형AI #1 생성형AI 기초 예습 # #2025-08-06&#xA;#1 AGI&#xA;AGI?&#xA;인간처럼 상황에 따라 다양한 문제를 해결할 수 있는 ‘일반적인 지능’ 기존 딥러닝 학습방식&#xA;이미지의 픽셀 단위까지 잘게 쪼개서 처리하고 많은 데이터를 반복해서 학습하는 식 지금의 AI 학습방식은 너무 ‘눈앞의 문제’에만 집중하고 인간의 인지능력이나 상식을 흉내 내는 데는 부족하다. 새로운 접근&#xA;눈앞의 문제만 해결하는게 아니라 인간처럼 넓은 맥락에서 정보를 통합하고 예측할 수 있는 방식 # #2 Prompt Engineering (p.74)&#xA;&amp;lt;상황1&amp;gt; 글을 요약</description>
    </item>
    <item>
      <title>MutClust 알고리즘 로직정리 #1 expand_cluster</title>
      <link>http://localhost:1313/docs/study/algorithm/algo13/</link>
      <pubDate>Tue, 05 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/algorithm/algo13/</guid>
      <description>MutClust 알고리즘 로직정리 #1 expand_cluster # #2025-08-05&#xA;1. input # def expand_cluster(ccmIdx, mutData, info): ccm의 인덱스 ccmIdx 돌연변이 중요도 정보 mutData info: 기본 세팅 파라미터 2 # scaler_l = mutData[ccmIdx][&amp;#39;eps_scaler&amp;#39;] idx_l = ccmIdx - 1 eps_l = mutData[ccmIdx][&amp;#39;left_distance&amp;#39;] pos_l = mutData[ccmIdx][POS] #변수설명&#xA;scaler_l: ccm의 eps scaler idx_l: 최초 이웃의 인덱스 eps_l: ccm의 최초 eps pos_l: ccm의 postion 3 # while idx_l &amp;gt;= 0 and (pos_l - mutData[idx_l][POS]) &amp;lt;= eps_l: delta = scaler_l - mutData[idx_l][&amp;#39;eps_scaler&amp;#39;] scaler_l -= delta / info.</description>
    </item>
    <item>
      <title>Python #1 가상환경 구성 및 패키지 관리</title>
      <link>http://localhost:1313/docs/study/algorithm/algo11/</link>
      <pubDate>Tue, 05 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/algorithm/algo11/</guid>
      <description>Python #1 가상환경 구성 및 패키지 관리 # #2025-08-05&#xA;1. 개념 # #1 가상환경의 필요성?&#xA;우리가 파이썬을 사용할 때, 가장 먼저 겪게 되는 문제 중 하나는 바로 패키지 버전 충돌이다. 예를 들어 어떤 프로젝트에서는 numpy==1.18.5 버전을 사용하고 있고, 또 다른 프로젝트에서는 numpy==1.24.0 버전을 사용하고 있다고 하면 이 둘을 동시에 하나의 환경에 설치하게 되면 충돌이 일어나거나 예상치 못한 에러가 발생할 가능성이 커진다. 특히 머신러닝, 데이터분석, 웹개발 프로젝트를 하다 보면 프로젝트마다 사용하는 패키지와 버전이 다르기 때문에 이러한 문제는 일상적으로 발생하며 따라서 각 프로젝트가 독립적으로 실행될 수 있는 ‘가상환경(Virtual Environment)’을 만들어서 관리해야 한다.</description>
    </item>
    <item>
      <title>Python #2 logging 활용한 로깅 구조 설계 관리</title>
      <link>http://localhost:1313/docs/study/algorithm/algo12/</link>
      <pubDate>Tue, 05 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/algorithm/algo12/</guid>
      <description> Python #2 logging 활용한 로깅 구조 설계 # #2025-08-05&#xA;1. 개념 # logging은 실행 중 일어나는 다양한 이벤트, 경고, 에러, 정보 등을 기록해두고, 나중에 문제가 생겼을 때 정확히 어떤 일이 있었는지 기록을 통해 재구성할 수 있도록 도와준다.&#xA;2. 실습 # </description>
    </item>
    <item>
      <title>데이터 분석 #1 기초통계</title>
      <link>http://localhost:1313/docs/study/ai/ai14/</link>
      <pubDate>Tue, 05 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/ai/ai14/</guid>
      <description>데이터 분석 #1 기초통계 # #2025-08-05&#xA;1. 기술 통계 # #1 IQR&#xA;IQR은? 가운데 50%의 거리. 그림 설명 (p.34) 그림의 2,3: 각각 IQR의 1.5배 선, median 값 선. 그림의 B: ⚬ 가 많으면 특이값이 많은 것. 그림의 1,2,3: 1,2는 각각 IQR의 1.5배 선이라고 했는데 3과의 거리가 서로 다른 이유는? 1.5배 안쪽에 데이터들이 다 분포해서. 즉max가 1.5배보다 작아서. # #2 변이 계수(Coefficient of Variables)&#xA;평균치가 다른 집단 비교. 변이 계수 = 표준편차 / 평균.</description>
    </item>
    <item>
      <title>Docker #3 3일차 실습 1,2,3</title>
      <link>http://localhost:1313/docs/study/sw/sw16/</link>
      <pubDate>Mon, 04 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/sw/sw16/</guid>
      <description>Docker #3 3일차 실습 1,2,3 # #2025-08-04&#xA;1. 레지스트리에 접속하고 이미지를 pull/push하기 # # Docker 로그인 $ docker login https://{실습링크}.com # ID: * # Password: * $ Login Succeeded # 이미지 Pull (이미지 내려받기): 예를 들어 container-linux:1.1 이미지를 다운로드 $ docker pull {실습링크}.com/{실습id}/container-linux:1.1 # 이미지 Push (Image Push 정보 사용): Push 권한은 일반 계정이 아니라 로봇 계정(CI/CD 용)을 사용합니다. # 로봇 계정 로그인 $ docker login https://{실습링크}.com # ID: robot$skala25a # Password: 1qB9cyusbNComZPHAdjNIFWinf52xaBJ # 태깅 (Tag local image) $ docker tag container-linux:1.</description>
    </item>
    <item>
      <title>Docker #4 3일차 실습: 자신의 Frontend (HTML, JS, CSS) 개발 코드를 컨테이너로 만들고 이것을 실행시켜 보자</title>
      <link>http://localhost:1313/docs/study/sw/sw17/</link>
      <pubDate>Mon, 04 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/sw/sw17/</guid>
      <description>Docker #4 3일차 실습: 자신의 Frontend (HTML, JS, CSS) 개발 코드를 컨테이너로 만들고 이것을 실행시켜 보자 # #2025-08-04&#xA;조건&#xA;nginx:alpine 이미지를 사용 노출 Port는80 nginx를실행하는방식은 -nginx -g daemon off; nginx의 routing 설정은 default.conf에설정한다. 0. 작업 위치 # $ pwd /Users/yshmbid/rde/config/workspace/exec-template $ ls Dockerfile default.conf deploy deploy.yaml docker-build.sh docker-push.sh service.yaml src 1. docker-build.sh와 docker-push.sh 복사 # $ pwd /Users/yshmbid/rde/config/workspace/container/05.webserver $ ls Dockerfile default.conf deploy docker-build.sh docker-push.sh src 05.webserver의 docker-build.sh와 docker-push.sh를 작업 디렉토리인 exec-template로 복사해준다.</description>
    </item>
    <item>
      <title>Docker #5 3일차 실습: kubernetes 환경에 나의 앱을 배포해보자</title>
      <link>http://localhost:1313/docs/study/sw/sw18/</link>
      <pubDate>Mon, 04 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/sw/sw18/</guid>
      <description>Docker #5 3일차 실습: kubernetes 환경에 나의 앱을 배포해보자 # #2025-08-04&#xA;0. 작업 정보 # #1 작업 위치&#xA;$ pwd /Users/yshmbid/rde/config/workspace/exec-template #2 파일 구조&#xA;/workspace └── exec-template ├── Dockerfile ├── default.conf ├── docker-build.sh ├── docker-push.sh ├── cicd.sh ├── deploy/ │ ├── deploy.t │ ├── deploy.sh │ ├── service.t │ ├── service.sh │ └── env.properties └── src/ ├── index.html └── media/ #3 이전 실습과의 차이&#xA;cicd.sh를 쓴다. deploy 디렉토리를 쓴다. docker-build.</description>
    </item>
    <item>
      <title>MutClust 연구: method contribution</title>
      <link>http://localhost:1313/docs/study/algorithm/algo10/</link>
      <pubDate>Mon, 04 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/algorithm/algo10/</guid>
      <description> MutClust 연구: method contribution # #2025-08-04&#xA;#Paper&#xA;Identification of Severity Related Mutation Hotspots in SARS-CoV-2 Using a Density-Based Clustering Approach&#xA;0. 참여 파트 # #Algorithm └── Computing the H-score └── Density-based mutation hotspot clustering #Omics-analysis └── Selection of severity related hotspots └── Differentially expressed gene analysis └── Evaluation of HLA-peptide affinity #Validation └── Validation on Influenza genome └── K-dist plot </description>
    </item>
    <item>
      <title>RF-SHAP 연구 #1 모델 학습</title>
      <link>http://localhost:1313/docs/study/ai/ai12/</link>
      <pubDate>Mon, 04 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/ai/ai12/</guid>
      <description>RF-SHAP 연구 #1 모델 학습 # #2025-08-04&#xA;1. Load data # import pandas as pd import numpy as np from sklearn.ensemble import RandomForestClassifier from sklearn.model_selection import train_test_split, cross_val_score from sklearn.metrics import accuracy_score import pickle with open(&amp;#39;/preprocessing/processed_data.pickle&amp;#39;,&amp;#39;rb&amp;#39;) as f: preproc_data = pickle.load(f) cytokine_df = preproc_data[&amp;#39;cytokine_data&amp;#39;] patient_meta = preproc_data[&amp;#39;metadata&amp;#39;] patient_info = preproc_data[&amp;#39;clinical&amp;#39;] 2. Train data split # normal_df = cytokine_df[cytokine_df.index.str.contains(&amp;#39;Healthy&amp;#39;)] severe_samples = patient_meta[patient_meta.Severity &amp;gt;= 6] severe_df = cytokine_df[cytokine_df.index.isin(severe_samples.Sample)] normal_df[&amp;#39;source&amp;#39;] = 0 severe_df[&amp;#39;source&amp;#39;] = 1 normal_df,severe_df ( CXCL9 LIF CXCL11 IL25 IL12B IL10 \ Healthy1 6.</description>
    </item>
    <item>
      <title>RF-SHAP 연구 #2 SHAP 분석</title>
      <link>http://localhost:1313/docs/study/ai/ai13/</link>
      <pubDate>Mon, 04 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/ai/ai13/</guid>
      <description>RF-SHAP 연구 #2 SHAP 분석 # #2025-08-04&#xA;1. Load data # import pandas as pd import numpy as np import pickle import joblib import shap import matplotlib.pyplot as plt import seaborn as sns #Load rf model with open(&amp;#39;/model/rf_model.pkl&amp;#39;,&amp;#39;rb&amp;#39;) as f: rf_model = joblib.load(f) #Load dataset with open(&amp;#39;/preprocessing/processed_data.pickle&amp;#39;,&amp;#39;rb&amp;#39;) as f: preproc_data = pickle.load(f) cytokine_df = preproc_data[&amp;#39;cytokine_data&amp;#39;] patient_meta = preproc_data[&amp;#39;metadata&amp;#39;] patient_info = preproc_data[&amp;#39;clinical&amp;#39;] 2. Model evaluation - feature importance # # Get feature importances importances = rf_model.</description>
    </item>
    <item>
      <title>결단</title>
      <link>http://localhost:1313/docs/hobby/book/book52/</link>
      <pubDate>Mon, 04 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/hobby/book/book52/</guid>
      <description>결단 # #2025-08-04&#xA;#1&#xA;머스크는 로켓이 산소가 희박한 높이로 충분히 솟아올라 불꽃이 꺼지길 바랐다. 그러나 로켓은 추락하기 시작했다. 비디오 피드에서 오멜렉이 가까이 다가오더니 더 이상 화면에 아무것도 비치지 않았다. 그리고 불타는 파편들이 바다로 떨어졌다. “위장이 뒤틀렸지요.” 머스크의 말이다. 1시간 후, 머스크는 뮬러, 쾨니스만, 부자, 톰슨 등 수석 팀원들과 함께 잔해를 둘러보기 위해 육군 헬리콥터에 올랐다.&#xA;그날 밤 모두가 콰즈의 야외 바에 모여 조용히 맥주를 마셨다. 몇몇 엔지니어는 눈물을 흘렸다. 머스크는 돌처럼 굳은 얼굴과 먼 곳을 응시하는 눈빛으로 조용히 생각에 잠겼다.</description>
    </item>
    <item>
      <title>EBV DHT 연구:  contribution 정리</title>
      <link>http://localhost:1313/docs/study/bioinformatics/bi32/</link>
      <pubDate>Sun, 03 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/bioinformatics/bi32/</guid>
      <description>EBV DHT 연구: contribution 정리 # #2025-08-03&#xA;0. Contribution # #Paper1&#xA;Dihydrotestosterone Enhances MICA-Mediated Immune Responses to Epstein–Barr Virus-Associated Gastric Carcinoma&#xA;#Paper2&#xA;Dihydrotestosterone-androgen receptor signaling suppresses EBV-positive gastric cancer through DNA demethylation-mediated viral reactivation&#xA;#Paper1 └── 3. ChIP-Seq Assay #Paper2 └── 2. RNA-seq analysis └── 14. Bioinformatics analysis of methylome 1. ChIP-Seq Assay # Among the above p65 ChIP samples, the sample treated with 100 nM DHT for 30 min showed the strong p65 enrichment on the SNU719 genome.</description>
    </item>
    <item>
      <title>skala 강의자료공부 #1 DL-CNN, RNN</title>
      <link>http://localhost:1313/docs/study/ai/ai11/</link>
      <pubDate>Sun, 03 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/ai/ai11/</guid>
      <description>skala 강의자료공부 #1 DL-CNN, RNN # #2025-08-03&#xA;#1 p.90-92&#xA;Convolution, 즉 합성곱은 CNN의 가장 핵심적인 연산이다. 말 그대로 &amp;lsquo;겹쳐서 곱하고 더하는&amp;rsquo; 방식이다. 이는 우리가 이미지를 처리할 때, 그 이미지의 일부분만을 보며 특징을 추출하는 원리와 매우 유사하다. CNN에서는 이 연산을 통해 이미지 속에서 선, 모서리, 윤곽선 같은 패턴을 뽑아낸다.&#xA;p.90에서는 합성곱을 아주 직관적으로 보여준다. 왼쪽에 있는 초록색 격자는 이미지이고, 그 위에 씌워진 주황색 네모는 필터(또는 커널)다. 이 필터는 보통 3x3 크기를 가지며, 그 내부에 있는 값들은 학습을 통해 결정된다.</description>
    </item>
    <item>
      <title>Docker #1 Python 실행 컨테이너 만들기</title>
      <link>http://localhost:1313/docs/study/sw/sw14/</link>
      <pubDate>Fri, 01 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/sw/sw14/</guid>
      <description>Docker #1 Python 실행 컨테이너 만들기 # #2025-08-01&#xA;0. RDE 런처 실행 # RDE #1 Local PC에서 RDE 환경 구성에서 Harbor registry로부터 RdE Container download를 수행했고 아이콘을 클릭해서 RDE 런처를 실행한다.&#xA;1. 웹 서비스 실행 컨테이너 만들기 # #1 /config/workspace/cloud/container/00.container-linux 경로로 이동&#xA;cd /config/workspace/cloud/container/00.container-linux #2 디렉토리 구조는?&#xA;00.container-linux/ ├── Dockerfile // 컨테이너 환경 설정 ├── Dockerfile.pytho-slim ├── Dockerfile.ubuntu ├── docker-build.sh ├── docker-push.sh ├── mycode.py ├── fastserver.py ├── webserver.py └── mydata/ #3 Dockerfile 내용 확인하기</description>
    </item>
    <item>
      <title>Docker #2 netmhcpan 작년 작업 복기</title>
      <link>http://localhost:1313/docs/study/sw/sw15/</link>
      <pubDate>Fri, 01 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/sw/sw15/</guid>
      <description>Docker #2 netmhcpan 작년 작업 복기 # #2025-08-01&#xA;1 # 2024.11.24 MutClust 작업중에 netmhcpan을 돌려야되는 상황이 왓었는데&#xA;netmhcpan이 유료였나 그래서 패키지 다운은 안되고.. 서버 뒤지다가 아래 README.txt 파일 발견해서 결과물 저장까진 했던 기억이있다.&#xA;이때먼가 의문이 들었던게 새로운 conda 환경에 접속한거같은 느낌이 아니라 완전 다른 제2의서버에 접속한 느낌이었는데 이상하게 연구실 디렉토리들은 그대로 접근이 가능해서 혼란스럽지만 그냥 절대경로 다 박고 수행했는데 결과들이 문제없이 저장됐다.&#xA;그래서 그뒤로 잊어버리고있었는데 docker 배우고나니까 먼가 이해돼서 이해된김에 정리해보기!</description>
    </item>
    <item>
      <title>MutClust 코드 리펙토링 #2 arg_parser</title>
      <link>http://localhost:1313/docs/study/algorithm/algo2/</link>
      <pubDate>Fri, 01 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/algorithm/algo2/</guid>
      <description>MutClust 코드 리펙토링 #2 arg_parser # #2025-08-01&#xA;MutClust 알고리즘의 코드 구성은 아래와 같은데&#xA;MutClust ├── sc/ │ └── lib.py │ └── arg_parser.py // 실행 설정 │ └── utils.py └── Test arg_parser.py는 실험 환경 파라미터 세팅 및 CLI 인자 파싱을 포함한다.&#xA;# === arg_parser.py === import argparse from os.path import exists from src.mlib import ( DIMINISHING_FACTOR, EPSILON, EPSILON_SCALING_FACTOR, MAX_EPS, MIN_CLUSTER_LENGTH, CCM_MIN_PERCENTAGE_SUM ) class ArgsInfo: def __init__(self): self.args = {} self.fin = &amp;#39;&amp;#39; self.</description>
    </item>
    <item>
      <title>MutClust 코드 리펙토링 #3 utils</title>
      <link>http://localhost:1313/docs/study/algorithm/algo9/</link>
      <pubDate>Fri, 01 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/algorithm/algo9/</guid>
      <description>MutClust 코드 리펙토링 #3 utils # #2025-08-01&#xA;MutClust 알고리즘의 코드 구성은 아래와 같은데&#xA;MutClust ├── sc/ │ └── lib.py │ └── arg_parser.py │ └── utils.py // 전처리 및 분석 └── Test utils.py는 데이터 전처리 및 분석 함수를 포함한다.&#xA;# === Fasta 전처리 === def fasta2csv(home_dir, nation_dir, filechunk, ref, outdir): for file in filechunk: path = os.path.join(home_dir, nation_dir, file) filename = os.path.splitext(os.path.basename(file))[0] outpath = os.path.join(outdir, f&amp;#34;{filename}.csv&amp;#34;) if not os.path.exists(outpath): df = DataFrame({&amp;#39;ref&amp;#39;: ref.</description>
    </item>
  </channel>
</rss>
