<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2025-09 on</title><link>https://yshghid.github.io/tags/2025-09/</link><description>Recent content in 2025-09 on</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 02 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://yshghid.github.io/tags/2025-09/index.xml" rel="self" type="application/rss+xml"/><item><title>혼돈후의 고요</title><link>https://yshghid.github.io/docs/hobby/book/book54/</link><pubDate>Tue, 02 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/hobby/book/book54/</guid><description>&lt;h1 id="혼돈후의-고요"&gt;
 혼돈후의 고요
 &lt;a class="anchor" href="#%ed%98%bc%eb%8f%88%ed%9b%84%ec%9d%98-%ea%b3%a0%ec%9a%94"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-02&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;#1&lt;/p&gt;
&lt;p&gt;「〈TV 뉴스〉의 프레데리크 스텐츠입니다. 카메러 박사님께 질문드리고 싶습니다.」&lt;/p&gt;
&lt;p&gt;「말씀하세요.」 알리스가 대답한다.&lt;/p&gt;
&lt;p&gt;「인간의 다른 아종들을 창조하려는 계획에서, 박사님은 자신을 신이라 여깁니까?」&lt;/p&gt;
&lt;p&gt;「저는 저 자신을 단순한 자연의 예찬자로 여깁니다.」 알리스는 침착하게 대꾸한다. 「우리를 둘러싼 확연히 보이는 기적, 자연 그 자체가 있는데, 하늘에서 보이지 않는 신을 찾을 필요가 있을까요?」&lt;/p&gt;
&lt;p&gt;꼭 필요하다고 여긴 이 말을 하게 된 것이 뿌듯해, 청중을 향해 미소를 짓고 말을 계속한다.&lt;/p&gt;
&lt;p&gt;「자연의 다채로운 풍경, 서로 너무나 다른 꽃들, 온갖 형태와 크기의 동물들, 이것이야말로 기적 중에서도 가장 큰 기적 아닐까요? 본 적도 없는 그 〈아버지 하느님〉과의 관련은 사양이지만, 매 순간 그 작품을 예찬할 수 있는 어머니로서의 자연은 기꺼이 그려 볼 수 있습니다. 그리고 제가 보는 것은 다양성 덕분에 경이로운 세상입니다. 각각 특별한 재능과 능력을 지닌 수백만 종이 있는 세상이지요. 왜 모든 것을 통제하고 획일화하려 하나요? 잠시 상상해 보세요, 우리 지구에 단 한 종의 물고기, 나무, 풀, 새, 곤충만 있다면 어떨지! 여러분이 두려워해야 하는 것은 다양성이 아니라 획일성입니다.」&lt;/p&gt;</description></item><item><title>Java #1 객체지향 프로그래밍: 캡슐화, 추상화, 다형성, 상속</title><link>https://yshghid.github.io/docs/study/sw/sw28/</link><pubDate>Mon, 01 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/sw/sw28/</guid><description>&lt;h1 id="java-1-객체지향-프로그래밍-캡슐화-추상화-다형성-상속"&gt;
 Java #1 객체지향 프로그래밍: 캡슐화, 추상화, 다형성, 상속
 &lt;a class="anchor" href="#java-1-%ea%b0%9d%ec%b2%b4%ec%a7%80%ed%96%a5-%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%98%eb%b0%8d-%ec%ba%a1%ec%8a%90%ed%99%94-%ec%b6%94%ec%83%81%ed%99%94-%eb%8b%a4%ed%98%95%ec%84%b1-%ec%83%81%ec%86%8d"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-01&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="목차"&gt;
 목차
 &lt;a class="anchor" href="#%eb%aa%a9%ec%b0%a8"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;캡슐화&lt;/li&gt;
&lt;li&gt;추상화&lt;/li&gt;
&lt;li&gt;다형성&lt;/li&gt;
&lt;li&gt;상속&lt;/li&gt;
&lt;li&gt;공통 특성: 인터페이스와 구현의 분리&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="1-캡슐화"&gt;
 1. 캡슐화
 &lt;a class="anchor" href="#1-%ec%ba%a1%ec%8a%90%ed%99%94"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;mark&gt;#1 개념 및 목적&lt;/mark&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개념
&lt;ul&gt;
&lt;li&gt;객체지향 프로그래밍에서 객체의 속성(필드)을 외부로부터 숨기고, 공개된 메서드(getter/setter)를 통해서만 접근하도록 만드는 원칙&lt;/li&gt;
&lt;li&gt;필드를 private으로 선언하고, 외부에서 직접 접근하지 못하게 제한하고, public 메서드인 getter와 setter를 제공해 값을 읽거나 수정할 수 있도록 한다. setter 내부에는 유효성 검사 로직을 넣어 잘못된 값이 들어오는 것을 막을 수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;목적
&lt;ol&gt;
&lt;li&gt;데이터 보호: 잘못된 값이 직접 들어가는 것을 막고, setter 내부에서 규칙을 강제함으로써 객체의 상태를 안정적으로 유지&lt;/li&gt;
&lt;li&gt;정보 은닉: 내부 구현이 어떻게 되어 있는지는 숨겨 두고, 외부에는 단순한 사용 방법만 제공함으로써 객체 사용자가 불필요한 복잡성을 신경 쓰지 않도록 한다.&lt;/li&gt;
&lt;li&gt;유지보수와 확장성: 내부 로직이 바뀌더라도 외부 인터페이스(getter/setter)가 같으면 사용하는 코드는 수정할 필요가 없으므로 프로그램 전체의 안정성이 높아지고 유지보수가 쉬워진다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;mark&gt;#2 샘플 코드&lt;/mark&gt;&lt;/p&gt;</description></item></channel></rss>