<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2025-09 on</title><link>https://yshghid.github.io/tags/2025-09/</link><description>Recent content in 2025-09 on</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 23 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://yshghid.github.io/tags/2025-09/index.xml" rel="self" type="application/rss+xml"/><item><title>Langchain #3</title><link>https://yshghid.github.io/docs/study/sw/sw38/</link><pubDate>Tue, 23 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/sw/sw38/</guid><description>&lt;h1 id="langchain-3"&gt;
 Langchain #3
 &lt;a class="anchor" href="#langchain-3"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-23&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;#1 작업 위치 설정&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 1. 작업 위치&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ pwd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/Users/yshmbid/Documents/home/github/MLops/template/#10.code
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 2. 파일 확인&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ls
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;__pycache__ practice_LLM_App_main.py
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;practice_LLM_App_front.vue
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;#2 백엔드 띄우기&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 3. 백엔드 띄우기&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ uvicorn practice_LLM_App_main:app --port &lt;span style="color:#ae81ff"&gt;8005&lt;/span&gt; --reload
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;INFO: Will watch &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; changes in these directories: &lt;span style="color:#f92672"&gt;[&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;/Users/yshmbid/Documents/home/github/MLops/template/#10.code&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;INFO: Uvicorn running on http://127.0.0.1:8005 &lt;span style="color:#f92672"&gt;(&lt;/span&gt;Press CTRL+C to quit&lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;INFO: Started reloader process &lt;span style="color:#f92672"&gt;[&lt;/span&gt;7018&lt;span style="color:#f92672"&gt;]&lt;/span&gt; using StatReload
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;🖥 CPU 환경에서 로드합니다.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;`&lt;/span&gt;torch_dtype&lt;span style="color:#e6db74"&gt;`&lt;/span&gt; is deprecated! Use &lt;span style="color:#e6db74"&gt;`&lt;/span&gt;dtype&lt;span style="color:#e6db74"&gt;`&lt;/span&gt; instead!
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Device set to use mps:0
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;INFO: Started server process &lt;span style="color:#f92672"&gt;[&lt;/span&gt;7020&lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;INFO: Waiting &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; application startup.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;INFO: Application startup complete.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;#3 프론트 띄우기&lt;/p&gt;</description></item><item><title>AI #2 HPO, XAI 실습</title><link>https://yshghid.github.io/docs/study/ai/ai38/</link><pubDate>Mon, 22 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai38/</guid><description>&lt;h1 id="ai-2-hpo-xai-실습"&gt;
 AI #2 HPO, XAI 실습
 &lt;a class="anchor" href="#ai-2-hpo-xai-%ec%8b%a4%ec%8a%b5"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-22&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-실습-개요"&gt;
 1. 실습 개요
 &lt;a class="anchor" href="#1-%ec%8b%a4%ec%8a%b5-%ea%b0%9c%ec%9a%94"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;목적
&lt;ul&gt;
&lt;li&gt;UCI Breast Cancer 데이터를 로드하고 전처리 후 XGBoost 모델을 구축 및 평가&lt;/li&gt;
&lt;li&gt;교차검증(StratifiedKFold, KFold)과 하이퍼파라미터 탐색 기법(RandomizedSearchCV, Optuna)을 비교하여 최적 성능을 도출&lt;/li&gt;
&lt;li&gt;SHAP을 활용하여 전역적·집단적·개별적 수준에서 해석력을 확보하고 도메인 지식과 연결&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;구현
&lt;ul&gt;
&lt;li&gt;데이터 로드: UCI Breast Cancer 데이터셋&lt;/li&gt;
&lt;li&gt;데이터 전처리: 타겟(Diagnosis)을 이진화(M=1, B=0), StandardScaler로 범위 스케일링, 상관계수 0.9 이상인 중복 변수 제거&lt;/li&gt;
&lt;li&gt;모델 구축: xgboost.XGBClassifier&lt;/li&gt;
&lt;li&gt;모델 평가: 정확도, AUC, 분류리포트, 혼동행렬, feature importance&lt;/li&gt;
&lt;li&gt;교차검증: KFold, StratifiedKFold&lt;/li&gt;
&lt;li&gt;하이퍼파라미터 최적화: Random Search, Optuna TPE&lt;/li&gt;
&lt;li&gt;모델 해석 (SHAP)
&lt;ul&gt;
&lt;li&gt;Bar Summary Plot: 전역적 중요도(평균 |SHAP|)를 통해 주요 변수 확인&lt;/li&gt;
&lt;li&gt;Beeswarm Plot: 변수 값 크기(빨강/파랑)와 방향성(+/−)에 따른 분포 해석&lt;/li&gt;
&lt;li&gt;Force / Waterfall Plot: 3가지 개별 환자 샘플(예측 확률 극단/불확실, SHAP 영향력 최대, 도메인 특이 케이스)을 선택하여 모델이 어떤 요인 때문에 해당 예측을 내렸는지 설명&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="2-실습-보고서"&gt;
 2. 실습 보고서
 &lt;a class="anchor" href="#2-%ec%8b%a4%ec%8a%b5-%eb%b3%b4%ea%b3%a0%ec%84%9c"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;목차&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;실습 내용&lt;/li&gt;
&lt;li&gt;개요&lt;/li&gt;
&lt;li&gt;결과 - 데이터 전처리&lt;/li&gt;
&lt;li&gt;결과 - 모델 구축 및 평가 실행&lt;/li&gt;
&lt;li&gt;결과 - 교차검증 전략 비교 실행&lt;/li&gt;
&lt;li&gt;결과 - 하이퍼파라미터 튜닝&lt;/li&gt;
&lt;li&gt;결과 - SHAP 기반 해석 (Bar Summary Plot, Beeswarm Plot)&lt;/li&gt;
&lt;li&gt;결과 - SHAP 기반 해석 (Waterfall Plot)&lt;/li&gt;
&lt;li&gt;Final Report - SHAP 결과 해석 및 임상 활용 방안&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;보고서 링크
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://open-trust-407.notion.site/AI-2-XAI-274766ec530e80c8977cd13e3c27af84?source=copy_link"&gt;https://open-trust-407.notion.site/AI-2-XAI-274766ec530e80c8977cd13e3c27af84?source=copy_link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="3-프롬프팅1---하이퍼파라미터별-의미"&gt;
 3. 프롬프팅1 - 하이퍼파라미터별 의미
 &lt;a class="anchor" href="#3-%ed%94%84%eb%a1%ac%ed%94%84%ed%8c%851---%ed%95%98%ec%9d%b4%ed%8d%bc%ed%8c%8c%eb%9d%bc%eb%af%b8%ed%84%b0%eb%b3%84-%ec%9d%98%eb%af%b8"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;값이 클수록?
&lt;ul&gt;
&lt;li&gt;n_estimators (트리 개수): 크면 학습을 오래 시킴, 성능을 높일 수 있음, overfitting&lt;/li&gt;
&lt;li&gt;max_depth (트리 깊이): 깊으면 데이터의 세부 패턴까지 학습해 overfitting&lt;/li&gt;
&lt;li&gt;learning_rate (학습률): 크면 빠르게 학습하지만 최적점을 지나쳐 버릴 수 있어 overfitting. 작으면 한 스텝씩 조심스럽게 학습해 일반화 성능은 좋아지지만 많은 트리 n_estimators가 필요할수있음.&lt;/li&gt;
&lt;li&gt;subsample (샘플 비율): 크면 variance가 크고 overfitting.&lt;/li&gt;
&lt;li&gt;colsample_bytree (특성 샘플링 비율): 1.0이면 모든 피처를 쓰고 낮추면 랜덤성을 주므로 모델 다양성을 높여 overfitting 완화.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="4-프롬프팅2---shap-플롯-해석법"&gt;
 4. 프롬프팅2 - SHAP 플롯 해석법
 &lt;a class="anchor" href="#4-%ed%94%84%eb%a1%ac%ed%94%84%ed%8c%852---shap-%ed%94%8c%eb%a1%af-%ed%95%b4%ec%84%9d%eb%b2%95"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Bar Summary Plot&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;봐야하는것: 막대 길이
&lt;ul&gt;
&lt;li&gt;막대 길이가 길수록 전체 모델 예측에서 해당 변수가 차지하는 중요도가 크다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;해석 포인트
&lt;ul&gt;
&lt;li&gt;막대 길이가 길다: 전역적으로 중요한 변수&lt;/li&gt;
&lt;li&gt;막대 길이가 짧다: 영향력이 거의 없는 변수&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Beeswarm Plot&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;봐야하는것: 막대 길이, 방향성, 색깔
&lt;ul&gt;
&lt;li&gt;막대 길이의 분포가 넓을수록 샘플별로 변수 효과가 다양하다.&lt;/li&gt;
&lt;li&gt;방향성이 +일수록 예측값을 올린다, -일수록 예측값을 낮춘다.&lt;/li&gt;
&lt;li&gt;색깔이 빨강 = 변수 값이 크다, 파랑 = 변수 값이 작다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;해석 포인트
&lt;ul&gt;
&lt;li&gt;막대길이와 방향성 조합
&lt;ul&gt;
&lt;li&gt;막대길이가 길고 방향성이 양수: 변수 값이 커질수록 예측 확률을 크게 올린다.&lt;/li&gt;
&lt;li&gt;막대길이가 길고 방향성이 음수: 변수 값이 작아질수록 예측 확률을 크게 낮춘다.&lt;/li&gt;
&lt;li&gt;막대길이가 짧거나 방향성이 양/음 혼재: 전체에 미치는 영향은 작음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;색깔과 방향성 조합
&lt;ul&gt;
&lt;li&gt;빨강이면서 방향성이 양수: 값이 클 때 예측값↑&lt;/li&gt;
&lt;li&gt;파랑이면서 방향성이 음수: 값이 작을 때 예측값↓&lt;/li&gt;
&lt;li&gt;원칙적으로는 위와 같은데
&lt;ul&gt;
&lt;li&gt;빨강이면서 음수에 몰림: 값이 클수록 오히려 예측값↓ (역효과)&lt;/li&gt;
&lt;li&gt;파랑이면서 양수에 몰림: 값이 작을수록 오히려 예측값↑ (역효과)&lt;/li&gt;
&lt;li&gt;이런 경우는 보통
&lt;ul&gt;
&lt;li&gt;비선형 관계: 변수 값이 커질수록 예측이 올라가다가, 일정 임계점 넘으면 오히려 내려가는 경우&lt;/li&gt;
&lt;li&gt;상호작용 효과: 다른 변수와 조합됐을 때만 특정 방향으로 작용하는 경우.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="3"&gt;
&lt;li&gt;Force / Waterfall Plot (개별 샘플 해석)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;봐야하는것: 막대 길이, 방향성
&lt;ul&gt;
&lt;li&gt;막대 길이 길수록 해당 샘플의 예측에 기여한 정도가 크다.&lt;/li&gt;
&lt;li&gt;방향성이 +일수록 예측값을 기준선(Base Value)에서 올리는 요인, -일수록 낮추는 요인.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;해석 포인트
&lt;ul&gt;
&lt;li&gt;막대길이가 길고 방향성이 양수: 이 변수 때문에 해당 샘플의 예측 확률이 많이 올라감.&lt;/li&gt;
&lt;li&gt;막대길이가 길고 방향성이 음수: 이 변수 때문에 해당 샘플의 예측 확률이 많이 내려감.&lt;/li&gt;
&lt;li&gt;막대길이가 짧음: 해당 샘플에서는 영향이 거의 없음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h1&gt;</description></item><item><title>AI #3 SK 바이오팜 뇌전증 발작 기전 탐지 프로젝트</title><link>https://yshghid.github.io/docs/study/ai/ai37/</link><pubDate>Mon, 22 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai37/</guid><description>&lt;h1 id="ai-3-sk-바이오팜-뇌전증-발작-기전-탐지-프로젝트"&gt;
 AI #3 SK 바이오팜 뇌전증 발작 기전 탐지 프로젝트
 &lt;a class="anchor" href="#ai-3-sk-%eb%b0%94%ec%9d%b4%ec%98%a4%ed%8c%9c-%eb%87%8c%ec%a0%84%ec%a6%9d-%eb%b0%9c%ec%9e%91-%ea%b8%b0%ec%a0%84-%ed%83%90%ec%a7%80-%ed%94%84%eb%a1%9c%ec%a0%9d%ed%8a%b8"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-22&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-프로젝트-배경"&gt;
 1. 프로젝트 배경
 &lt;a class="anchor" href="#1-%ed%94%84%eb%a1%9c%ec%a0%9d%ed%8a%b8-%eb%b0%b0%ea%b2%bd"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Digital biomarker
&lt;ul&gt;
&lt;li&gt;생체 신호를 디지털 신호로 감지해 질병 상태를 판단하는 지표.&lt;/li&gt;
&lt;li&gt;EEG(뇌전도), ECG(심전도)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;의료 데이터
&lt;ul&gt;
&lt;li&gt;병원 데이터는 실제성이 높지만 노이즈가 심하고 규모가 작음.&lt;/li&gt;
&lt;li&gt;근데 뇌전증 분야는 오픈 데이터셋(CHB-MIT 등)이 많아 연구 접근성이 높음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;서비스 목표: 뇌전증 환자에게 경량 하드웨어 기반의 웨어러블 기기(안경, 밴드, 손목형)를 제공
&lt;ul&gt;
&lt;li&gt;실제로는 머리 전체 64채널 EEG 대신, 관자놀이 부위 2~4채널 신호만 활용해 모델을 구동해야 함.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="2-전체-파이프라인"&gt;
 2. 전체 파이프라인
 &lt;a class="anchor" href="#2-%ec%a0%84%ec%b2%b4-%ed%8c%8c%ec%9d%b4%ed%94%84%eb%9d%bc%ec%9d%b8"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;실시간 서비스화를 고려하여 신호 입력부터 최종 출력까지 크게 4단계로 구성.
&lt;ul&gt;
&lt;li&gt;신호 수집(Input): 환자의 EEG, ECG 신호.&lt;/li&gt;
&lt;li&gt;전처리(Preprocessing): 잡음 제거, 스케일링, 채널 축소.&lt;/li&gt;
&lt;li&gt;모델(Modeling)
&lt;ul&gt;
&lt;li&gt;Detection(발작 탐지): CNN 기반 모델 → 실제 발작 시점에 신호를 감지.&lt;/li&gt;
&lt;li&gt;Prediction(발작 예측): 발작이 오기 전(병원 기준 최소 5분 전) 알림 제공을 목표. 그러나 EEG 특성상 발작 직전 신호 변화가 급격하여 예측은 어려움.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;후처리(Post-processing)
&lt;ul&gt;
&lt;li&gt;예측 결과를 단순 알림으로 끝내지 않고, 기존 저장된 데이터와 함께 시각화·요약.&lt;/li&gt;
&lt;li&gt;서비스 레벨에서 false positive를 줄이기 위해 정확도를 의도적으로 조정하기도 함.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="3-연구-및-모델링-과정"&gt;
 3. 연구 및 모델링 과정
 &lt;a class="anchor" href="#3-%ec%97%b0%ea%b5%ac-%eb%b0%8f-%eb%aa%a8%eb%8d%b8%eb%a7%81-%ea%b3%bc%ec%a0%95"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;(1) Baseline 모델
&lt;ul&gt;
&lt;li&gt;입력 신호: 2채널 EEG + 다른 생체 신호를 조합.&lt;/li&gt;
&lt;li&gt;구조: 2D Conv 기반 블록 (Conv → MaxPooling → BatchNorm → Padding) 반복.&lt;/li&gt;
&lt;li&gt;조합: 두 신호를 Concat 후 sigmoid로 확률값 산출.&lt;/li&gt;
&lt;li&gt;한계: 채널 수가 적어 feature 추출력이 낮고, 발작 이벤트 자체가 희소하여 detection은 가능하지만 prediction 성능은 미흡.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(2) 최종 모델 디자인
&lt;ul&gt;
&lt;li&gt;아이디어 전환: 일본 지진 탐지 논문에서 착안. 지진도 드물게 발생하고, 일어나면 영향이 큰 점에서 데이터 특성이 뇌전증 발작과 유사.&lt;/li&gt;
&lt;li&gt;모델 구조:
&lt;ul&gt;
&lt;li&gt;1D Conv 기반으로 feature map 추출.&lt;/li&gt;
&lt;li&gt;ResNet 블록을 도입해 skip connection과 residual learning 적용.&lt;/li&gt;
&lt;li&gt;Batch Normalization과 ReLU 활성화로 안정성 확보.&lt;/li&gt;
&lt;li&gt;Attention 메커니즘으로 정상 vs 발작 신호의 차이를 극대화.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;성능: Detection은 목표 스코어 달성, Prediction은 데이터 특성상 한계 존재. 최종적으로 semi-supervised 방법을 활용해 제한된 라벨 데이터를 보완.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="4-주요-연구-인사이트"&gt;
 4. 주요 연구 인사이트
 &lt;a class="anchor" href="#4-%ec%a3%bc%ec%9a%94-%ec%97%b0%ea%b5%ac-%ec%9d%b8%ec%82%ac%ec%9d%b4%ed%8a%b8"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;데이터 희소성 문제: 환자는 대부분 정상 상태에 있고 발작은 드물어, imbalance가 극심. 모델은 항상 “정상”으로 예측하는 경향.&lt;/li&gt;
&lt;li&gt;서비스 제약 고려: 논문 대부분은 64채널 데이터를 전제로 하지만, 실제 기기는 2~4채널만 사용해야 함. 따라서 모델 설계는 현실적인 센서 환경에 맞춰야 함.&lt;/li&gt;
&lt;li&gt;도메인 확장 사고: 뇌전증만 고집하지 않고, 유사 특성을 가진 다른 분야(지진 탐지)에서 모델 아이디어를 차용한 점이 혁신적.&lt;/li&gt;
&lt;li&gt;후처리 중요성: 연구 모델이 단순히 “탐지 여부”만 내뱉는 것이 아니라, 서비스로 쓰일 수 있도록 후처리 로직을 통해 신뢰도·사용성을 확보.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="5-최종-성과-및-의미"&gt;
 5. 최종 성과 및 의미
 &lt;a class="anchor" href="#5-%ec%b5%9c%ec%a2%85-%ec%84%b1%ea%b3%bc-%eb%b0%8f-%ec%9d%98%eb%af%b8"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Detection 성능 달성: 환자에게 즉각적인 발작 알림을 제공할 수준에 도달.&lt;/li&gt;
&lt;li&gt;Prediction의 난제 확인: 발작 발생 최소 5분 전 예측은 데이터 한계로 불가능에 가까움 → 임상 적용 시 expectation 관리 필요.&lt;/li&gt;
&lt;li&gt;서비스 수준 설계: 소형 칩셋 기반 웨어러블 기기에 적용할 수 있는 경량 모델 구조 확보.&lt;/li&gt;
&lt;li&gt;연구적 가치: semi-supervised 학습, cross-domain 모델링(지진 연구 적용)이라는 새로운 시도를 통해 향후 의료 AI 연구 확장 가능성 제시.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;정리하면, 이 프로젝트는 “64채널 연구용 EEG → 2~4채널 서비스용 웨어러블 EEG로 현실화”라는 어려운 문제를 해결하려 한 시도였고, detection 단계에서는 성공, prediction 단계에서는 한계를 확인했습니다. 동시에 지진 탐지 모델을 차용하는 등 cross-domain 사고로 연구-서비스 간 간극을 좁힌 사례라 할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h1&gt;</description></item><item><title>Langchain #2 LECL 템플릿</title><link>https://yshghid.github.io/docs/study/sw/sw37/</link><pubDate>Mon, 22 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/sw/sw37/</guid><description>&lt;h1 id="langchain-2-lecl-템플릿"&gt;
 Langchain #2 LECL 템플릿
 &lt;a class="anchor" href="#langchain-2-lecl-%ed%85%9c%ed%94%8c%eb%a6%bf"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-22&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-네이버-뉴스-기반-검색-수행"&gt;
 &lt;mark&gt;1. 네이버 뉴스 기반 검색 수행&lt;/mark&gt;
 &lt;a class="anchor" href="#1-%eb%84%a4%ec%9d%b4%eb%b2%84-%eb%89%b4%ec%8a%a4-%ea%b8%b0%eb%b0%98-%ea%b2%80%ec%83%89-%ec%88%98%ed%96%89"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;#1 실습개요&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;실습 목적
&lt;ul&gt;
&lt;li&gt;네이버 뉴스 기사를 수집·정제하여 벡터 DB(Chroma)에 임베딩으로 저장하고, 이를 기반으로 RAG(Retrieval-Augmented Generation) 구조를 구현하여 질문응답을 수행하고 Gradio UI를 통해 시각화된 인터페이스로 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;실습 설계
&lt;ul&gt;
&lt;li&gt;뉴스 데이터 수집: requests + Naver Open API -&amp;gt; 키워드별로 네이버 뉴스 기사 링크 수집&lt;/li&gt;
&lt;li&gt;문서 로딩 및 정제: WebBaseLoader + bs4(BeautifulSoup) -&amp;gt; 기사 본문만 추출하고 노이즈 텍스트 제거&lt;/li&gt;
&lt;li&gt;문서 분할: RecursiveCharacterTextSplitter -&amp;gt; 긴 본문을 2000자 단위로 청크 분할&lt;/li&gt;
&lt;li&gt;임베딩 생성 및 벡터 DB 구축: OpenAIEmbeddings(text-embedding-3-small) + Chroma -&amp;gt; 문서를 벡터화하여 저장 및 검색 가능 DB 생성&lt;/li&gt;
&lt;li&gt;RAG 체인 구성: ChatPromptTemplate + ChatOpenAI(gpt-4o-mini) + RunnablePassthrough -&amp;gt; 검색된 문서를 기반으로 LLM이 답변 생성&lt;/li&gt;
&lt;li&gt;질문응답 실행: retriever.invoke() + 체인 실행 -&amp;gt; 사용자 질의에 대해 관련 기사 기반 답변 도출&lt;/li&gt;
&lt;li&gt;Gradio UI 구현: gr.Blocks -&amp;gt; 검색 쿼리, 뉴스 기사 수, 질문 입력을 받아 RAG 결과를 실시간으로 출력하는 인터페이스 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;#2 RAG?&lt;/p&gt;</description></item><item><title>SKALA 재직자 특강용 1분 자기소개</title><link>https://yshghid.github.io/docs/study/career/career8/</link><pubDate>Mon, 22 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/career/career8/</guid><description>&lt;h1 id="skala-재직자-특강용-1분-자기소개"&gt;
 SKALA 재직자 특강용 1분 자기소개
 &lt;a class="anchor" href="#skala-%ec%9e%ac%ec%a7%81%ec%9e%90-%ed%8a%b9%ea%b0%95%ec%9a%a9-1%eb%b6%84-%ec%9e%90%ea%b8%b0%ec%86%8c%ea%b0%9c"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-22&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;mark&gt;#1 5분 자기소개 버전&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;안녕하십니까, 저는 바이오인포매틱스를 전공하며 AI 기반 질병 연관 마커 발굴 연구를 수행해 온 지원자 윤소현입니다.&lt;/p&gt;
&lt;p&gt;저의 강점은 두 가지로 요약할 수 있습니다. 첫째, 도메인 지식을 활용한 cross-domain 모델링 역량입니다. 저는 SARS-CoV-2의 돌연변이가 암 유전체 연구에서 반복적으로 나타나는 hotspot mutation 개념과 매우 유사하다는 인사이트를 기반으로 암 분야에서 고안된 hotspot 탐지 알고리즘들을 바이러스 데이터에 응용할 수 있다는 가정을 세웠고, 이를 기반으로 변이 밀도 기반의 클러스터링 알고리즘을 개발하여 SARS-CoV-2 중증도 관련 돌연변이 hotspot을 식별하였습니다. 이러한 경험을 통해 저는 서로 다른 분야의 연구 방법론을 통합해 새로운 인사이트를 도출하는 능력을 쌓을 수 있었습니다.&lt;/p&gt;</description></item><item><title>AI #1 ML 방법론 기초</title><link>https://yshghid.github.io/docs/study/ai/ai36/</link><pubDate>Fri, 19 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai36/</guid><description>&lt;h1 id="ai-1-ml-방법론-기초"&gt;
 AI #1 ML 방법론 기초
 &lt;a class="anchor" href="#ai-1-ml-%eb%b0%a9%eb%b2%95%eb%a1%a0-%ea%b8%b0%ec%b4%88"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-19&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;#1 ML 방법론&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;통계기반 방법론은?
&lt;ul&gt;
&lt;li&gt;linear regression이나 logistic regression 같은걸 말함&lt;/li&gt;
&lt;li&gt;가설과 근거가 명확히 세워져 있고&lt;/li&gt;
&lt;li&gt;데이터가 알고리즘에 맞게 정제돼있고&lt;/li&gt;
&lt;li&gt;통계적 유의성으로 결과가 나오는 깔끔한 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ML 방법론은?
&lt;ul&gt;
&lt;li&gt;작은 경연을 열듯 시행착오를 거치며 가장 적합한 모델을 찾는다는 컨셉이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;#2 지도 비지도 준지도&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모두 입력 데이터에 존재하는 구조를 추론함&lt;/li&gt;
&lt;li&gt;준지도
&lt;ul&gt;
&lt;li&gt;이상 탐지: 처럼 라벨링 비용이 클때&lt;/li&gt;
&lt;li&gt;딥러닝: 은 파라미터 수가 많아 안정적인 학습을 위해 충분한 데이터가 필요한데
&lt;ul&gt;
&lt;li&gt;우선 라벨이 있는 데이터로 기본 학습을 진행하고 -&amp;gt; 라벨이 없는 데이터의 구조나 의사결정 경계를 활용해 모델을 보완함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;#3 regression, instance based algorithm&lt;/p&gt;</description></item><item><title>Langchain #1 LECL 코드 필기</title><link>https://yshghid.github.io/docs/study/sw/sw36/</link><pubDate>Fri, 19 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/sw/sw36/</guid><description>&lt;h1 id="langchain-1-lecl-코드-필기"&gt;
 Langchain #1 LECL 코드 필기
 &lt;a class="anchor" href="#langchain-1-lecl-%ec%bd%94%eb%93%9c-%ed%95%84%ea%b8%b0"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-19&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-코드"&gt;
 1. 코드
 &lt;a class="anchor" href="#1-%ec%bd%94%eb%93%9c"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;cf) 가상환경 만들기&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 작업 위치&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ pwd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/Users/yshmbid/Documents/home/github/MLops/#0.lecl
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# rag 가상환경 생성&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ python -m venv rag
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ source ./rag/bin/activate
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;(&lt;/span&gt;rag&lt;span style="color:#f92672"&gt;)&lt;/span&gt; $ 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# cf) conda base 가상환경 자동으로켜는거 끄기&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;conda config --set auto_activate_base false
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;mark&gt;#1 practice_lcel-1.ipynb&lt;/mark&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;실습 목적
&lt;ul&gt;
&lt;li&gt;LangChain과 OpenAI API를 활용해 RAG(Retrieval-Augmented Generation) 파이프라인을 구축하고, 프롬프트 → LLM → 벡터DB → 검색기 → 답변 생성을 연계.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;실습 구현
&lt;ul&gt;
&lt;li&gt;프롬프트 템플릿(ChatPromptTemplate): 질문을 입력받아 LLM에 전달할 수 있도록 구조화된 텍스트 프롬프트를 정의한다.&lt;/li&gt;
&lt;li&gt;LLM 연결(ChatOpenAI): OpenAI의 GPT-4o 모델을 LangChain의 ChatOpenAI 클래스로 불러와 실제 답변을 생성한다.&lt;/li&gt;
&lt;li&gt;문서 분할(RecursiveCharacterTextSplitter): 입력 문서를 일정 길이 단위로 분할하여 벡터화 시 검색 효율성을 높인다.&lt;/li&gt;
&lt;li&gt;문서 구조(Document): LangChain의 Document 객체로 텍스트를 저장하고, page_content와 metadata를 함께 관리한다.&lt;/li&gt;
&lt;li&gt;임베딩(OpenAIEmbeddings): 문서의 텍스트를 벡터로 변환해 의미적 유사도를 계산할 수 있도록 한다.&lt;/li&gt;
&lt;li&gt;벡터DB 구축(FAISS): 분할된 문서 벡터를 저장하고 검색할 수 있도록 FAISS를 사용한다.&lt;/li&gt;
&lt;li&gt;검색기(Retriever): 질문을 임베딩한 뒤 벡터DB에서 유사도가 높은 문서를 검색하여 컨텍스트로 제공한다.&lt;/li&gt;
&lt;li&gt;체인 구성(Runnable, RunnablePassthrough, StrOutputParser): 프롬프트 → LLM → 출력 파싱 과정을 연결하고, 질문과 검색 결과를 합쳐 RAG 체인을 완성한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;mark&gt;#2 practice_lcel-2&lt;/mark&gt;&lt;/p&gt;</description></item><item><title>FastAPI #1 MariaDB, DB Migration, Swagger UI</title><link>https://yshghid.github.io/docs/study/sw/sw33/</link><pubDate>Wed, 17 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/sw/sw33/</guid><description>&lt;h1 id="fastapi-1-mariadb-db-migration-swagger-ui"&gt;
 FastAPI #1 MariaDB, DB Migration, Swagger UI
 &lt;a class="anchor" href="#fastapi-1-mariadb-db-migration-swagger-ui"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-17&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-실습-내용"&gt;
 1. 실습 내용
 &lt;a class="anchor" href="#1-%ec%8b%a4%ec%8a%b5-%eb%82%b4%ec%9a%a9"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;mark&gt;#1 maria db container 띄우기&lt;/mark&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 1. conda 가상환경 생성&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ conda create -n demo-app python&lt;span style="color:#f92672"&gt;=&lt;/span&gt;3.11
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ conda activate demo-app
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 2. 작업 위치&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# mariadb_tmplt 디렉토리를 다운받고 압축 해제함&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ pwd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/Users/yshmbid/Documents/home/github/MLops/mariadb_tmplt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ls
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;conf.d data env maria_db.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 3. Docker Compose로 MariaDB 실행&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ docker compose -p maria_db -f maria_db.yaml up -d
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 4. 컨테이너가 잘떴는지확인&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ docker ps | grep mariadb
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ae333f330cc4 mariadb:10.5.18 &lt;span style="color:#e6db74"&gt;&amp;#34;docker-entrypoint.s…&amp;#34;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt; minutes ago Up &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt; minutes 0.0.0.0:3379-&amp;gt;3306/tcp maria_db-sqldb-1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;docker desktop에서도 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;img width="1920" height="1080" alt="image" src="https://github.com/user-attachments/assets/e187b804-476e-4939-b271-966cc2035c40" /&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;mark&gt;#2 db connection&lt;/mark&gt;&lt;/p&gt;</description></item><item><title>FastAPI #2</title><link>https://yshghid.github.io/docs/study/sw/sw34/</link><pubDate>Wed, 17 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/sw/sw34/</guid><description>&lt;h1 id="fastapi-2"&gt;
 FastAPI #2
 &lt;a class="anchor" href="#fastapi-2"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-17&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;mark&gt;#1 main.py&lt;/mark&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#main.py&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# FastAPI 엔드포인트 정의 이해&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# FastAPI는 아래 두 가지 방식 중 하나로 엔드포인트를 정의&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# ① 직접 app에 정의&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# ② 모듈화한 라우터 파일을 include&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; fastapi &lt;span style="color:#f92672"&gt;import&lt;/span&gt; FastAPI
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; api.routers &lt;span style="color:#f92672"&gt;import&lt;/span&gt; task_a
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; api.routers &lt;span style="color:#f92672"&gt;import&lt;/span&gt; done_a
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; fastapi.staticfiles &lt;span style="color:#f92672"&gt;import&lt;/span&gt; StaticFiles
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; fastapi.responses &lt;span style="color:#f92672"&gt;import&lt;/span&gt; FileResponse
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; fastapi.openapi.docs &lt;span style="color:#f92672"&gt;import&lt;/span&gt; get_swagger_ui_html
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; os
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;main.py
&lt;ul&gt;
&lt;li&gt;fastapi app 서버를 구성.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;fastapi 프레임워크
&lt;ul&gt;
&lt;li&gt;웹 요청이 들어오면 특정 함수로 연결해준다.&lt;/li&gt;
&lt;li&gt;연결 지점 = 엔드포인트.&lt;/li&gt;
&lt;li&gt;ex) 누군가 브라우저에서 http://127.0.0.1:8001/hello를 호출하면, FastAPI는 이 요청을 보고 “아 이건 /hello 경로의 GET 요청이구나” 하고, 미리 등록해둔 hello() 함수를 실행한 뒤 그 반환값을 JSON으로 돌려준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;fastapi 기본 구조
&lt;ul&gt;
&lt;li&gt;먼저 app = FastAPI()로 애플리케이션 객체를 만들고&lt;/li&gt;
&lt;li&gt;그 뒤에 @app.get(&amp;quot;/&amp;quot;), @app.get(&amp;quot;/hello&amp;quot;) 같은 데코레이터로 함수를 등록하기.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# app = FastAPI()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# FastAPI 앱(서버)의 기본 뼈대 생성&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;app &lt;span style="color:#f92672"&gt;=&lt;/span&gt; FastAPI(docs_url&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 기본 /docs 비활성화, 개별 favicon 적용&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@app.get&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;/&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;async&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;root&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; {&lt;span style="color:#e6db74"&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;Welcome to the FastAPI server!&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@app.get&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;/hello&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;async&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;hello&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; {&lt;span style="color:#e6db74"&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;hello world!&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;보통 FastAPI는 /docs 주소로 들어가면 자동으로 Swagger UI라는 API 설명서가 나오지만 여기서는 app = FastAPI(docs_url=None)라고 작성해 기본 /docs 경로를 막음
&lt;ul&gt;
&lt;li&gt;나중에 직접 커스터마이징한 /docs 엔드포인트를 등록하려고.&lt;/li&gt;
&lt;li&gt;대신 / 경로에서는 단순히 &amp;ldquo;Welcome to the FastAPI server!&amp;ldquo;라는 메시지를 주고, /hello 경로에서는 &amp;ldquo;hello world!&amp;ldquo;라는 메시지를 줌.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# ① 경로 (/) 및 (/hello)에 대한 라우팅 추가 (라우터 파일 내에서 경로를 직접 정의)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 별도의 라우팅이 없으면 GET /tasks, POST /tasks 등의 API가 동작하지 않음&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# app.include_router(task.router)를 호출해야 task.py의 엔드포인트가 FastAPI 앱에 등록&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 여러 개의 라우트 모듈을 관리하기 쉽게 하기 위해 include_router()를 사용&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# ② 라우터 등록 (FastAPI 앱에 실제로 등록, 모듈화한 라우터 파일을 include)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;app&lt;span style="color:#f92672"&gt;.&lt;/span&gt;include_router(task_a&lt;span style="color:#f92672"&gt;.&lt;/span&gt;router) &lt;span style="color:#75715e"&gt;# main.py에서 api/routers/task.py의 라우트를 include_router()로 FastAPI 앱에 추가&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;app&lt;span style="color:#f92672"&gt;.&lt;/span&gt;include_router(done_a&lt;span style="color:#f92672"&gt;.&lt;/span&gt;router) &lt;span style="color:#75715e"&gt;# main.py에서 api/routers/done.py의 라우트를 include_router()로 FastAPI 앱에 추가&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;라우터?
&lt;ul&gt;
&lt;li&gt;엔드포인트들을 별도 파일로 나누어 관리할 수 있는 기능.&lt;/li&gt;
&lt;li&gt;할 일(Task)을 관리하는 API, 완료(Done)를 관리하는 API처럼 종류별로 나누면 프로젝트가 훨씬 깔끔해진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;app.include_router(task_a.router), app.include_router(done_a.router)
&lt;ul&gt;
&lt;li&gt;task_a.py 안에 정의된 라우터들을 불러와서 fastapi 앱에 등록한다.&lt;/li&gt;
&lt;li&gt;/tasks 같은 엔드포인트들이 main.py에 직접 쓰여 있지 않아도 라우터 파일이 include되면서 실제 서버에서 동작한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# static 경로 mount (필수!)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;BASE_DIR &lt;span style="color:#f92672"&gt;=&lt;/span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;path&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dirname(os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;path&lt;span style="color:#f92672"&gt;.&lt;/span&gt;abspath(__file__))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;STATIC_DIR &lt;span style="color:#f92672"&gt;=&lt;/span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;path&lt;span style="color:#f92672"&gt;.&lt;/span&gt;join(BASE_DIR, &lt;span style="color:#e6db74"&gt;&amp;#34;static&amp;#34;&lt;/span&gt;) &lt;span style="color:#75715e"&gt;# 현재 main.py가 api/ 안에 있다고 가정&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;app&lt;span style="color:#f92672"&gt;.&lt;/span&gt;mount(&lt;span style="color:#e6db74"&gt;&amp;#34;/static&amp;#34;&lt;/span&gt;, StaticFiles(directory&lt;span style="color:#f92672"&gt;=&lt;/span&gt;STATIC_DIR), name&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;static&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# favicon 직접 연결&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@app.get&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;/favicon.ico&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;async&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;favicon&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; FileResponse(os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;path&lt;span style="color:#f92672"&gt;.&lt;/span&gt;join(STATIC_DIR, &lt;span style="color:#e6db74"&gt;&amp;#34;favicon.ico&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;정적 파일(static files)은 fastapi에 연결해서 /static으로 접근.&lt;/li&gt;
&lt;li&gt;favicon.ico
&lt;ul&gt;
&lt;li&gt;웹 브라우저가 기본적으로 요청하는 아이콘 파일이기 때문에 @app.get(&amp;quot;/favicon.ico&amp;rdquo;) 엔드포인트를 만들어서 직접 반환한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Swagger UI 커스터마이징 - favicon 적용&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; fastapi.openapi.docs &lt;span style="color:#f92672"&gt;import&lt;/span&gt; get_swagger_ui_html
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@app.get&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;/docs&amp;#34;&lt;/span&gt;, include_in_schema&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;async&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;custom_swagger_ui_html&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; get_swagger_ui_html(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; openapi_url&lt;span style="color:#f92672"&gt;=&lt;/span&gt;app&lt;span style="color:#f92672"&gt;.&lt;/span&gt;openapi_url,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; title&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;My API Docs&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; swagger_favicon_url&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;/static/favicon.ico&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;swagger ui 커스터마이징
&lt;ul&gt;
&lt;li&gt;swagger_favicon_url=&amp;quot;/static/favicon.ico&amp;rdquo;&lt;/li&gt;
&lt;li&gt;지정한 아이콘을 Swagger UI 화면에 반영.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;mark&gt;#2&lt;/mark&gt;&lt;/p&gt;</description></item><item><title>FastAPI #2 논문 업로드 및 벡터화 API</title><link>https://yshghid.github.io/docs/study/sw/sw35/</link><pubDate>Wed, 17 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/sw/sw35/</guid><description>&lt;h1 id="fastapi-2-논문-업로드-및-벡터화-api"&gt;
 FastAPI #2 논문 업로드 및 벡터화 API
 &lt;a class="anchor" href="#fastapi-2-%eb%85%bc%eb%ac%b8-%ec%97%85%eb%a1%9c%eb%93%9c-%eb%b0%8f-%eb%b2%a1%ed%84%b0%ed%99%94-api"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-17&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-실행"&gt;
 1. 실행
 &lt;a class="anchor" href="#1-%ec%8b%a4%ed%96%89"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;$&lt;/span&gt; pwd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;/&lt;/span&gt;Users&lt;span style="color:#f92672"&gt;/&lt;/span&gt;yshmbid&lt;span style="color:#f92672"&gt;/&lt;/span&gt;Documents&lt;span style="color:#f92672"&gt;/&lt;/span&gt;home&lt;span style="color:#f92672"&gt;/&lt;/span&gt;github&lt;span style="color:#f92672"&gt;/&lt;/span&gt;MLops
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;$&lt;/span&gt; ls
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mariadb_tmplt pjt&lt;span style="color:#f92672"&gt;-&lt;/span&gt;main&lt;span style="color:#f92672"&gt;.&lt;/span&gt;py skala&lt;span style="color:#f92672"&gt;-&lt;/span&gt;fastapi&lt;span style="color:#f92672"&gt;-&lt;/span&gt;rpt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;zip
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mariadb_tmplt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;zip skala&lt;span style="color:#f92672"&gt;-&lt;/span&gt;fastapi&lt;span style="color:#f92672"&gt;-&lt;/span&gt;rpt template&lt;span style="color:#f92672"&gt;.&lt;/span&gt;zip
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;$&lt;/span&gt; uvicorn pjt&lt;span style="color:#f92672"&gt;-&lt;/span&gt;main:app &lt;span style="color:#f92672"&gt;--&lt;/span&gt;host &lt;span style="color:#ae81ff"&gt;127.0.0.1&lt;/span&gt; &lt;span style="color:#f92672"&gt;--&lt;/span&gt;port &lt;span style="color:#ae81ff"&gt;8002&lt;/span&gt; &lt;span style="color:#f92672"&gt;--&lt;/span&gt;reload
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;INFO: Will watch &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; changes &lt;span style="color:#f92672"&gt;in&lt;/span&gt; these directories: [&lt;span style="color:#e6db74"&gt;&amp;#39;/Users/yshmbid/Documents/home/github/MLops&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;INFO: Uvicorn running on http:&lt;span style="color:#f92672"&gt;//&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;127.0.0.1&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;8002&lt;/span&gt; (Press CTRL&lt;span style="color:#f92672"&gt;+&lt;/span&gt;C to quit)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;INFO: Started reloader process [&lt;span style="color:#ae81ff"&gt;75232&lt;/span&gt;] using WatchFiles
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;INFO: Started server process [&lt;span style="color:#ae81ff"&gt;75234&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;INFO: Waiting &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; application startup&lt;span style="color:#f92672"&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;INFO: Application startup complete&lt;span style="color:#f92672"&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img width="3360" height="2100" alt="image" src="https://github.com/user-attachments/assets/accad504-9d9d-4fb3-b546-783cdd7667ff" /&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;제대로 떴으니깐 pdf 처리 해보기&lt;/p&gt;</description></item><item><title>ML #1 Hyperparameter Optimization</title><link>https://yshghid.github.io/docs/study/ai/ai35/</link><pubDate>Tue, 16 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai35/</guid><description>&lt;h1 id="ml-1-hyperparameter-optimization"&gt;
 ML #1 Hyperparameter Optimization
 &lt;a class="anchor" href="#ml-1-hyperparameter-optimization"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-16&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-개요"&gt;
 1. 개요
 &lt;a class="anchor" href="#1-%ea%b0%9c%ec%9a%94"&gt;#&lt;/a&gt;
&lt;/h3&gt;</description></item><item><title>Langchain #1 (스터디) 노션 데이터로 나만의 RAG 시스템 구축하기</title><link>https://yshghid.github.io/docs/study/ai/ai32/</link><pubDate>Mon, 15 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai32/</guid><description>&lt;h1 id="langchain-1-스터디-노션-데이터로-나만의-rag-시스템-구축하기"&gt;
 Langchain #1 (스터디) 노션 데이터로 나만의 RAG 시스템 구축하기
 &lt;a class="anchor" href="#langchain-1-%ec%8a%a4%ed%84%b0%eb%94%94-%eb%85%b8%ec%85%98-%eb%8d%b0%ec%9d%b4%ed%84%b0%eb%a1%9c-%eb%82%98%eb%a7%8c%ec%9d%98-rag-%ec%8b%9c%ec%8a%a4%ed%85%9c-%ea%b5%ac%ec%b6%95%ed%95%98%ea%b8%b0"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-15&lt;/p&gt;
&lt;hr&gt;</description></item><item><title>Ray #1 (스터디) Batch Prediction with Ray Core</title><link>https://yshghid.github.io/docs/study/ai/ai34/</link><pubDate>Mon, 15 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai34/</guid><description>&lt;h1 id="ray-1-스터디-batch-prediction-with-ray-core"&gt;
 Ray #1 (스터디) Batch Prediction with Ray Core
 &lt;a class="anchor" href="#ray-1-%ec%8a%a4%ed%84%b0%eb%94%94-batch-prediction-with-ray-core"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-15&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;스터디때 준비해갔던 Ray Core를 사용해서 batch prediction 수행하는 예제!!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;batch prediction이 batch를 예측하는건줄알았는데(..) batch로 prediction하는것이었다.&lt;/li&gt;
&lt;li&gt;순서는 1. Task 기반 batch prediction 2. Actor 기반 batch prediction 3. GPU 기반 수행 코드&lt;/li&gt;
&lt;li&gt;출처는 Ray Document의 &lt;a href="https://docs.ray.io/en/latest/ray-core/examples/batch_prediction.html"&gt;Batch Prediction with Ray Core&lt;/a&gt;이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="0-개요"&gt;
 0. 개요
 &lt;a class="anchor" href="#0-%ea%b0%9c%ec%9a%94"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;목적
&lt;ul&gt;
&lt;li&gt;Parquet 형식의 대규모 데이터셋을 Ray를 이용해 분산 처리하며, 더미 모델을 로딩하여 배치 예측(batch prediction) 을 수행한다.&lt;/li&gt;
&lt;li&gt;Task와 Actor 두 가지 실행 방식을 비교하고, CPU/GPU 자원 활용 차이를 이해한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;설계
&lt;ul&gt;
&lt;li&gt;데이터셋 분할: S3에 저장된 Parquet 파일(12 shards)을 불러와 분산 태스크 단위로 처리&lt;/li&gt;
&lt;li&gt;모델 로딩: 더미 모델(load_model)을 정의하고 ray.put()을 통해 오브젝트 스토어에 1회 저장&lt;/li&gt;
&lt;li&gt;배치 예측(Task 기반): @ray.remote 태스크로 각 shard를 병렬 예측, 결과 크기 반환&lt;/li&gt;
&lt;li&gt;배치 예측(Actor 기반): BatchPredictor 클래스를 Ray Actor로 등록하고, ActorPool을 이용해 shard 분산 예측&lt;/li&gt;
&lt;li&gt;자원 활용(CPU/GPU): CPU 환경에서는 기본 Task 실행, GPU 환경에서는 @ray.remote(num_gpus=1)를 사용해 GPU에서 모델을 실행하도록 구성&lt;/li&gt;
&lt;li&gt;결과 확인: 각 shard에 대해 예측된 결과 크기를 출력하여 병렬 처리 동작을 검증&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="1-코드"&gt;
 1. 코드
 &lt;a class="anchor" href="#1-%ec%bd%94%eb%93%9c"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 0. 환경 준비&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;!&lt;/span&gt;pip &lt;span style="color:#f92672"&gt;-&lt;/span&gt;q install ray pandas pyarrow s3fs torch
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 1. Ray 초기화&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; ray
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ray&lt;span style="color:#f92672"&gt;.&lt;/span&gt;init()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 2. 더미 모델 정의&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; pandas &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; pd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; numpy &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; np
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;load_model&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# A dummy model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;model&lt;/span&gt;(batch: pd&lt;span style="color:#f92672"&gt;.&lt;/span&gt;DataFrame) &lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt; pd&lt;span style="color:#f92672"&gt;.&lt;/span&gt;DataFrame:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; model&lt;span style="color:#f92672"&gt;.&lt;/span&gt;payload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; np&lt;span style="color:#f92672"&gt;.&lt;/span&gt;zeros(&lt;span style="color:#ae81ff"&gt;100_000_000&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; pd&lt;span style="color:#f92672"&gt;.&lt;/span&gt;DataFrame({&lt;span style="color:#e6db74"&gt;&amp;#34;score&amp;#34;&lt;/span&gt;: batch[&lt;span style="color:#e6db74"&gt;&amp;#34;passenger_count&amp;#34;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; model
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;실습에서는 분산 처리 흐름을 보는 것이 핵심이기 때문에 실제 모델이 갖는 특성을 갖는 더미 모델을 생성해준다.
&lt;ul&gt;
&lt;li&gt;실제 모델이 갖는 특성 = 정확히는 실제 모델이 갖는 특성 중 분산 처리에 관여하는 특성.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;실제 모델이 갖는 특성 2가지?
&lt;ol&gt;
&lt;li&gt;큰 메모리 용량. 실제 머신러닝 모델, 특히 딥러닝 모델은 수백 MB에서 수 GB에 달하는 가중치 파라미터를 담고 있다 예를 들어 BERT나 GPT 같은 모델은 엄청난 수의 파라미터를 갖기 때문에, 한 노드에서 다른 노드로 옮길 때 그 자체로 데이터 전송 비용이 크므로 이를 구현해준다.&lt;/li&gt;
&lt;li&gt;입력 데이터를 받아서 변환된 출력을 만듭니다. 실제 모델은 어떤 입력(이미지, 텍스트, 테이블 데이터 등)을 받아서 예측값을 내놓으므로, 이를 구현해줍니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;구현 방법?
&lt;ol&gt;
&lt;li&gt;model.payload = np.zeros(100_000_000)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;큰 메모리의 가중치 파라미터를 담고 있음을 모방하는 코드. 모델이 내부적으로 “큰 덩어리” 데이터를 가진 객체처럼 보이며 이를 통해 Ray가 이 모델을 여러 노드에 배포할 때 진짜처럼 부담을 준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="2"&gt;
&lt;li&gt;{&amp;ldquo;score&amp;rdquo;: batch[&amp;ldquo;passenger_count&amp;rdquo;] % 2 == 0}&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;입력값을 받아서 예측값을 내놓음을 모방하는 코드. 모델은 dataframe을 input으로 받아 승객 수가 짝수냐 홀수냐를 판별한다 즉 “입력 데이터를 보고 뭔가 계산해서 새로운 결과를 만든다”라는 모델의 핵심 행위만 구현한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;mark&gt;1. Task 기반 batch prediction&lt;/mark&gt;&lt;/p&gt;</description></item><item><title>AI #1 ML 방법론 기초</title><link>https://yshghid.github.io/docs/study/ai/ai33/</link><pubDate>Sat, 13 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai33/</guid><description>&lt;h1 id="ai-1-ml-방법론-기초"&gt;
 AI #1 ML 방법론 기초
 &lt;a class="anchor" href="#ai-1-ml-%eb%b0%a9%eb%b2%95%eb%a1%a0-%ea%b8%b0%ec%b4%88"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-13&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;#1 ML type (p.31-33)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ML의 학습방법 3가지
&lt;ul&gt;
&lt;li&gt;지도학습(Supervised)
&lt;ul&gt;
&lt;li&gt;입력 데이터와 출력 데이터가 모두 제공되고 모델은 입력을 보면 어떤 출력이 나와야 하는지를 배움. 학습한 모델은 새로운 데이터가 들어오면 예측을 하고 -&amp;gt; 결과를 실제 정답과 비교해 정확도 계산.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;비지도학습(Unsupervised)
&lt;ul&gt;
&lt;li&gt;문제는 있지만 정답 라벨이 없음. 비슷한 특징을 가진 학생들을 묶어서 그룹을 만들고 어떤 그룹이 우수한지 알 수 없지만 데이터 안에서 자연스럽게 나타나는 구조를 파악한다(클러스터링)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;준지도학습(Semi-Supervised)
&lt;ul&gt;
&lt;li&gt;라벨이 붙은 소량의 데이터와, 라벨이 없는 대량의 데이터를 동시에 사용하면 더 나은 모델을 만들 수 있다 왜냐하면 100% 라벨링된 데이터가 있을 때만큼 정확하지는 않지만, 현실에서는 라벨링이 부족한 경우가 많고 라벨 없는 데이터가 양은 많아서 데이터 분포를 더 잘 보여주기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;#2 머신러닝 알고리즘 (p.34)&lt;/p&gt;</description></item><item><title>ATMOSPHERE</title><link>https://yshghid.github.io/docs/hobby/daily/daily20/</link><pubDate>Fri, 12 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/hobby/daily/daily20/</guid><description>&lt;h1 id="atmosphere"&gt;
 ATMOSPHERE
 &lt;a class="anchor" href="#atmosphere"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-12&lt;/p&gt;
&lt;hr&gt;
&lt;img width="1398" height="1858" alt="image" src="https://github.com/user-attachments/assets/9022c56b-2e86-4db6-9f88-37069cc989b2" /&gt;
&lt;img width="1398" height="1858" alt="image" src="https://github.com/user-attachments/assets/0cc7646a-f01c-4d70-963a-3958e48c8216" /&gt;
&lt;img width="1392" height="1852" alt="image" src="https://github.com/user-attachments/assets/03ad226e-8d80-43ed-bb33-48e9f8f3b401" /&gt;
&lt;img width="1392" height="1856" alt="image" src="https://github.com/user-attachments/assets/0bdfa6d7-9df6-4db2-82a9-87b9ffaf5280" /&gt;
&lt;img width="1196" height="1606" alt="image" src="https://github.com/user-attachments/assets/3b6545c6-d986-4cdd-9a61-4ef52acb0170" /&gt;
&lt;img width="1392" height="1866" alt="image" src="https://github.com/user-attachments/assets/9c9fa4d0-4d5a-4328-bb09-4c992ea6e80b" /&gt;
&lt;img width="1392" height="1860" alt="image" src="https://github.com/user-attachments/assets/29632417-9704-45e5-8dcf-6b215b64fc7f" /&gt;
&lt;img width="1394" height="1860" alt="image" src="https://github.com/user-attachments/assets/22d1e3ae-f45d-4e26-8170-5bfca8d545c6" /&gt;
&lt;img width="1396" height="1860" alt="image" src="https://github.com/user-attachments/assets/9cc4bcbd-9fb0-4121-904d-d1b3a2fb5949" /&gt;
&lt;img width="1478" height="1480" alt="image" src="https://github.com/user-attachments/assets/086004d3-6a37-4318-b8c3-55c84c9b5f24" /&gt;
&lt;h1 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h1&gt;</description></item><item><title>Langchain #1 (스터디) 노션 데이터로 나만의 RAG 시스템 구축하기</title><link>https://yshghid.github.io/docs/study/ai/ai30/</link><pubDate>Wed, 10 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai30/</guid><description>&lt;h1 id="langchain-1-스터디-노션-데이터로-나만의-rag-시스템-구축하기"&gt;
 Langchain #1 (스터디) 노션 데이터로 나만의 RAG 시스템 구축하기
 &lt;a class="anchor" href="#langchain-1-%ec%8a%a4%ed%84%b0%eb%94%94-%eb%85%b8%ec%85%98-%eb%8d%b0%ec%9d%b4%ed%84%b0%eb%a1%9c-%eb%82%98%eb%a7%8c%ec%9d%98-rag-%ec%8b%9c%ec%8a%a4%ed%85%9c-%ea%b5%ac%ec%b6%95%ed%95%98%ea%b8%b0"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-10&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;스터디하는친구가 만들어준코드인데 내 노션으로 돌려봤다!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;실습 목적&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;노션 데이터를 &lt;mark&gt;임베딩 생성&lt;/mark&gt;하여 FAISS 벡터 스토어에 저장하고 이를 기반으로 &lt;mark&gt;유사 문서 검색&lt;/mark&gt;을 수행하며, &lt;mark&gt;청킹 기법&lt;/mark&gt;을 통해 데이터 구조를 이해하고 &lt;mark&gt;LLM 프롬프트 제약&lt;/mark&gt;을 적용한 뒤, RAG 구조를 접목해 &lt;mark&gt;자동 답변 구현&lt;/mark&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;실습 설계&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;mark&gt;임베딩 생성&lt;/mark&gt;: SentenceTransformer(&amp;ldquo;BAAI/bge-m3&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;&lt;mark&gt;유사 문서 검색&lt;/mark&gt;: 코사인 유사도 + FAISS 벡터 스토어 기반 최근접 탐색&lt;/li&gt;
&lt;li&gt;&lt;mark&gt;청킹 기법&lt;/mark&gt;: Markdown 단위 분리 + 길이 기반 추가 분할&lt;/li&gt;
&lt;li&gt;&lt;mark&gt;LLM 프롬프트 제약&lt;/mark&gt;: 근거 기반 답변(추측 금지 규칙 포함)&lt;/li&gt;
&lt;li&gt;&lt;mark&gt;자동 답변 구현&lt;/mark&gt;: RAG 구조 + &amp;ldquo;meta-llama/llama-3.1-8b-instruct&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사용한 노션 링크&lt;/p&gt;</description></item><item><title>ML #1</title><link>https://yshghid.github.io/docs/study/ai/ai31/</link><pubDate>Wed, 10 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai31/</guid><description>&lt;h1 id="ml-1"&gt;
 ML #1
 &lt;a class="anchor" href="#ml-1"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-10&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1"&gt;
 1
 &lt;a class="anchor" href="#1"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# !pip install numpy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# !pip install pandas&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# !pip install seaborn&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# !pip install matplotlib&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# !pip install -U scikit-learn&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# !pip install xgboost&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# !pip install lightgbm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; warnings
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; numpy &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; np
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; pandas &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; pd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; seaborn &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; sns
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; plt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; sklearn.datasets &lt;span style="color:#f92672"&gt;import&lt;/span&gt; load_diabetes
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; sklearn.model_selection &lt;span style="color:#f92672"&gt;import&lt;/span&gt; train_test_split
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; sklearn.metrics &lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; r2_score,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mean_squared_error,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; root_mean_squared_error,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mean_absolute_percentage_error,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;warnings&lt;span style="color:#f92672"&gt;.&lt;/span&gt;filterwarnings(&lt;span style="color:#e6db74"&gt;&amp;#34;ignore&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pd&lt;span style="color:#f92672"&gt;.&lt;/span&gt;set_option(&lt;span style="color:#e6db74"&gt;&amp;#34;display.max_columns&amp;#34;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pd&lt;span style="color:#f92672"&gt;.&lt;/span&gt;set_option(&lt;span style="color:#e6db74"&gt;&amp;#34;float_format&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{:.4f}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;format)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sns&lt;span style="color:#f92672"&gt;.&lt;/span&gt;set_style(&lt;span style="color:#e6db74"&gt;&amp;#34;whitegrid&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;RANDOM_STATE &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;42&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 1. Data Definition&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;_data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; load_diabetes()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(_data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;DESCR)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.. _diabetes_dataset:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Diabetes dataset
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;----------------
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Ten baseline variables, age, sex, body mass index, average blood
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pressure, and six blood serum measurements were obtained for each of n =
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;442 diabetes patients, as well as the response of interest, a
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;quantitative measure of disease progression one year after baseline.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;**Data Set Characteristics:**
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;:Number of Instances: 442
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;:Number of Attributes: First 10 columns are numeric predictive values
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;:Target: Column 11 is a quantitative measure of disease progression one year after baseline
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;:Attribute Information:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - age age in years
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - sex
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - bmi body mass index
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - bp average blood pressure
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - s1 tc, total serum cholesterol
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - s2 ldl, low-density lipoproteins
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - s3 hdl, high-density lipoproteins
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - s4 tch, total cholesterol / HDL
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - s5 ltg, possibly log of serum triglycerides level
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - s6 glu, blood sugar level
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Note: Each of these 10 feature variables have been mean centered and scaled by the standard deviation times the square root of `n_samples` (i.e. the sum of squares of each column totals 1).
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Source URL:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;https://www4.stat.ncsu.edu/~boos/var.select/diabetes.html
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;For more information see:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Bradley Efron, Trevor Hastie, Iain Johnstone and Robert Tibshirani (2004) &amp;#34;Least Angle Regression,&amp;#34; Annals of Statistics (with discussion), 407-499.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;(https://web.stanford.edu/~hastie/Papers/LARS/LeastAngle_2002.pdf)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; _data[&lt;span style="color:#e6db74"&gt;&amp;#34;data&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;feature_names &lt;span style="color:#f92672"&gt;=&lt;/span&gt; _data[&lt;span style="color:#e6db74"&gt;&amp;#34;feature_names&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;df &lt;span style="color:#f92672"&gt;=&lt;/span&gt; pd&lt;span style="color:#f92672"&gt;.&lt;/span&gt;DataFrame(data, columns&lt;span style="color:#f92672"&gt;=&lt;/span&gt;feature_names)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;df[&lt;span style="color:#e6db74"&gt;&amp;#34;target&amp;#34;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; _data[&lt;span style="color:#e6db74"&gt;&amp;#34;target&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;head()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 2. EDA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Correlation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;figure(figsize&lt;span style="color:#f92672"&gt;=&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sns&lt;span style="color:#f92672"&gt;.&lt;/span&gt;heatmap(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; data&lt;span style="color:#f92672"&gt;=&lt;/span&gt;df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;drop(&lt;span style="color:#e6db74"&gt;&amp;#34;target&amp;#34;&lt;/span&gt;, axis&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;corr(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; annot&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cmap&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;coolwarm&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;show()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 4. Machine Learning Regression&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Dataset Definition&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;X &lt;span style="color:#f92672"&gt;=&lt;/span&gt; df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;drop(&lt;span style="color:#e6db74"&gt;&amp;#34;target&amp;#34;&lt;/span&gt;, axis&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;y &lt;span style="color:#f92672"&gt;=&lt;/span&gt; df[&lt;span style="color:#e6db74"&gt;&amp;#34;target&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 먼저 train+valid와 test로 분할 (80:20)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;X_temp, X_test, y_temp, y_test &lt;span style="color:#f92672"&gt;=&lt;/span&gt; train_test_split(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; X, y, test_size&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0.2&lt;/span&gt;, random_state&lt;span style="color:#f92672"&gt;=&lt;/span&gt;RANDOM_STATE
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# train+valid를 다시 train과 valid로 분할 (75:25)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;X_train, X_valid, y_train, y_valid &lt;span style="color:#f92672"&gt;=&lt;/span&gt; train_test_split(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; X_temp, y_temp, test_size&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0.25&lt;/span&gt;, random_state&lt;span style="color:#f92672"&gt;=&lt;/span&gt;RANDOM_STATE
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;데이터 분할 결과:&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Train: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;len(X_train)&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt; (&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;len(X_train)&lt;span style="color:#f92672"&gt;/&lt;/span&gt;len(X)&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;&lt;span style="color:#e6db74"&gt;:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;.1f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%)&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Valid: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;len(X_valid)&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt; (&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;len(X_valid)&lt;span style="color:#f92672"&gt;/&lt;/span&gt;len(X)&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;&lt;span style="color:#e6db74"&gt;:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;.1f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%)&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Test: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;len(X_test)&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt; (&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;len(X_test)&lt;span style="color:#f92672"&gt;/&lt;/span&gt;len(X)&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;&lt;span style="color:#e6db74"&gt;:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;.1f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%)&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;데이터 분할 결과:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Train: 264 (59.7%)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Valid: 89 (20.1%)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Test: 89 (20.1%)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Model (Vanila)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; sklearn.tree &lt;span style="color:#f92672"&gt;import&lt;/span&gt; DecisionTreeRegressor
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;model &lt;span style="color:#f92672"&gt;=&lt;/span&gt; DecisionTreeRegressor(random_state&lt;span style="color:#f92672"&gt;=&lt;/span&gt;RANDOM_STATE)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;model&lt;span style="color:#f92672"&gt;.&lt;/span&gt;fit(X_train, y_train)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;model&lt;span style="color:#f92672"&gt;.&lt;/span&gt;score(X_train, y_train)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(model&lt;span style="color:#f92672"&gt;.&lt;/span&gt;intercept_, model&lt;span style="color:#f92672"&gt;.&lt;/span&gt;coef_)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;1.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Feature Importance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;model&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feature_importances_
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;feature_names
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;_feature_importances &lt;span style="color:#f92672"&gt;=&lt;/span&gt; pd&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Series(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; model&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feature_importances_,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; index&lt;span style="color:#f92672"&gt;=&lt;/span&gt;feature_names,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;_feature_importances
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;array([0.08981708, 0.00592253, 0.43861624, 0.08517564, 0.04463861,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 0.04418316, 0.05650334, 0.05949104, 0.13289137, 0.04276099])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;[&amp;#39;age&amp;#39;, &amp;#39;sex&amp;#39;, &amp;#39;bmi&amp;#39;, &amp;#39;bp&amp;#39;, &amp;#39;s1&amp;#39;, &amp;#39;s2&amp;#39;, &amp;#39;s3&amp;#39;, &amp;#39;s4&amp;#39;, &amp;#39;s5&amp;#39;, &amp;#39;s6&amp;#39;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;age 0.0898
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sex 0.0059
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;bmi 0.4386
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;bp 0.0852
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;s1 0.0446
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;s2 0.0442
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;s3 0.0565
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;s4 0.0595
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;s5 0.1329
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;s6 0.0428
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;dtype: float64
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;_feature_importances&lt;span style="color:#f92672"&gt;.&lt;/span&gt;nlargest()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;plot(kind&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;barh&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Prediction&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 각 셋에 대한 예측&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;y_train_pred &lt;span style="color:#f92672"&gt;=&lt;/span&gt; model&lt;span style="color:#f92672"&gt;.&lt;/span&gt;predict(X_train)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;y_valid_pred &lt;span style="color:#f92672"&gt;=&lt;/span&gt; model&lt;span style="color:#f92672"&gt;.&lt;/span&gt;predict(X_valid)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;y_test_pred &lt;span style="color:#f92672"&gt;=&lt;/span&gt; model&lt;span style="color:#f92672"&gt;.&lt;/span&gt;predict(X_test)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 각 셋의 성능 평가&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;calculate_metrics&lt;/span&gt;(y_true, y_pred, set_name):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; r2 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; r2_score(y_true, y_pred)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mse &lt;span style="color:#f92672"&gt;=&lt;/span&gt; mean_squared_error(y_true, y_pred)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; rmse &lt;span style="color:#f92672"&gt;=&lt;/span&gt; root_mean_squared_error(y_true, y_pred)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mape &lt;span style="color:#f92672"&gt;=&lt;/span&gt; mean_absolute_percentage_error(y_true, y_pred)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;Set&amp;#39;&lt;/span&gt;: set_name,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;R²&amp;#39;&lt;/span&gt;: r2,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;MSE&amp;#39;&lt;/span&gt;: mse,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;RMSE&amp;#39;&lt;/span&gt;: rmse,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;MAPE&amp;#39;&lt;/span&gt;: mape
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 모든 셋의 성능 계산&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;train_metrics &lt;span style="color:#f92672"&gt;=&lt;/span&gt; calculate_metrics(y_train, y_train_pred, &lt;span style="color:#e6db74"&gt;&amp;#39;Train&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;valid_metrics &lt;span style="color:#f92672"&gt;=&lt;/span&gt; calculate_metrics(y_valid, y_valid_pred, &lt;span style="color:#e6db74"&gt;&amp;#39;Valid&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;test_metrics &lt;span style="color:#f92672"&gt;=&lt;/span&gt; calculate_metrics(y_test, y_test_pred, &lt;span style="color:#e6db74"&gt;&amp;#39;Test&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 결과를 DataFrame으로 정리&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;results_df &lt;span style="color:#f92672"&gt;=&lt;/span&gt; pd&lt;span style="color:#f92672"&gt;.&lt;/span&gt;DataFrame([train_metrics, valid_metrics, test_metrics])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;results_df &lt;span style="color:#f92672"&gt;=&lt;/span&gt; results_df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;set_index(&lt;span style="color:#e6db74"&gt;&amp;#39;Set&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;&amp;#34;=== Train/Valid/Test 셋 성능 비교 ===&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(results_df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;round(&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;=== Train/Valid/Test 셋 성능 비교 ===
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; R² MSE RMSE MAPE
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Set 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Train 1.0000 0.0000 0.0000 0.0000
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Valid 0.2095 4330.7978 65.8088 0.3744
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Test -0.2659 6706.9101 81.8957 0.5430
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Metrics&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 과적합 분석&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;=== 과적합 분석 ===&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;train_valid_r2_diff &lt;span style="color:#f92672"&gt;=&lt;/span&gt; train_metrics[&lt;span style="color:#e6db74"&gt;&amp;#39;R²&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; valid_metrics[&lt;span style="color:#e6db74"&gt;&amp;#39;R²&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;valid_test_r2_diff &lt;span style="color:#f92672"&gt;=&lt;/span&gt; valid_metrics[&lt;span style="color:#e6db74"&gt;&amp;#39;R²&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; test_metrics[&lt;span style="color:#e6db74"&gt;&amp;#39;R²&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Train-Valid R² 차이: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;train_valid_r2_diff&lt;span style="color:#e6db74"&gt;:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;.4f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Valid-Test R² 차이: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;valid_test_r2_diff&lt;span style="color:#e6db74"&gt;:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;.4f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;=== 과적합 분석 ===
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Train-Valid R² 차이: 0.7905
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Valid-Test R² 차이: 0.4754
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;임계값 0.1&lt;/p&gt;</description></item><item><title>Kubernetes #2 ConfigMap, PVC, Liveness/Readiness, Blue/Green</title><link>https://yshghid.github.io/docs/study/sw/sw32/</link><pubDate>Tue, 09 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/sw/sw32/</guid><description>&lt;h1 id="kubernetes-2-configmap-pvc-livenessreadiness-bluegreen"&gt;
 Kubernetes #2 ConfigMap, PVC, Liveness/Readiness, Blue/Green
 &lt;a class="anchor" href="#kubernetes-2-configmap-pvc-livenessreadiness-bluegreen"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-09&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-kubectl-명령어-실습"&gt;
 1. kubectl 명령어 실습
 &lt;a class="anchor" href="#1-kubectl-%eb%aa%85%eb%a0%b9%ec%96%b4-%ec%8b%a4%ec%8a%b5"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;#1 배포된 컨테이너를 쿠버네티스에서 확인하기&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 배포 상태 확인&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ kubectl get pod -n skala-practice | grep sk019
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sk019-myfirst-api-server-57fddcd6c8-l4jms 1/1 Running &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; 108m
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 서비스 확인&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ kubectl get svc -n skala-practice | grep sk019
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sk019-myfirst-api-server ClusterIP 10.100.83.86 &amp;lt;none&amp;gt; 8080/TCP,8081/TCP 18h
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;#2 로컬 &amp;lt;-&amp;gt; Pod 간 파일/디렉토리 복사&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 수행 위치&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ pwd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/Users/yshmbid/Documents/home/github/Cloud/workspace/kubernetes/02.deploy
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Pod 이름 확인&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ kubectl get pod -n skala-practice | grep sk019
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sk019-myfirst-api-server-57fddcd6c8-l4jms 1/1 Running &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; 120m
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 로컬의 data 디렉토리를 Pod 내부 /app/data 로 복사&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ kubectl cp &lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;pwd&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt;/data skala-practice/sk019-myfirst-api-server-57fddcd6c8-l4jms:/app/data
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Pod /app/data → 로컬 ./download 디렉토리로 복사&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# attach-my-pod 내 /shared-data/data 를 local ./data 에 복사&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ kubectl cp skala-practice/sk019-myfirst-api-server-57fddcd6c8-l4jms:/app/data &lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;pwd&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt;/download
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tar: Removing leading &lt;span style="color:#e6db74"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; from member names
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 복사된 파일 확인&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ls -al ./download/
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;total &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;drwxr-xr-x &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt; yshmbid staff &lt;span style="color:#ae81ff"&gt;128&lt;/span&gt; Sep &lt;span style="color:#ae81ff"&gt;9&lt;/span&gt; 11:30 .
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;drwxr-xr-x &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt; yshmbid staff &lt;span style="color:#ae81ff"&gt;256&lt;/span&gt; Sep &lt;span style="color:#ae81ff"&gt;9&lt;/span&gt; 11:30 ..
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;drwxr-xr-x &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt; yshmbid staff &lt;span style="color:#ae81ff"&gt;96&lt;/span&gt; Sep &lt;span style="color:#ae81ff"&gt;9&lt;/span&gt; 11:30 data
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;-rw-r--r-- &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; yshmbid staff &lt;span style="color:#ae81ff"&gt;7173&lt;/span&gt; Sep &lt;span style="color:#ae81ff"&gt;9&lt;/span&gt; 11:30 data.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="2-digest-개념--레지스트리에서-docker-이미지-내려받기"&gt;
 2. digest 개념 &amp;amp; 레지스트리에서 Docker 이미지 내려받기
 &lt;a class="anchor" href="#2-digest-%ea%b0%9c%eb%85%90--%eb%a0%88%ec%a7%80%ec%8a%a4%ed%8a%b8%eb%a6%ac%ec%97%90%ec%84%9c-docker-%ec%9d%b4%eb%af%b8%ec%a7%80-%eb%82%b4%eb%a0%a4%eb%b0%9b%ea%b8%b0"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Harbor 레지스트리에서 이미지 Pull&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ sudo docker pull --platform&lt;span style="color:#f92672"&gt;=&lt;/span&gt;linux/amd64 amdp-registry.skala-ai.com/skala25a/skala-k8s.base@sha256:24834d6a4a35ed1f26a4abb63398b8f4a1a343ae13685c2567581fb57d4d1dcd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2025/09/09 11:39:19 must use ASL logging &lt;span style="color:#f92672"&gt;(&lt;/span&gt;which requires CGO&lt;span style="color:#f92672"&gt;)&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; running as root
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;amdp-registry.skala-ai.com/skala25a/skala-k8s.base@sha256:24834d6a4a35ed1f26a4abb63398b8f4a1a343ae13685c2567581fb57d4d1dcd: Pulling from skala25a/skala-k8s.base
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 로컬 이미지 목록 확인&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ sudo docker images
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;REPOSITORY TAG IMAGE ID CREATED SIZE
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;amdp-registry.skala-ai.com/skala25a/sk019-myfirst-api-server 1.0.0 aa813ed844f7 &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; hours ago 471MB
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sk019-myfirst-api-server 1.0.0 aa813ed844f7 &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; hours ago 471MB
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="3-configmap"&gt;
 3. ConfigMap
 &lt;a class="anchor" href="#3-configmap"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;실습내용
&lt;ul&gt;
&lt;li&gt;ConfigMap 생성 → 연결 → Pod/Service 확인 → Endpoint 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;#1 ConfigMap 생성&lt;/p&gt;</description></item><item><title>Kubernetes #1 Pod, Port-forward</title><link>https://yshghid.github.io/docs/study/sw/sw31/</link><pubDate>Mon, 08 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/sw/sw31/</guid><description>&lt;h1 id="kubernetes-1-pod-port-forward"&gt;
 Kubernetes #1 Pod, Port-forward
 &lt;a class="anchor" href="#kubernetes-1-pod-port-forward"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-08&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-실습환경설정"&gt;
 1. 실습환경설정
 &lt;a class="anchor" href="#1-%ec%8b%a4%ec%8a%b5%ed%99%98%ea%b2%bd%ec%84%a4%ec%a0%95"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;필요 패키지
&lt;ul&gt;
&lt;li&gt;kubectl, jq, curl, maven, Java&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;brew install kubectl jq curl maven
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;kubectl&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes 클러스터와 통신하는 CLI 도구&lt;/li&gt;
&lt;li&gt;쿠버네티스는 여러 개의 프로그램이 동시에 돌아가는 큰 시스템이고 여기에 지시를 내리는 도구.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java 17&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;여러 프로그램을 실행하는 공통 실행 환경(JVM)을 제공&lt;/li&gt;
&lt;li&gt;공통 실행 환경?
&lt;ul&gt;
&lt;li&gt;여러 프로그램을 공통 언어로 사용하게해준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로그램들이 Java가 어디 있는지 알아야 하니까 JAVA_HOME이라는 환경 변수를 설정해준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;export JAVA_HOME&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/opt/homebrew/opt/openjdk@17
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;클라우드 인증 정보, 커맨드 스크립트 다운로드&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 클라우드 인증 정보 wsl-install.tar 다운로드&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl -f -O https://*/wsl-install.tar &lt;span style="color:#f92672"&gt;(&lt;/span&gt;*: 주소 블라인드 처리&lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tar xvf wsl-install.tar
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;kubectl get pod
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# script.tar 다운로드&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl -f -O https://*script.tar &lt;span style="color:#f92672"&gt;(&lt;/span&gt;*: 주소 블라인드 처리&lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tar xvf script.tar
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;chmod +x script/*
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo mv script/* /usr/local/bin/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;자주 쓰는 커맨드 모음이라고 하는데 sh 파일들이 들어있었다
&lt;img width="462" height="678" alt="image" src="https://github.com/user-attachments/assets/cdbd4355-9c73-4860-923e-c874b102c37f" /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;셸 시작할 때 자동으로 실행되도록 환경 변수 설정&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;echo &lt;span style="color:#e6db74"&gt;&amp;#34;source &lt;/span&gt;$HOME&lt;span style="color:#e6db74"&gt;/dev.env&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; ~/.zshrc
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;echo &lt;span style="color:#e6db74"&gt;&amp;#34;export JAVA_HOME=/opt/homebrew/opt/openjdk@17&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; ~/.zshrc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;터미널을 켤때마다 자동으로 설정이 적용되게.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="2-실습-코드-다운로드"&gt;
 2. 실습 코드 다운로드
 &lt;a class="anchor" href="#2-%ec%8b%a4%ec%8a%b5-%ec%bd%94%eb%93%9c-%eb%8b%a4%ec%9a%b4%eb%a1%9c%eb%93%9c"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ pwd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/Users/yshmbid/Documents/home/github/Cloud/workspace/
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl -f -O https://.*/kubernetes.tar
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tar xvf kubernetes.tar
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl -f -O https://.*/kubernetes.tar
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tar xvf k8s-ddive.tar
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;파일 구조&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;~/workspace/kubernetes
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;├── 00.container/
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;├── 01.pod/
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;│ └── (pod.yaml, 관련 코드들)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;├── 02.deploy/
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;│ └── (deploy.yaml, 관련 코드들)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;├── 03.kubectl/
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;├── 04.configmap/
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;├── 05.pvc/
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;├── 06.probe/
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;├── 07.blue-green/
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;├── env.properties
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;├── k8s-ddive.tar
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;├── kubernetes.tar
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;└── script.tar
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="3-실습1---pod-service-deployment"&gt;
 3. 실습1 - Pod, Service, Deployment
 &lt;a class="anchor" href="#3-%ec%8b%a4%ec%8a%b51---pod-service-deployment"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Harbor Image Registry
&lt;ul&gt;
&lt;li&gt;SKALA 환경에서는 Docker Hub 대신 자체적으로 관리하는 Harbor Image Registry 사용
&lt;ul&gt;
&lt;li&gt;Docker Hub가 전 세계가 공유하는 큰 창고라면 arbor는 특정 조직 내부에서 운영하는 전용 창고이고 각자가 만든 Docker 이미지를 올리고다운받을수있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;로그인 방법
&lt;ul&gt;
&lt;li&gt;웹 콘솔 접속
&lt;ul&gt;
&lt;li&gt;브라우저에서 &lt;a href="https://amdp-registry.skala-ai.com"&gt;https://amdp-registry.skala-ai.com&lt;/a&gt;에 들어가서 계정과 비밀번호를 입력&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CLI에서 docker login 명령으로 로그인
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker login amdp-registry.skala-ai.com/skala25a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;robot 계정과 발급받은 토큰을 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;로그인 안하면?
&lt;ul&gt;
&lt;li&gt;도커 이미지를 빌드하고 push할 때 인증 문제가 발생한다.&lt;/li&gt;
&lt;li&gt;(chatgpt에 치면 dockerhub로 유도한다)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;#1 Pod 배포&lt;/p&gt;</description></item><item><title>Java #2 객체지향 설계 원칙 SOLID</title><link>https://yshghid.github.io/docs/study/sw/sw29/</link><pubDate>Tue, 02 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/sw/sw29/</guid><description>&lt;h1 id="java-2-객체지향-설계-원칙-solid"&gt;
 Java #2 객체지향 설계 원칙 SOLID
 &lt;a class="anchor" href="#java-2-%ea%b0%9d%ec%b2%b4%ec%a7%80%ed%96%a5-%ec%84%a4%ea%b3%84-%ec%9b%90%ec%b9%99-solid"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-02&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="목차"&gt;
 목차
 &lt;a class="anchor" href="#%eb%aa%a9%ec%b0%a8"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;단일 책임 원칙 (Single Responsibility Principle, SRP)&lt;/li&gt;
&lt;li&gt;개방-폐쇄 원칙 (Open-Closed Principle, OCP)&lt;/li&gt;
&lt;li&gt;리스코프 치환 원칙 (Liskov Substitution Principle, LSP)&lt;/li&gt;
&lt;li&gt;인터페이스 분리 원칙 (Interface Segregation Principle, ISP)&lt;/li&gt;
&lt;li&gt;의존 역전 원칙 (Dependency Inversion Principle, DIP)&lt;/li&gt;
&lt;li&gt;공통 특성: 응집도를 높이거나 결합도를 낮추는 설계&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="1-단일-책임-원칙-single-responsibility-principle-srp"&gt;
 1. 단일 책임 원칙 (Single Responsibility Principle, SRP)
 &lt;a class="anchor" href="#1-%eb%8b%a8%ec%9d%bc-%ec%b1%85%ec%9e%84-%ec%9b%90%ec%b9%99-single-responsibility-principle-srp"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;mark&gt;#1 정의&lt;/mark&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;한 클래스는 하나의 책임만 가져야 하고 클래스가 변경되어야 할 이유는 오직 하나여야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;mark&gt;#2 SRP 위반 예제&lt;/mark&gt;&lt;/p&gt;</description></item><item><title>Vector DB 스키마 설계</title><link>https://yshghid.github.io/docs/study/sw/sw30/</link><pubDate>Tue, 02 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/sw/sw30/</guid><description>&lt;h1 id="vector-db-스키마-설계"&gt;
 Vector DB 스키마 설계
 &lt;a class="anchor" href="#vector-db-%ec%8a%a4%ed%82%a4%eb%a7%88-%ec%84%a4%ea%b3%84"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-02&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-개념"&gt;
 1. 개념
 &lt;a class="anchor" href="#1-%ea%b0%9c%eb%85%90"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;mark&gt;#1 KNN vs ANN&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;KNN과 ANN의 공통 목적&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;질문을 하고 그 질문과 비슷한 질문이나 답변을 데이터베이스에서 찾기&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;구현 차이&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모든 데이터를 하나하나 다 비교해서 가장 가까운 것을 찾는다(KNN)&lt;/li&gt;
&lt;li&gt;데이터 전체를 다 비교하지 않고 인덱스를 이용해서 후보군을좁혀서 그 안에서만 비교(ANN)
&lt;ul&gt;
&lt;li&gt;친구가 수십만 명 있으면 모든 친구에게 질문을 던져서 과거 답변을 확인하는 대신 비슷한 취향을 가진 대표 그룹 몇 개를 빠르게 찾고 그 안에서만 가장 가까운 답을 고르는 방식.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그러면 인덱스는 비슷한취향그룹 찾는데만 쓰고 그룹 안에서는 knn인가?&lt;/p&gt;</description></item><item><title>혼돈후의 고요</title><link>https://yshghid.github.io/docs/hobby/book/book54/</link><pubDate>Tue, 02 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/hobby/book/book54/</guid><description>&lt;h1 id="혼돈후의-고요"&gt;
 혼돈후의 고요
 &lt;a class="anchor" href="#%ed%98%bc%eb%8f%88%ed%9b%84%ec%9d%98-%ea%b3%a0%ec%9a%94"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-02&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;#1&lt;/p&gt;
&lt;p&gt;병이 어떻게 시작되었는지 알리스는 뚜렷이 기억한다. 당시의 통증은 뱃속에서 화산이 폭발하는 듯했다. 어머니에게 이렇게 고통스러운 게 정상이냐고 묻자, 어머니는 그렇다고 답했다. 어느 날 어머니가 아무래도 병원에 데려가야겠다고 결심했다. 의사의 입에서는 이런 말이 나왔다. &amp;ldquo;자궁 내막증입니다.&amp;rdquo; 의사는 그것이 염증성 여성 질환이며 전 세계 여성 10퍼센트에게 발생하는 만큼 비교적 흔한 병이라고 설명했다. 그중 다수가 사춘기부터 갱년기까지 질환을 안고 살지만 그리 어렵지 않게 증상을 다스린다고 덧붙였다. 위로하려는 양, 매릴린 먼로 역시 그 병을 앓았지만 그래도 온 세상이 찬사를 바치는 여자가 되지 않았냐고 하기까지 했다. &amp;lsquo;멍청한 소리도 다 있지! 매릴린 먼로는 우울증에 시달렸고 비극적으로 사망했는데.&amp;rsquo; 진료가 끝나자 아직 10대였던 알리스는 스스로에게 말했다. &amp;lsquo;난 평생 동안 고통을 겪을 거야. 난 정상적인 성생활을 하지 못할 거야. 난 아마 아이를 갖지 못할 거야.&amp;rsquo;&lt;/p&gt;</description></item><item><title>Java #1 객체지향 프로그래밍: 캡슐화, 추상화, 다형성, 상속</title><link>https://yshghid.github.io/docs/study/sw/sw28/</link><pubDate>Mon, 01 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/sw/sw28/</guid><description>&lt;h1 id="java-1-객체지향-프로그래밍-캡슐화-추상화-다형성-상속"&gt;
 Java #1 객체지향 프로그래밍: 캡슐화, 추상화, 다형성, 상속
 &lt;a class="anchor" href="#java-1-%ea%b0%9d%ec%b2%b4%ec%a7%80%ed%96%a5-%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%98%eb%b0%8d-%ec%ba%a1%ec%8a%90%ed%99%94-%ec%b6%94%ec%83%81%ed%99%94-%eb%8b%a4%ed%98%95%ec%84%b1-%ec%83%81%ec%86%8d"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-01&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="목차"&gt;
 목차
 &lt;a class="anchor" href="#%eb%aa%a9%ec%b0%a8"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;캡슐화&lt;/li&gt;
&lt;li&gt;추상화&lt;/li&gt;
&lt;li&gt;다형성&lt;/li&gt;
&lt;li&gt;상속&lt;/li&gt;
&lt;li&gt;공통 특성: 인터페이스와 구현의 분리&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="1-캡슐화"&gt;
 1. 캡슐화
 &lt;a class="anchor" href="#1-%ec%ba%a1%ec%8a%90%ed%99%94"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;mark&gt;#1 개념 및 목적&lt;/mark&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개념
&lt;ul&gt;
&lt;li&gt;객체지향 프로그래밍에서 객체의 속성(필드)을 외부로부터 숨기고, 공개된 메서드(getter/setter)를 통해서만 접근하도록 만드는 원칙&lt;/li&gt;
&lt;li&gt;필드를 private으로 선언하고, 외부에서 직접 접근하지 못하게 제한하고, public 메서드인 getter와 setter를 제공해 값을 읽거나 수정할 수 있도록 한다. setter 내부에는 유효성 검사 로직을 넣어 잘못된 값이 들어오는 것을 막을 수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;목적
&lt;ol&gt;
&lt;li&gt;데이터 보호: 잘못된 값이 직접 들어가는 것을 막고, setter 내부에서 규칙을 강제함으로써 객체의 상태를 안정적으로 유지&lt;/li&gt;
&lt;li&gt;정보 은닉: 내부 구현이 어떻게 되어 있는지는 숨겨 두고, 외부에는 단순한 사용 방법만 제공함으로써 객체 사용자가 불필요한 복잡성을 신경 쓰지 않도록 한다.&lt;/li&gt;
&lt;li&gt;유지보수와 확장성: 내부 로직이 바뀌더라도 외부 인터페이스(getter/setter)가 같으면 사용하는 코드는 수정할 필요가 없으므로 프로그램 전체의 안정성이 높아지고 유지보수가 쉬워진다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;mark&gt;#2 샘플 코드&lt;/mark&gt;&lt;/p&gt;</description></item></channel></rss>