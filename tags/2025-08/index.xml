<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2025-08 on</title><link>https://yshghid.github.io/tags/2025-08/</link><description>Recent content in 2025-08 on</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 04 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://yshghid.github.io/tags/2025-08/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker #3 3일차 실습 1,2,3</title><link>https://yshghid.github.io/docs/study/sw/sw16/</link><pubDate>Mon, 04 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/sw/sw16/</guid><description>&lt;h1 id="docker-3-3일차-실습-123">
 Docker #3 3일차 실습 1,2,3
 &lt;a class="anchor" href="#docker-3-3%ec%9d%bc%ec%b0%a8-%ec%8b%a4%ec%8a%b5-123">#&lt;/a>
&lt;/h1>
&lt;p>#2025-08-04&lt;/p>
&lt;hr>
&lt;h3 id="1-레지스트리에-접속하고-이미지를-pullpush하기">
 1. 레지스트리에 접속하고 이미지를 pull/push하기
 &lt;a class="anchor" href="#1-%eb%a0%88%ec%a7%80%ec%8a%a4%ed%8a%b8%eb%a6%ac%ec%97%90-%ec%a0%91%ec%86%8d%ed%95%98%ea%b3%a0-%ec%9d%b4%eb%af%b8%ec%a7%80%eb%a5%bc-pullpush%ed%95%98%ea%b8%b0">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Docker 로그인&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker login https://&lt;span style="color:#f92672">{&lt;/span>실습링크&lt;span style="color:#f92672">}&lt;/span>.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># ID: *&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Password: *&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ Login Succeeded
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 이미지 Pull (이미지 내려받기): 예를 들어 container-linux:1.1 이미지를 다운로드&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker pull &lt;span style="color:#f92672">{&lt;/span>실습링크&lt;span style="color:#f92672">}&lt;/span>.com/&lt;span style="color:#f92672">{&lt;/span>실습id&lt;span style="color:#f92672">}&lt;/span>/container-linux:1.1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 이미지 Push (Image Push 정보 사용): Push 권한은 일반 계정이 아니라 로봇 계정(CI/CD 용)을 사용합니다.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 로봇 계정 로그인&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker login https://&lt;span style="color:#f92672">{&lt;/span>실습링크&lt;span style="color:#f92672">}&lt;/span>.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># ID: robot$skala25a&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Password: 1qB9cyusbNComZPHAdjNIFWinf52xaBJ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 태깅 (Tag local image)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker tag container-linux:1.1 &lt;span style="color:#f92672">{&lt;/span>실습링크&lt;span style="color:#f92672">}&lt;/span>.com/&lt;span style="color:#f92672">{&lt;/span>실습id&lt;span style="color:#f92672">}&lt;/span>/container-linux:1.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Push&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker push &lt;span style="color:#f92672">{&lt;/span>실습링크&lt;span style="color:#f92672">}&lt;/span>.com/&lt;span style="color:#f92672">{&lt;/span>실습id&lt;span style="color:#f92672">}&lt;/span>/container-linux:1.1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-docker-hub에서-우분투-이미지-받아보기">
 2. Docker Hub에서 우분투 이미지 받아보기
 &lt;a class="anchor" href="#2-docker-hub%ec%97%90%ec%84%9c-%ec%9a%b0%eb%b6%84%ed%88%ac-%ec%9d%b4%eb%af%b8%ec%a7%80-%eb%b0%9b%ec%95%84%eb%b3%b4%ea%b8%b0">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ sudo docker pull ubuntu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Password:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Using default tag: latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2025/08/04 11:36:28 must use ASL logging &lt;span style="color:#f92672">(&lt;/span>which requires CGO&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> running as root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>latest: Pulling from library/ubuntu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>e3bd89a9dac5: Already exists 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Digest: sha256:a08e551cb33850e4740772b38217fc1796a66da2506d312abe51acda354ff061
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Status: Downloaded newer image &lt;span style="color:#66d9ef">for&lt;/span> ubuntu:latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker.io/library/ubuntu:latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo docker run -it --name hello ubuntu /bin/bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root@b42933e7fe33:/# ls
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bin boot dev etc home lib media mnt opt proc root run sbin srv sys tmp usr var
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># cd, ls 명령으로 컨테이너 내부를 둘러본 뒤 exit를 입력하여 Bash 셸에서 빠져 나오기&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root@b42933e7fe33:/# exit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo docker ps -a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Password:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b42933e7fe33 ubuntu &lt;span style="color:#e6db74">&amp;#34;/bin/bash&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> minutes ago Exited &lt;span style="color:#f92672">(&lt;/span>0&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#ae81ff">44&lt;/span> seconds ago hello
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>60fb3d8fbf89 amdp-registry.&lt;span style="color:#f92672">{&lt;/span>실습링크2&lt;span style="color:#f92672">}&lt;/span>.arm64 &lt;span style="color:#e6db74">&amp;#34;/bin/bash -c &amp;#39;ls -l…&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> hours ago Up &lt;span style="color:#ae81ff">2&lt;/span> hours 0.0.0.0:2222-&amp;gt;2222/tcp, 0.0.0.0:5173-&amp;gt;5173/tcp, 0.0.0.0:5500-&amp;gt;5500/tcp, 0.0.0.0:8080-8081-&amp;gt;8080-8081/tcp, 0.0.0.0:8443-&amp;gt;8443/tcp, 0.0.0.0:9931-&amp;gt;9931/tcp local-rde
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>de61e13a85e8 container-linux:1.1 &lt;span style="color:#e6db74">&amp;#34;python /mycode/webs…&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> days ago Exited &lt;span style="color:#f92672">(&lt;/span>255&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#ae81ff">41&lt;/span> hours ago 0.0.0.0:8888-&amp;gt;8080/tcp my-first-container
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>883d6de5ea2c mariadb:latest &lt;span style="color:#e6db74">&amp;#34;docker-entrypoint.s…&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> days ago Exited &lt;span style="color:#f92672">(&lt;/span>255&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> days ago 0.0.0.0:3306-&amp;gt;3306/tcp 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># &amp;gt;&amp;gt; Exited (0) 44 seconds ago인상태.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 정지한 컨테이너 다시 시작하기&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo docker start hello
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-dockerfile--명령어-cmd-실습">
 3. Dockerfile : 명령어 CMD 실습
 &lt;a class="anchor" href="#3-dockerfile--%eb%aa%85%eb%a0%b9%ec%96%b4-cmd-%ec%8b%a4%ec%8a%b5">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># docker file 빌드&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo docker build -t my-image .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 출력 This is the default command&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo docker run my-image
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 출력 Override CMD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo docker run my-image &lt;span style="color:#e6db74">&amp;#34;Override CMD&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#&amp;gt;&amp;gt; Error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo docker run my-image sh -c &lt;span style="color:#e6db74">&amp;#34;echo Override CMD&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>#1 CMD?&lt;/p></description></item><item><title>Docker #4 3일차 실습: 자신의 Frontend (HTML, JS, CSS) 개발 코드를 컨테이너로 만들고 이것을 실행시켜 보자</title><link>https://yshghid.github.io/docs/study/sw/sw17/</link><pubDate>Mon, 04 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/sw/sw17/</guid><description>&lt;h1 id="docker-4-3일차-실습-자신의-frontend-html-js-css-개발-코드를-컨테이너로-만들고-이것을-실행시켜-보자">
 Docker #4 3일차 실습: 자신의 Frontend (HTML, JS, CSS) 개발 코드를 컨테이너로 만들고 이것을 실행시켜 보자
 &lt;a class="anchor" href="#docker-4-3%ec%9d%bc%ec%b0%a8-%ec%8b%a4%ec%8a%b5-%ec%9e%90%ec%8b%a0%ec%9d%98-frontend-html-js-css-%ea%b0%9c%eb%b0%9c-%ec%bd%94%eb%93%9c%eb%a5%bc-%ec%bb%a8%ed%85%8c%ec%9d%b4%eb%84%88%eb%a1%9c-%eb%a7%8c%eb%93%a4%ea%b3%a0-%ec%9d%b4%ea%b2%83%ec%9d%84-%ec%8b%a4%ed%96%89%ec%8b%9c%ec%bc%9c-%eb%b3%b4%ec%9e%90">#&lt;/a>
&lt;/h1>
&lt;p>#2025-08-04&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>조건&lt;/p>
&lt;ol>
&lt;li>nginx:alpine 이미지를 사용&lt;/li>
&lt;li>노출 Port는80&lt;/li>
&lt;li>nginx를실행하는방식은 -nginx -g daemon off;&lt;/li>
&lt;li>nginx의 routing 설정은 default.conf에설정한다.&lt;/li>
&lt;/ol>&lt;/blockquote>
&lt;h3 id="0-작업-위치">
 0. 작업 위치
 &lt;a class="anchor" href="#0-%ec%9e%91%ec%97%85-%ec%9c%84%ec%b9%98">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ pwd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/Users/yshmbid/rde/config/workspace/exec-template
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ls
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Dockerfile default.conf deploy deploy.yaml docker-build.sh docker-push.sh service.yaml src
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="1-docker-buildsh와-docker-pushsh-복사">
 1. docker-build.sh와 docker-push.sh 복사
 &lt;a class="anchor" href="#1-docker-buildsh%ec%99%80-docker-pushsh-%eb%b3%b5%ec%82%ac">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ pwd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/Users/yshmbid/rde/config/workspace/container/05.webserver
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ls
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Dockerfile default.conf deploy docker-build.sh docker-push.sh src
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>05.webserver의 docker-build.sh와 docker-push.sh를 작업 디렉토리인 exec-template로 복사해준다.&lt;/p></description></item><item><title>Docker #5 3일차 실습: kubernetes 환경에 나의 앱을 배포해보자</title><link>https://yshghid.github.io/docs/study/sw/sw18/</link><pubDate>Mon, 04 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/sw/sw18/</guid><description>&lt;h1 id="docker-5-3일차-실습-kubernetes-환경에-나의-앱을-배포해보자">
 Docker #5 3일차 실습: kubernetes 환경에 나의 앱을 배포해보자
 &lt;a class="anchor" href="#docker-5-3%ec%9d%bc%ec%b0%a8-%ec%8b%a4%ec%8a%b5-kubernetes-%ed%99%98%ea%b2%bd%ec%97%90-%eb%82%98%ec%9d%98-%ec%95%b1%ec%9d%84-%eb%b0%b0%ed%8f%ac%ed%95%b4%eb%b3%b4%ec%9e%90">#&lt;/a>
&lt;/h1>
&lt;p>#2025-08-04&lt;/p>
&lt;hr>
&lt;h3 id="0-작업-정보">
 0. 작업 정보
 &lt;a class="anchor" href="#0-%ec%9e%91%ec%97%85-%ec%a0%95%eb%b3%b4">#&lt;/a>
&lt;/h3>
&lt;p>#1 작업 위치&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ pwd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/Users/yshmbid/rde/config/workspace/exec-template
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>#2 파일 구조&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>/workspace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── exec-template
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── Dockerfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── default.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── docker-build.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── docker-push.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── cicd.sh 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── deploy/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├── deploy.t 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├── deploy.sh 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├── service.t
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ ├── service.sh 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ └── env.properties
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── src/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── index.html 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── media/ 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>#3 이전 실습과의 차이&lt;/p></description></item><item><title>MutClust 연구: method contribution</title><link>https://yshghid.github.io/docs/study/algorithm/algo10/</link><pubDate>Mon, 04 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/algorithm/algo10/</guid><description>&lt;h1 id="mutclust-연구-method-contribution">
 MutClust 연구: method contribution
 &lt;a class="anchor" href="#mutclust-%ec%97%b0%ea%b5%ac-method-contribution">#&lt;/a>
&lt;/h1>
&lt;p>#2025-08-04&lt;/p>
&lt;hr>
&lt;p>#Paper&lt;/p>
&lt;p>Identification of Severity Related Mutation Hotspots in SARS-CoV-2 Using a Density-Based Clustering Approach&lt;/p>
&lt;h3 id="0-참여-파트">
 0. 참여 파트
 &lt;a class="anchor" href="#0-%ec%b0%b8%ec%97%ac-%ed%8c%8c%ed%8a%b8">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>#Algorithm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── Computing the H-score
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── Density-based mutation hotspot clustering
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#Omics-analysis
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── Selection of severity related hotspots
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── Differentially expressed gene analysis
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── Evaluation of HLA-peptide affinity
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#Validation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── Validation on Influenza genome
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── K-dist plot
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>RF-SHAP 연구 #1 모델 학습</title><link>https://yshghid.github.io/docs/study/ai/ai12/</link><pubDate>Mon, 04 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai12/</guid><description>&lt;h1 id="rf-shap-연구-1-모델-학습">
 RF-SHAP 연구 #1 모델 학습
 &lt;a class="anchor" href="#rf-shap-%ec%97%b0%ea%b5%ac-1-%eb%aa%a8%eb%8d%b8-%ed%95%99%ec%8a%b5">#&lt;/a>
&lt;/h1>
&lt;p>#2025-08-04&lt;/p>
&lt;hr>
&lt;h3 id="1-load-data">
 1. Load data
 &lt;a class="anchor" href="#1-load-data">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pandas &lt;span style="color:#66d9ef">as&lt;/span> pd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#66d9ef">as&lt;/span> np
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> sklearn.ensemble &lt;span style="color:#f92672">import&lt;/span> RandomForestClassifier
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> sklearn.model_selection &lt;span style="color:#f92672">import&lt;/span> train_test_split, cross_val_score
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> sklearn.metrics &lt;span style="color:#f92672">import&lt;/span> accuracy_score
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pickle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;/preprocessing/processed_data.pickle&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;rb&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> preproc_data &lt;span style="color:#f92672">=&lt;/span> pickle&lt;span style="color:#f92672">.&lt;/span>load(f)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cytokine_df &lt;span style="color:#f92672">=&lt;/span> preproc_data[&lt;span style="color:#e6db74">&amp;#39;cytokine_data&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>patient_meta &lt;span style="color:#f92672">=&lt;/span> preproc_data[&lt;span style="color:#e6db74">&amp;#39;metadata&amp;#39;&lt;/span>] 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>patient_info &lt;span style="color:#f92672">=&lt;/span> preproc_data[&lt;span style="color:#e6db74">&amp;#39;clinical&amp;#39;&lt;/span>] 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-train-data-split">
 2. Train data split
 &lt;a class="anchor" href="#2-train-data-split">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>normal_df &lt;span style="color:#f92672">=&lt;/span> cytokine_df[cytokine_df&lt;span style="color:#f92672">.&lt;/span>index&lt;span style="color:#f92672">.&lt;/span>str&lt;span style="color:#f92672">.&lt;/span>contains(&lt;span style="color:#e6db74">&amp;#39;Healthy&amp;#39;&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>severe_samples &lt;span style="color:#f92672">=&lt;/span> patient_meta[patient_meta&lt;span style="color:#f92672">.&lt;/span>Severity &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>severe_df &lt;span style="color:#f92672">=&lt;/span> cytokine_df[cytokine_df&lt;span style="color:#f92672">.&lt;/span>index&lt;span style="color:#f92672">.&lt;/span>isin(severe_samples&lt;span style="color:#f92672">.&lt;/span>Sample)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>normal_df[&lt;span style="color:#e6db74">&amp;#39;source&amp;#39;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>severe_df[&lt;span style="color:#e6db74">&amp;#39;source&amp;#39;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>normal_df,severe_df
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>( CXCL9 LIF CXCL11 IL25 IL12B IL10 \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Healthy1 6.560136 4.251866 4.151513 7.586942 5.541050 1.843384 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Healthy2 5.277100 4.089332 3.650800 7.886990 6.377469 2.113211 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL13 IL11 IL15 PTX3 ... FSTL3 FLT3LG \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Healthy1 6.470743 6.949630 3.716450 5.163174 ... 9.613881 4.906822 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Healthy2 6.450212 7.541794 4.181554 6.741940 ... 9.458981 4.658021 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FAP FABP4 F3 ESM1 ERBB3 ENPP2 \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Healthy1 10.903602 7.923477 3.383774 6.034197 9.096096 10.839433 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Healthy2 11.238270 8.730215 3.317157 5.497652 8.543655 10.454511 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WFDC2 source 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Healthy1 8.383246 0 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Healthy2 8.260845 0 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [2 rows x 167 columns],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CXCL9 LIF CXCL11 IL25 IL12B IL10 \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_1 7.426598 4.211594 4.429560 7.799068 6.318247 1.769972 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_2 7.541794 4.355353 4.514350 7.886990 6.741940 1.769972 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_3 7.541794 4.151513 3.933607 7.799068 6.159825 1.916796 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_4 7.130935 4.429560 3.585707 7.886990 5.612199 1.916796 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL13 IL11 IL15 PTX3 ... FSTL3 FLT3LG \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_1 5.725485 6.782954 3.716450 8.190382 ... 8.802718 3.042321 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_2 5.843465 6.646599 3.716450 7.496809 ... 9.008530 3.317157 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_3 5.984188 6.701283 3.880626 7.210939 ... 9.214496 3.448254 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_4 6.214099 6.883351 3.933607 7.496809 ... 9.008530 3.448254 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FAP FABP4 F3 ESM1 ERBB3 ENPP2 \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_1 7.886990 9.296877 2.952843 5.214755 8.543655 9.096096 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_2 8.110591 9.168168 2.820616 5.497652 8.683792 9.296877 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_3 8.190382 9.296877 3.232241 5.306376 8.862940 9.535287 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_4 8.383246 9.296877 3.127159 5.306376 9.096096 9.613881 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WFDC2 source 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_1 8.909767 1 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_2 8.862940 1 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_3 8.909767 1 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_4 8.683792 1 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [4 rows x 167 columns])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-model-training">
 3. Model training
 &lt;a class="anchor" href="#3-model-training">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>concat([normal_df,severe_df],axis &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>X &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>drop(columns&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;source&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>y &lt;span style="color:#f92672">=&lt;/span> df[&lt;span style="color:#e6db74">&amp;#39;source&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#Assume X_train as X, y as well&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>X_train &lt;span style="color:#f92672">=&lt;/span> X
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>y_train &lt;span style="color:#f92672">=&lt;/span> y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rf_model &lt;span style="color:#f92672">=&lt;/span> RandomForestClassifier()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rf_model&lt;span style="color:#f92672">.&lt;/span>fit(X_train, y_train)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>X_train
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>	CXCL9	LIF	CXCL11	IL25	IL12B	IL10	IL13	IL11	IL15	PTX3	...	FURIN	FSTL3	FLT3LG	FAP	FABP4	F3	ESM1	ERBB3	ENPP2	WFDC2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Healthy1	6.560136	4.251866	4.151513	7.586942	5.541050	1.843384	6.470743	6.949630	3.716450	5.163174	...	6.883351	9.613881	4.906822	10.903602	7.923477	3.383774	6.034197	9.096096	10.839433	8.383246
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Healthy2	5.277100	4.089332	3.650800	7.886990	6.377469	2.113211	6.450212	7.541794	4.181554	6.741940	...	7.002611	9.458981	4.658021	11.238270	8.730215	3.317157	5.497652	8.543655	10.454511	8.260845
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Patient2_1	7.426598	4.211594	4.429560	7.799068	6.318247	1.769972	5.725485	6.782954	3.716450	8.190382	...	7.660761	8.802718	3.042321	7.886990	9.296877	2.952843	5.214755	8.543655	9.096096	8.909767
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Patient2_2	7.541794	4.355353	4.514350	7.886990	6.741940	1.769972	5.843465	6.646599	3.716450	7.496809	...	7.210939	9.008530	3.317157	8.110591	9.168168	2.820616	5.497652	8.683792	9.296877	8.862940
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Patient2_3	7.541794	4.151513	3.933607	7.799068	6.159825	1.916796	5.984188	6.701283	3.880626	7.210939	...	6.646599	9.214496	3.448254	8.190382	9.296877	3.232241	5.306376	8.862940	9.535287	8.909767
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Patient2_4	7.130935	4.429560	3.585707	7.886990	5.612199	1.916796	6.214099	6.883351	3.933607	7.496809	...	6.532043	9.008530	3.448254	8.383246	9.296877	3.127159	5.306376	9.096096	9.613881	8.683792
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>6 rows × 166 columns
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Let&amp;#39;s assume test set as well&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>y_test &lt;span style="color:#f92672">=&lt;/span> y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>X_test &lt;span style="color:#f92672">=&lt;/span> X
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>y_pred &lt;span style="color:#f92672">=&lt;/span> rf_model&lt;span style="color:#f92672">.&lt;/span>predict(X_test)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>accuracy &lt;span style="color:#f92672">=&lt;/span> accuracy_score(y_test, y_pred)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(accuracy)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>1.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="4-confusion-matrix">
 4. Confusion matrix
 &lt;a class="anchor" href="#4-confusion-matrix">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> sklearn.metrics &lt;span style="color:#f92672">import&lt;/span> confusion_matrix
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> matplotlib.pyplot &lt;span style="color:#66d9ef">as&lt;/span> plt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> seaborn &lt;span style="color:#66d9ef">as&lt;/span> sns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conf_matrix &lt;span style="color:#f92672">=&lt;/span> confusion_matrix(y_test, y_pred)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>figure(figsize&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sns&lt;span style="color:#f92672">.&lt;/span>heatmap(conf_matrix, annot&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">False&lt;/span>, fmt&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;d&amp;#34;&lt;/span>, cmap&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Blues&amp;#34;&lt;/span>, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> xticklabels&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;Healthy&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Severe&amp;#39;&lt;/span>], yticklabels&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;Healthy&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Severe&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ,annot_kws&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;fontsize&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">14&lt;/span>},)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>xlabel(&lt;span style="color:#e6db74">&amp;#39;Predicted&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>ylabel(&lt;span style="color:#e6db74">&amp;#39;Actual&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>title(&lt;span style="color:#e6db74">&amp;#39;Confusion Matrix&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>tick_params(axis&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;both&amp;#39;&lt;/span>, which&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;major&amp;#39;&lt;/span>, labelsize&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">12&lt;/span>) &lt;span style="color:#75715e"># Adjust tick label size&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(len(rf_model&lt;span style="color:#f92672">.&lt;/span>classes_)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> j &lt;span style="color:#f92672">in&lt;/span> range(len(rf_model&lt;span style="color:#f92672">.&lt;/span>classes_)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> i &lt;span style="color:#f92672">==&lt;/span> j: &lt;span style="color:#75715e"># Condition to check diagonal cells (true positives)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> plt&lt;span style="color:#f92672">.&lt;/span>text(j &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0.5&lt;/span>, i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0.5&lt;/span>, conf_matrix[i, j],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ha&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;center&amp;#34;&lt;/span>, va&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;center&amp;#34;&lt;/span>, color&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;white&amp;#39;&lt;/span>, fontsize&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">16&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> plt&lt;span style="color:#f92672">.&lt;/span>text(j &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0.5&lt;/span>, i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0.5&lt;/span>, conf_matrix[i, j],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ha&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;center&amp;#34;&lt;/span>, va&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;center&amp;#34;&lt;/span>, color&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;black&amp;#39;&lt;/span>, fontsize&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">16&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>show()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;img width="1816" height="808" alt="image" src="https://github.com/user-attachments/assets/6a1206bc-14d4-4917-b63a-af3db972f7f6" />
&lt;h3 id="5-save-model">
 5. Save model
 &lt;a class="anchor" href="#5-save-model">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> joblib
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>joblib&lt;span style="color:#f92672">.&lt;/span>dump(rf_model, &lt;span style="color:#e6db74">&amp;#39;/model/rf_model.pkl&amp;#39;&lt;/span>) 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>RF-SHAP 연구 #2 SHAP 분석</title><link>https://yshghid.github.io/docs/study/ai/ai13/</link><pubDate>Mon, 04 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai13/</guid><description>&lt;h1 id="rf-shap-연구-2-shap-분석">
 RF-SHAP 연구 #2 SHAP 분석
 &lt;a class="anchor" href="#rf-shap-%ec%97%b0%ea%b5%ac-2-shap-%eb%b6%84%ec%84%9d">#&lt;/a>
&lt;/h1>
&lt;p>#2025-08-04&lt;/p>
&lt;hr>
&lt;h3 id="1-load-data">
 1. Load data
 &lt;a class="anchor" href="#1-load-data">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pandas &lt;span style="color:#66d9ef">as&lt;/span> pd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#66d9ef">as&lt;/span> np
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pickle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> joblib
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> shap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> matplotlib.pyplot &lt;span style="color:#66d9ef">as&lt;/span> plt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> seaborn &lt;span style="color:#66d9ef">as&lt;/span> sns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#Load rf model&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;/model/rf_model.pkl&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;rb&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rf_model &lt;span style="color:#f92672">=&lt;/span> joblib&lt;span style="color:#f92672">.&lt;/span>load(f)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#Load dataset&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;/preprocessing/processed_data.pickle&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;rb&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> preproc_data &lt;span style="color:#f92672">=&lt;/span> pickle&lt;span style="color:#f92672">.&lt;/span>load(f)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cytokine_df &lt;span style="color:#f92672">=&lt;/span> preproc_data[&lt;span style="color:#e6db74">&amp;#39;cytokine_data&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>patient_meta &lt;span style="color:#f92672">=&lt;/span> preproc_data[&lt;span style="color:#e6db74">&amp;#39;metadata&amp;#39;&lt;/span>] 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>patient_info &lt;span style="color:#f92672">=&lt;/span> preproc_data[&lt;span style="color:#e6db74">&amp;#39;clinical&amp;#39;&lt;/span>] 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-model-evaluation---feature-importance">
 2. Model evaluation - feature importance
 &lt;a class="anchor" href="#2-model-evaluation---feature-importance">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Get feature importances&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>importances &lt;span style="color:#f92672">=&lt;/span> rf_model&lt;span style="color:#f92672">.&lt;/span>feature_importances_
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>feature_names &lt;span style="color:#f92672">=&lt;/span> cytokine_df&lt;span style="color:#f92672">.&lt;/span>columns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>feature_importances &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>DataFrame({&lt;span style="color:#e6db74">&amp;#39;feature&amp;#39;&lt;/span>: feature_names, &lt;span style="color:#e6db74">&amp;#39;importance&amp;#39;&lt;/span>: importances})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Sort the feature importances in descending order and select the top 20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>top_20_features &lt;span style="color:#f92672">=&lt;/span> feature_importances&lt;span style="color:#f92672">.&lt;/span>sort_values(by&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;importance&amp;#39;&lt;/span>, ascending&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">False&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>head(&lt;span style="color:#ae81ff">20&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Plot the top 20 feature importances&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>figure(figsize&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sns&lt;span style="color:#f92672">.&lt;/span>barplot(x&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;importance&amp;#39;&lt;/span>, y&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;feature&amp;#39;&lt;/span>, data&lt;span style="color:#f92672">=&lt;/span>top_20_features)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>show()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-model-evaluation---shap">
 3. Model evaluation - SHAP
 &lt;a class="anchor" href="#3-model-evaluation---shap">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>tree_explainer &lt;span style="color:#f92672">=&lt;/span> shap&lt;span style="color:#f92672">.&lt;/span>TreeExplainer(rf_model) &lt;span style="color:#75715e">## TreeExplainer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>shap_values &lt;span style="color:#f92672">=&lt;/span> tree_explainer&lt;span style="color:#f92672">.&lt;/span>shap_values(cytokine_df) &lt;span style="color:#75715e">## SHAP Value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fig &lt;span style="color:#f92672">=&lt;/span> plt&lt;span style="color:#f92672">.&lt;/span>figure(figsize&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">8&lt;/span>,&lt;span style="color:#ae81ff">8&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fig&lt;span style="color:#f92672">.&lt;/span>set_facecolor(&lt;span style="color:#e6db74">&amp;#39;white&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ax &lt;span style="color:#f92672">=&lt;/span> fig&lt;span style="color:#f92672">.&lt;/span>add_subplot()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#Plot SHAP as sever probability&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>shap&lt;span style="color:#f92672">.&lt;/span>summary_plot(shap_values[&lt;span style="color:#ae81ff">1&lt;/span>], cytokine_df, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cmap&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;bwr&amp;#39;&lt;/span>, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> show&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">False&lt;/span>, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> plot_type&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dot&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ax&lt;span style="color:#f92672">.&lt;/span>set_xlabel(&lt;span style="color:#e6db74">&amp;#39;SHAP Value&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ax&lt;span style="color:#f92672">.&lt;/span>set_title(&lt;span style="color:#e6db74">&amp;#39;SHAP Dot Plot&amp;#39;&lt;/span>, fontsize&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">20&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>show()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>shap_df &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>DataFrame(shap_values[&lt;span style="color:#ae81ff">1&lt;/span>],columns &lt;span style="color:#f92672">=&lt;/span> cytokine_df&lt;span style="color:#f92672">.&lt;/span>columns)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>shap_df&lt;span style="color:#f92672">.&lt;/span>index &lt;span style="color:#f92672">=&lt;/span> cytokine_df&lt;span style="color:#f92672">.&lt;/span>index
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>shap_df
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>	CXCL9	LIF	CXCL11	IL25	IL12B	IL10	IL13	IL11	IL15	PTX3	...	FURIN	FSTL3	FLT3LG	FAP	FABP4	F3	ESM1	ERBB3	ENPP2	WFDC2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Healthy1	0.0	0.001667	0.0	0.0	-0.008333	0.0	0.0	-0.003333	0.0	0.0	...	0.0	-0.011667	-0.005	-0.013333	0.0	-0.006667	0.0	0.0	0.0	-0.005
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Healthy2	0.0	-0.008333	0.0	0.0	0.001667	0.0	0.0	-0.013333	0.0	0.0	...	0.0	-0.011667	-0.005	-0.013333	0.0	-0.006667	0.0	0.0	0.0	-0.005
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Patient1_1	0.0	0.001667	0.0	0.0	0.001667	0.0	0.0	-0.013333	0.0	0.0	...	0.0	-0.011667	-0.005	-0.013333	0.0	-0.006667	0.0	0.0	0.0	-0.005
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Patient1_2	0.0	0.001667	0.0	0.0	0.001667	0.0	0.0	-0.013333	0.0	0.0	...	0.0	-0.011667	0.005	-0.013333	0.0	-0.006667	0.0	0.0	0.0	-0.005
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Patient1_5	0.0	-0.008333	0.0	0.0	0.001667	0.0	0.0	-0.003333	0.0	0.0	...	0.0	-0.011667	-0.005	-0.013333	0.0	-0.006667	0.0	0.0	0.0	-0.005
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Patient1_6	0.0	-0.008333	0.0	0.0	0.001667	0.0	0.0	0.006667	0.0	0.0	...	0.0	-0.011667	-0.005	0.006667	0.0	0.003333	0.0	0.0	0.0	-0.005
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Patient2_1	0.0	0.001667	0.0	0.0	0.001667	0.0	0.0	0.006667	0.0	0.0	...	0.0	0.008333	0.005	0.006667	0.0	0.003333	0.0	0.0	0.0	0.005
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Patient2_2	0.0	0.001667	0.0	0.0	0.001667	0.0	0.0	0.006667	0.0	0.0	...	0.0	0.008333	0.005	0.006667	0.0	0.003333	0.0	0.0	0.0	0.005
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Patient2_3	0.0	0.001667	0.0	0.0	0.001667	0.0	0.0	0.006667	0.0	0.0	...	0.0	0.008333	0.005	0.006667	0.0	-0.006667	0.0	0.0	0.0	0.005
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Patient2_4	0.0	0.001667	0.0	0.0	0.001667	0.0	0.0	0.006667	0.0	0.0	...	0.0	0.008333	0.005	0.006667	0.0	0.003333	0.0	0.0	0.0	0.005
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Patient2_5	0.0	0.001667	0.0	0.0	0.001667	0.0	0.0	0.006667	0.0	0.0	...	0.0	0.008333	-0.005	0.006667	0.0	-0.006667	0.0	0.0	0.0	-0.005
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>11 rows × 166 columns
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="4-umap">
 4. UMAP
 &lt;a class="anchor" href="#4-umap">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> umap.umap_ &lt;span style="color:#66d9ef">as&lt;/span> umap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pandas &lt;span style="color:#66d9ef">as&lt;/span> pd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> matplotlib.pyplot &lt;span style="color:#66d9ef">as&lt;/span> plt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> seaborn &lt;span style="color:#66d9ef">as&lt;/span> sns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>reducer &lt;span style="color:#f92672">=&lt;/span> umap&lt;span style="color:#f92672">.&lt;/span>UMAP()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>embedding &lt;span style="color:#f92672">=&lt;/span> reducer&lt;span style="color:#f92672">.&lt;/span>fit_transform(shap_df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> matplotlib.pyplot &lt;span style="color:#66d9ef">as&lt;/span> plt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Extract UMAP coordinates and labels&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>umap_x &lt;span style="color:#f92672">=&lt;/span> embedding[:, &lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>umap_y &lt;span style="color:#f92672">=&lt;/span> embedding[:, &lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Create scatter plot&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>figure(figsize&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">8&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>scatter &lt;span style="color:#f92672">=&lt;/span> plt&lt;span style="color:#f92672">.&lt;/span>scatter(umap_x, umap_y, cmap&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;bwr&amp;#34;&lt;/span>, s&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">50&lt;/span>, alpha&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0.7&lt;/span>, edgecolors&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;w&amp;#34;&lt;/span>, linewidth&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0.5&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="5-dbscan">
 5. DBSCAN
 &lt;a class="anchor" href="#5-dbscan">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> sklearn.cluster &lt;span style="color:#f92672">import&lt;/span> DBSCAN
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Initialize DBSCAN&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dbscan &lt;span style="color:#f92672">=&lt;/span> DBSCAN(eps&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0.8&lt;/span>, min_samples&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#75715e"># partial data is too small to set min_sample=20.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Fit to UMAP data and get cluster labels&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>clusters &lt;span style="color:#f92672">=&lt;/span> dbscan&lt;span style="color:#f92672">.&lt;/span>fit_predict(embedding)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>embedding, clusters
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>(array([[16.714314 , -2.0475426],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [17.279623 , -2.4140635],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [16.705837 , -3.002305 ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [17.19955 , -1.342096 ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [17.838465 , -2.021136 ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [18.537838 , -1.5079662],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [21.44188 , -2.1259143],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [21.123413 , -3.075382 ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [20.373632 , -3.0233152],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [21.83852 , -2.899527 ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [20.435349 , -2.2629123]], dtype=float32),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> array([ 0, 0, -1, -1, 0, -1, -1, 1, 1, 1, 1]))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>figure(figsize&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>unique_clusters &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>unique(clusters)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> cluster &lt;span style="color:#f92672">in&lt;/span> unique_clusters:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> idx &lt;span style="color:#f92672">=&lt;/span> clusters &lt;span style="color:#f92672">==&lt;/span> cluster
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> plt&lt;span style="color:#f92672">.&lt;/span>scatter(embedding[idx, &lt;span style="color:#ae81ff">0&lt;/span>], embedding[idx, &lt;span style="color:#ae81ff">1&lt;/span>], label&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Cluster &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>cluster&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>title(&lt;span style="color:#e6db74">&amp;#39;Scatter Plot of UMAP Colored by Cluster&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>xlabel(&lt;span style="color:#e6db74">&amp;#39;UMAP_1&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>ylabel(&lt;span style="color:#e6db74">&amp;#39;UMAP_2&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>legend()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>grid(&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>show()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="6-save-result">
 6. Save result
 &lt;a class="anchor" href="#6-save-result">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>analyzed_data &lt;span style="color:#f92672">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>analyzed_data[&lt;span style="color:#e6db74">&amp;#39;shap_value&amp;#39;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> shap_df
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>analyzed_data[&lt;span style="color:#e6db74">&amp;#39;umap&amp;#39;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> embedding
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>analyzed_data[&lt;span style="color:#e6db74">&amp;#39;cluster&amp;#39;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> clusters
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;/analysis/analyzed_data.pickle&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;wb&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pickle&lt;span style="color:#f92672">.&lt;/span>dump(analyzed_data,f)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="7-hierarchical-dendrogram">
 7. Hierarchical dendrogram
 &lt;a class="anchor" href="#7-hierarchical-dendrogram">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> matplotlib.patches &lt;span style="color:#f92672">import&lt;/span> Patch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>patient_meta&lt;span style="color:#f92672">.&lt;/span>index &lt;span style="color:#f92672">=&lt;/span> patient_meta&lt;span style="color:#f92672">.&lt;/span>Sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>label_colors_1 &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;sDP&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;red&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;mDP&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;orange&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;sRP&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;purple&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;mRP&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;green&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>label_colors_2 &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">4.0&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;orange&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">5.0&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;orange&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">7.0&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;red&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">8.0&lt;/span>:&lt;span style="color:#e6db74">&amp;#39;red&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>label_colors_3 &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;DP&amp;#39;&lt;/span> :&lt;span style="color:#e6db74">&amp;#39;red&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;RP&amp;#39;&lt;/span> : &lt;span style="color:#e6db74">&amp;#39;blue&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>col_colors_1 &lt;span style="color:#f92672">=&lt;/span> patient_meta&lt;span style="color:#f92672">.&lt;/span>Detailed_PPG&lt;span style="color:#f92672">.&lt;/span>map(label_colors_1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>col_colors_2 &lt;span style="color:#f92672">=&lt;/span> patient_meta&lt;span style="color:#f92672">.&lt;/span>Severity&lt;span style="color:#f92672">.&lt;/span>map(label_colors_2)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>col_colors_3 &lt;span style="color:#f92672">=&lt;/span> patient_meta&lt;span style="color:#f92672">.&lt;/span>PPG&lt;span style="color:#f92672">.&lt;/span>map(label_colors_3)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>col_colors &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>DataFrame({&lt;span style="color:#e6db74">&amp;#39;PPGs&amp;#39;&lt;/span>: col_colors_1,&lt;span style="color:#e6db74">&amp;#39;severity&amp;#39;&lt;/span>:col_colors_2,})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>legend_elements_1 &lt;span style="color:#f92672">=&lt;/span> [Patch(facecolor&lt;span style="color:#f92672">=&lt;/span>color, label&lt;span style="color:#f92672">=&lt;/span>label) &lt;span style="color:#66d9ef">for&lt;/span> label, color &lt;span style="color:#f92672">in&lt;/span> label_colors_1&lt;span style="color:#f92672">.&lt;/span>items()]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>legend_elements_2 &lt;span style="color:#f92672">=&lt;/span> [Patch(facecolor&lt;span style="color:#f92672">=&lt;/span>color, label&lt;span style="color:#f92672">=&lt;/span>label) &lt;span style="color:#66d9ef">for&lt;/span> label, color &lt;span style="color:#f92672">in&lt;/span> label_colors_2&lt;span style="color:#f92672">.&lt;/span>items()]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> sklearn.preprocessing &lt;span style="color:#f92672">import&lt;/span> StandardScaler
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> shap_df[&lt;span style="color:#f92672">~&lt;/span>shap_df&lt;span style="color:#f92672">.&lt;/span>index&lt;span style="color:#f92672">.&lt;/span>str&lt;span style="color:#f92672">.&lt;/span>contains(&lt;span style="color:#e6db74">&amp;#39;Healthy&amp;#39;&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df_filtered &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>loc[:, (df &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>any(axis&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>scaler &lt;span style="color:#f92672">=&lt;/span> StandardScaler()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df_scaled &lt;span style="color:#f92672">=&lt;/span> scaler&lt;span style="color:#f92672">.&lt;/span>fit_transform(df_filtered)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df_scaled &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>DataFrame(df_scaled, index&lt;span style="color:#f92672">=&lt;/span>df_filtered&lt;span style="color:#f92672">.&lt;/span>index, columns&lt;span style="color:#f92672">=&lt;/span>df_filtered&lt;span style="color:#f92672">.&lt;/span>columns)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">except&lt;/span> &lt;span style="color:#a6e22e">FloatingPointError&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> e:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Error during scaling: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>e&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>g&lt;span style="color:#f92672">=&lt;/span> sns&lt;span style="color:#f92672">.&lt;/span>clustermap(df_scaled&lt;span style="color:#f92672">.&lt;/span>T, cmap&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;coolwarm&amp;#39;&lt;/span>, figsize&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">20&lt;/span>, &lt;span style="color:#ae81ff">27&lt;/span>), col_colors&lt;span style="color:#f92672">=&lt;/span>col_colors)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>legend_ax_1 &lt;span style="color:#f92672">=&lt;/span> g&lt;span style="color:#f92672">.&lt;/span>fig&lt;span style="color:#f92672">.&lt;/span>add_axes([&lt;span style="color:#ae81ff">1.05&lt;/span>, &lt;span style="color:#ae81ff">0.60&lt;/span>, &lt;span style="color:#ae81ff">0.3&lt;/span>, &lt;span style="color:#ae81ff">0.2&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>legend_ax_2 &lt;span style="color:#f92672">=&lt;/span> g&lt;span style="color:#f92672">.&lt;/span>fig&lt;span style="color:#f92672">.&lt;/span>add_axes([&lt;span style="color:#ae81ff">1.05&lt;/span>, &lt;span style="color:#ae81ff">0.48&lt;/span>, &lt;span style="color:#ae81ff">0.3&lt;/span>, &lt;span style="color:#ae81ff">0.2&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>legend_ax_1&lt;span style="color:#f92672">.&lt;/span>legend(handles&lt;span style="color:#f92672">=&lt;/span>legend_elements_1, title&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;PPGs&amp;#34;&lt;/span>, loc&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;center&amp;#34;&lt;/span>, fontsize &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>legend_ax_1&lt;span style="color:#f92672">.&lt;/span>axis(&lt;span style="color:#e6db74">&amp;#39;off&amp;#39;&lt;/span>) &lt;span style="color:#75715e"># Turn off the axis&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>legend_ax_2&lt;span style="color:#f92672">.&lt;/span>legend(handles&lt;span style="color:#f92672">=&lt;/span>legend_elements_2, title&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Sample Severity&amp;#34;&lt;/span>, loc&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;center&amp;#34;&lt;/span>, fontsize &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>legend_ax_2&lt;span style="color:#f92672">.&lt;/span>axis(&lt;span style="color:#e6db74">&amp;#39;off&amp;#39;&lt;/span>) &lt;span style="color:#75715e"># Turn off the axis&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>show()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>결단</title><link>https://yshghid.github.io/docs/hobby/book/book52/</link><pubDate>Mon, 04 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/hobby/book/book52/</guid><description>&lt;h1 id="결단">
 결단
 &lt;a class="anchor" href="#%ea%b2%b0%eb%8b%a8">#&lt;/a>
&lt;/h1>
&lt;p>#2025-08-04&lt;/p>
&lt;hr>
&lt;p>#1&lt;/p>
&lt;p>머스크는 로켓이 산소가 희박한 높이로 충분히 솟아올라 불꽃이 꺼지길 바랐다. 그러나 로켓은 추락하기 시작했다. 비디오 피드에서 오멜렉이 가까이 다가오더니 더 이상 화면에 아무것도 비치지 않았다. 그리고 불타는 파편들이 바다로 떨어졌다. “위장이 뒤틀렸지요.” 머스크의 말이다. 1시간 후, 머스크는 뮬러, 쾨니스만, 부자, 톰슨 등 수석 팀원들과 함께 잔해를 둘러보기 위해 육군 헬리콥터에 올랐다.&lt;/p>
&lt;p>그날 밤 모두가 콰즈의 야외 바에 모여 조용히 맥주를 마셨다. 몇몇 엔지니어는 눈물을 흘렸다. 머스크는 돌처럼 굳은 얼굴과 먼 곳을 응시하는 눈빛으로 조용히 생각에 잠겼다. 그러고는 아주 부드럽게 입을 열었다. “처음 시작할 때 우리 모두는 첫 번째 임무에서 실패할 수 있다는 것을 알고 있었습니다. 우리는 다른 로켓을 만들어 다시 시도할 것입니다.&lt;/p></description></item><item><title>EBV DHT 연구: method contribution</title><link>https://yshghid.github.io/docs/study/bioinformatics/bi32/</link><pubDate>Sun, 03 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/bioinformatics/bi32/</guid><description>&lt;h1 id="ebv-dht-연구-method-contribution">
 EBV DHT 연구: method contribution
 &lt;a class="anchor" href="#ebv-dht-%ec%97%b0%ea%b5%ac-method-contribution">#&lt;/a>
&lt;/h1>
&lt;p>#2025-08-03&lt;/p>
&lt;hr>
&lt;p>#Paper1&lt;/p>
&lt;p>&lt;a href="https://www.mdpi.com/2072-6694/16/18/3219">Dihydrotestosterone Enhances MICA-Mediated Immune Responses to Epstein–Barr Virus-Associated Gastric Carcinoma&lt;/a>&lt;/p>
&lt;p>#Paper2&lt;/p>
&lt;p>&lt;a href="https://link.springer.com/article/10.1007/s10120-025-01626-6">Dihydrotestosterone-androgen receptor signaling suppresses EBV-positive gastric cancer through DNA demethylation-mediated viral reactivation&lt;/a>&lt;/p>
&lt;h3 id="0-참여-파트">
 0. 참여 파트
 &lt;a class="anchor" href="#0-%ec%b0%b8%ec%97%ac-%ed%8c%8c%ed%8a%b8">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>#Paper1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── 3. ChIP-Seq Assay
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#Paper2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── 2. RNA-seq analysis
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── 14. Bioinformatics analysis of methylome
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="1-chip-seq-assay">
 1. ChIP-Seq Assay
 &lt;a class="anchor" href="#1-chip-seq-assay">#&lt;/a>
&lt;/h3>
&lt;p>Among the above p65 ChIP samples, the sample treated with 100 nM DHT for 30 min showed the strong p65 enrichment on the SNU719 genome. Therefore, this 30 min-treated p65 ChIP sample was analyzed by a next-generation sequencing (NGS) assay to identify the genome-wide locus where the p65 protein is enriched. As a control, IgG ChIP samples were also analyzed by NGS assay to identify non-selective enrichment. The validated ChIP samples were further isolated by agarose gel purification, ligated to primers, and subjected to Illumina-based sequencing using the manufacturer’s protocol (Illumina, San Diego, CA, USA) for ChIP-seq analysis. ChIP-seq reads were mapped to the EBV wild-type reference genome (NC 007605) using Bowtie software (version 2.3.4.1). The MAC2 tool was used for peak calling [12].&lt;/p></description></item><item><title>skala 강의자료공부 #1 DL-CNN, RNN</title><link>https://yshghid.github.io/docs/study/ai/ai11/</link><pubDate>Sun, 03 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai11/</guid><description>&lt;h1 id="skala-강의자료공부-1-dl-cnn-rnn">
 skala 강의자료공부 #1 DL-CNN, RNN
 &lt;a class="anchor" href="#skala-%ea%b0%95%ec%9d%98%ec%9e%90%eb%a3%8c%ea%b3%b5%eb%b6%80-1-dl-cnn-rnn">#&lt;/a>
&lt;/h1>
&lt;p>#2025-08-03&lt;/p>
&lt;hr>
&lt;p>#1 p.90-92&lt;/p>
&lt;p>Convolution, 즉 합성곱은 CNN의 가장 핵심적인 연산이다. 말 그대로 &amp;lsquo;겹쳐서 곱하고 더하는&amp;rsquo; 방식이다. 이는 우리가 이미지를 처리할 때, 그 이미지의 일부분만을 보며 특징을 추출하는 원리와 매우 유사하다. CNN에서는 이 연산을 통해 이미지 속에서 선, 모서리, 윤곽선 같은 패턴을 뽑아낸다.&lt;/p>
&lt;p>p.90에서는 합성곱을 아주 직관적으로 보여준다. 왼쪽에 있는 초록색 격자는 이미지이고, 그 위에 씌워진 주황색 네모는 필터(또는 커널)다. 이 필터는 보통 3x3 크기를 가지며, 그 내부에 있는 값들은 학습을 통해 결정된다. 필터가 한 위치에 씌워지면, 그 영역의 이미지 픽셀들과 필터 값을 각각 곱한 뒤 전부 더한다. 이 값이 새로운 출력 이미지의 한 칸이 된다. 즉, 이미지의 한 조각에 필터를 덧씌워 곱하고 더한 값을 새로운 이미지의 특징으로 만들어내는 것이다. 필터가 한 칸씩 옆으로 이동하면서(이것이 stride), 전체 이미지를 스캔하듯 반복하게 되면, 하나의 convolved feature map이 생성된다. 그림에서는 결과값이 4로 계산되었고, 이 값이 오른쪽의 새로운 이미지에 기록되었다.&lt;/p></description></item><item><title>Docker #1 Python 실행 컨테이너 만들기</title><link>https://yshghid.github.io/docs/study/sw/sw14/</link><pubDate>Fri, 01 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/sw/sw14/</guid><description>&lt;h1 id="docker-1-python-실행-컨테이너-만들기">
 Docker #1 Python 실행 컨테이너 만들기
 &lt;a class="anchor" href="#docker-1-python-%ec%8b%a4%ed%96%89-%ec%bb%a8%ed%85%8c%ec%9d%b4%eb%84%88-%eb%a7%8c%eb%93%a4%ea%b8%b0">#&lt;/a>
&lt;/h1>
&lt;p>#2025-08-01&lt;/p>
&lt;hr>
&lt;h3 id="0-rde-런처-실행">
 0. RDE 런처 실행
 &lt;a class="anchor" href="#0-rde-%eb%9f%b0%ec%b2%98-%ec%8b%a4%ed%96%89">#&lt;/a>
&lt;/h3>
&lt;p>&lt;a href="https://yshghid.github.io/docs/study/sw/sw3/">RDE #1 Local PC에서 RDE 환경 구성&lt;/a>에서 Harbor registry로부터 RdE Container download를 수행했고 아이콘을 클릭해서 RDE 런처를 실행한다.&lt;/p>
&lt;h3 id="1-웹-서비스-실행-컨테이너-만들기">
 1. 웹 서비스 실행 컨테이너 만들기
 &lt;a class="anchor" href="#1-%ec%9b%b9-%ec%84%9c%eb%b9%84%ec%8a%a4-%ec%8b%a4%ed%96%89-%ec%bb%a8%ed%85%8c%ec%9d%b4%eb%84%88-%eb%a7%8c%eb%93%a4%ea%b8%b0">#&lt;/a>
&lt;/h3>
&lt;p>#1 /config/workspace/cloud/container/00.container-linux 경로로 이동&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>cd /config/workspace/cloud/container/00.container-linux
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>#2 디렉토리 구조는?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>00.container-linux/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── Dockerfile // 컨테이너 환경 설정
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── Dockerfile.pytho-slim
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── Dockerfile.ubuntu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── docker-build.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── docker-push.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── mycode.py 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── fastserver.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── webserver.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── mydata/ 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>#3 Dockerfile 내용 확인하기&lt;/p></description></item><item><title>Docker #2 netmhcpan 작년 작업 복기</title><link>https://yshghid.github.io/docs/study/sw/sw15/</link><pubDate>Fri, 01 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/sw/sw15/</guid><description>&lt;h1 id="docker-2-netmhcpan-작년-작업-복기">
 Docker #2 netmhcpan 작년 작업 복기
 &lt;a class="anchor" href="#docker-2-netmhcpan-%ec%9e%91%eb%85%84-%ec%9e%91%ec%97%85-%eb%b3%b5%ea%b8%b0">#&lt;/a>
&lt;/h1>
&lt;p>#2025-08-01&lt;/p>
&lt;hr>
&lt;h3 id="1">
 1
 &lt;a class="anchor" href="#1">#&lt;/a>
&lt;/h3>
&lt;p>2024.11.24 MutClust 작업중에 netmhcpan을 돌려야되는 상황이 왓었는데&lt;/p>
&lt;p>netmhcpan이 유료였나 그래서 패키지 다운은 안되고.. 서버 뒤지다가 아래 README.txt 파일 발견해서 결과물 저장까진 했던 기억이있다.&lt;/p>
&lt;img width="2448" height="1814" alt="image" src="https://github.com/user-attachments/assets/35f962af-822b-4693-8ac2-e320cd263314" />
&lt;p>이때먼가 의문이 들었던게 새로운 conda 환경에 접속한거같은 느낌이 아니라 완전 다른 제2의서버에 접속한 느낌이었는데 이상하게 연구실 디렉토리들은 그대로 접근이 가능해서 혼란스럽지만 그냥 절대경로 다 박고 수행했는데 결과들이 문제없이 저장됐다.&lt;/p>
&lt;p>그래서 그뒤로 잊어버리고있었는데 docker 배우고나니까 먼가 이해돼서 이해된김에 정리해보기!&lt;/p></description></item><item><title>MutClust 코드 리펙토링 #2 arg_parser</title><link>https://yshghid.github.io/docs/study/algorithm/algo2/</link><pubDate>Fri, 01 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/algorithm/algo2/</guid><description>&lt;h1 id="mutclust-코드-리펙토링-2-arg_parser">
 MutClust 코드 리펙토링 #2 arg_parser
 &lt;a class="anchor" href="#mutclust-%ec%bd%94%eb%93%9c-%eb%a6%ac%ed%8e%99%ed%86%a0%eb%a7%81-2-arg_parser">#&lt;/a>
&lt;/h1>
&lt;p>#2025-08-01&lt;/p>
&lt;hr>
&lt;p>MutClust 알고리즘의 코드 구성은 아래와 같은데&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>MutClust
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── sc/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── lib.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── arg_parser.py // 실행 설정
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── utils.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── Test
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>arg_parser.py는 실험 환경 파라미터 세팅 및 CLI 인자 파싱을 포함한다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># === arg_parser.py ===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> argparse
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> os.path &lt;span style="color:#f92672">import&lt;/span> exists
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> src.mlib &lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DIMINISHING_FACTOR, EPSILON, EPSILON_SCALING_FACTOR,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MAX_EPS, MIN_CLUSTER_LENGTH, CCM_MIN_PERCENTAGE_SUM
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ArgsInfo&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">__init__&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>args &lt;span style="color:#f92672">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>fin &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>ref &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>outdir &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>eps &lt;span style="color:#f92672">=&lt;/span> EPSILON
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>maxeps &lt;span style="color:#f92672">=&lt;/span> MAX_EPS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>min_persum &lt;span style="color:#f92672">=&lt;/span> CCM_MIN_PERCENTAGE_SUM
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>eps_scaler_const &lt;span style="color:#f92672">=&lt;/span> EPSILON_SCALING_FACTOR
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>es_control_const &lt;span style="color:#f92672">=&lt;/span> DIMINISHING_FACTOR
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>min_cluster_length &lt;span style="color:#f92672">=&lt;/span> MIN_CLUSTER_LENGTH
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">set_env&lt;/span>(input_path&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">None&lt;/span>, reference&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">None&lt;/span>, output_path&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">None&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info &lt;span style="color:#f92672">=&lt;/span> ArgsInfo()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser &lt;span style="color:#f92672">=&lt;/span> argparse&lt;span style="color:#f92672">.&lt;/span>ArgumentParser(prog&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;cluster.py&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser&lt;span style="color:#f92672">.&lt;/span>add_argument(&lt;span style="color:#e6db74">&amp;#39;-f&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;--input_file&amp;#39;&lt;/span>, type&lt;span style="color:#f92672">=&lt;/span>str, default&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/data3/projects/2020_MUTCLUST/Data/Rawdata/COVID19/nucleotide_data/mutclust_input_data.txt&amp;#39;&lt;/span>, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;mutation frequency data file&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser&lt;span style="color:#f92672">.&lt;/span>add_argument(&lt;span style="color:#e6db74">&amp;#39;-r&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;--ref&amp;#39;&lt;/span>, type&lt;span style="color:#f92672">=&lt;/span>str, default&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/data3/projects/2020_MUTCLUST/Data/Rawdata/COVID19/nucleotide_data/new_reference.fasta&amp;#39;&lt;/span>, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;the reference genome&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser&lt;span style="color:#f92672">.&lt;/span>add_argument(&lt;span style="color:#e6db74">&amp;#39;-e&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;--eps&amp;#39;&lt;/span>, type&lt;span style="color:#f92672">=&lt;/span>int, default&lt;span style="color:#f92672">=&lt;/span>EPSILON, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;width of window (epsilon)&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser&lt;span style="color:#f92672">.&lt;/span>add_argument(&lt;span style="color:#e6db74">&amp;#39;--maxeps&amp;#39;&lt;/span>, type&lt;span style="color:#f92672">=&lt;/span>int, default&lt;span style="color:#f92672">=&lt;/span>MAX_EPS, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;maximum eps&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser&lt;span style="color:#f92672">.&lt;/span>add_argument(&lt;span style="color:#e6db74">&amp;#39;--minps&amp;#39;&lt;/span>, type&lt;span style="color:#f92672">=&lt;/span>float, default&lt;span style="color:#f92672">=&lt;/span>CCM_MIN_PERCENTAGE_SUM, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;minimum per_sum&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser&lt;span style="color:#f92672">.&lt;/span>add_argument(&lt;span style="color:#e6db74">&amp;#39;--es&amp;#39;&lt;/span>, type&lt;span style="color:#f92672">=&lt;/span>float, default&lt;span style="color:#f92672">=&lt;/span>EPSILON_SCALING_FACTOR, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;eps scaling factor&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser&lt;span style="color:#f92672">.&lt;/span>add_argument(&lt;span style="color:#e6db74">&amp;#39;--exd&amp;#39;&lt;/span>, type&lt;span style="color:#f92672">=&lt;/span>float, default&lt;span style="color:#f92672">=&lt;/span>DIMINISHING_FACTOR, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;cluster expansion es diminishing factor&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser&lt;span style="color:#f92672">.&lt;/span>add_argument(&lt;span style="color:#e6db74">&amp;#39;--minl&amp;#39;&lt;/span>, type&lt;span style="color:#f92672">=&lt;/span>int, default&lt;span style="color:#f92672">=&lt;/span>MIN_CLUSTER_LENGTH, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;minimum cluster length&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> args &lt;span style="color:#f92672">=&lt;/span> parser&lt;span style="color:#f92672">.&lt;/span>parse_args()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info&lt;span style="color:#f92672">.&lt;/span>fin &lt;span style="color:#f92672">=&lt;/span> input_path &lt;span style="color:#66d9ef">if&lt;/span> input_path &lt;span style="color:#66d9ef">else&lt;/span> args&lt;span style="color:#f92672">.&lt;/span>input_file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info&lt;span style="color:#f92672">.&lt;/span>ref &lt;span style="color:#f92672">=&lt;/span> reference &lt;span style="color:#66d9ef">if&lt;/span> reference &lt;span style="color:#66d9ef">else&lt;/span> args&lt;span style="color:#f92672">.&lt;/span>ref
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info&lt;span style="color:#f92672">.&lt;/span>outdir &lt;span style="color:#f92672">=&lt;/span> output_path &lt;span style="color:#66d9ef">if&lt;/span> output_path &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./output&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> exists(info&lt;span style="color:#f92672">.&lt;/span>fin):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Input file does not exist: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>fin&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info&lt;span style="color:#f92672">.&lt;/span>eps &lt;span style="color:#f92672">=&lt;/span> args&lt;span style="color:#f92672">.&lt;/span>eps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info&lt;span style="color:#f92672">.&lt;/span>maxeps &lt;span style="color:#f92672">=&lt;/span> args&lt;span style="color:#f92672">.&lt;/span>maxeps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info&lt;span style="color:#f92672">.&lt;/span>min_persum &lt;span style="color:#f92672">=&lt;/span> args&lt;span style="color:#f92672">.&lt;/span>minps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info&lt;span style="color:#f92672">.&lt;/span>eps_scaler_const &lt;span style="color:#f92672">=&lt;/span> args&lt;span style="color:#f92672">.&lt;/span>es
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info&lt;span style="color:#f92672">.&lt;/span>es_control_const &lt;span style="color:#f92672">=&lt;/span> args&lt;span style="color:#f92672">.&lt;/span>exd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info&lt;span style="color:#f92672">.&lt;/span>min_cluster_length &lt;span style="color:#f92672">=&lt;/span> args&lt;span style="color:#f92672">.&lt;/span>minl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> info
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>MutClust 코드 리펙토링 #3 utils</title><link>https://yshghid.github.io/docs/study/algorithm/algo9/</link><pubDate>Fri, 01 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/algorithm/algo9/</guid><description>&lt;h1 id="mutclust-코드-리펙토링-3-utils">
 MutClust 코드 리펙토링 #3 utils
 &lt;a class="anchor" href="#mutclust-%ec%bd%94%eb%93%9c-%eb%a6%ac%ed%8e%99%ed%86%a0%eb%a7%81-3-utils">#&lt;/a>
&lt;/h1>
&lt;p>#2025-08-01&lt;/p>
&lt;hr>
&lt;p>MutClust 알고리즘의 코드 구성은 아래와 같은데&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>MutClust
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── sc/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── lib.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── arg_parser.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── utils.py // 전처리 및 분석
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── Test
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>utils.py는 데이터 전처리 및 분석 함수를 포함한다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># === Fasta 전처리 ===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">fasta2csv&lt;/span>(home_dir, nation_dir, filechunk, ref, outdir):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> file &lt;span style="color:#f92672">in&lt;/span> filechunk:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(home_dir, nation_dir, file)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filename &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>splitext(os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>basename(file))[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> outpath &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(outdir, &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>filename&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">.csv&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>exists(outpath):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df &lt;span style="color:#f92672">=&lt;/span> DataFrame({&lt;span style="color:#e6db74">&amp;#39;ref&amp;#39;&lt;/span>: ref&lt;span style="color:#f92672">.&lt;/span>values, &lt;span style="color:#e6db74">&amp;#39;pos&amp;#39;&lt;/span>: ref&lt;span style="color:#f92672">.&lt;/span>index})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> seq &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(open(path)&lt;span style="color:#f92672">.&lt;/span>readlines()[&lt;span style="color:#ae81ff">1&lt;/span>:])&lt;span style="color:#f92672">.&lt;/span>strip()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df[&lt;span style="color:#e6db74">&amp;#39;mut&amp;#39;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> [a &lt;span style="color:#66d9ef">if&lt;/span> a &lt;span style="color:#f92672">!=&lt;/span> ref[i] &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> i, a &lt;span style="color:#f92672">in&lt;/span> enumerate(seq)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df&lt;span style="color:#f92672">.&lt;/span>to_csv(outpath, index&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">False&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">gisaid_fasta2csv&lt;/span>(homedir&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>GISAID_DIR&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/Sequence/Preprocessed/&amp;#34;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inputdir &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(homedir, &lt;span style="color:#e6db74">&amp;#39;MSA_fasta&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> outdir &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(homedir, &lt;span style="color:#e6db74">&amp;#39;MSA_mutationinfo&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Path(outdir)&lt;span style="color:#f92672">.&lt;/span>mkdir(exist_ok&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>, parents&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> core_n &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> args_list &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> nation_dir &lt;span style="color:#f92672">in&lt;/span> get_dirnames_list(inputdir):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filelist &lt;span style="color:#f92672">=&lt;/span> get_filenames_list(os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(inputdir, nation_dir))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> chunk &lt;span style="color:#f92672">in&lt;/span> array_split(filelist, core_n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> args_list&lt;span style="color:#f92672">.&lt;/span>append((inputdir, nation_dir, chunk, ref_seq, outdir))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> Pool(core_n) &lt;span style="color:#66d9ef">as&lt;/span> pool:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pool&lt;span style="color:#f92672">.&lt;/span>map(fasta2csv, args_list)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># === Nucleotide 전처리 ===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_nucleotide_sequence_dict&lt;/span>(seq_dir):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> seq_dict &lt;span style="color:#f92672">=&lt;/span> dict()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> seq_list &lt;span style="color:#f92672">=&lt;/span> get_filenames_list(seq_dir)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> file &lt;span style="color:#f92672">in&lt;/span> seq_list:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filepath &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(seq_dir, file)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df &lt;span style="color:#f92672">=&lt;/span> read_csv(filepath, index_col&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df&lt;span style="color:#f92672">.&lt;/span>name &lt;span style="color:#f92672">=&lt;/span> file&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>)[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>reset_index(drop&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> seq_dict[df&lt;span style="color:#f92672">.&lt;/span>name] &lt;span style="color:#f92672">=&lt;/span> df
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> seq_dict
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">getNucleotideRefSeqbyGene&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> read_csv(&lt;span style="color:#e6db74">&amp;#39;/data3/projects/2020_MUTCLUST/Data/Annotation/Nucleotide/covid_annotation.tsv&amp;#39;&lt;/span>, sep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">make_nucleotide_mutclust_input&lt;/span>(outdir, name, seq_dict&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">None&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>exists(outdir):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(outdir &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39; is not exist&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output_path &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(outdir, name &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;_mutclust_input.tsv&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq_df_ATGC_path &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(outdir, name &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;_freq_ATGC.csv&amp;#39;&lt;/span>) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pos_list, freq_list, per_list, entropy_list &lt;span style="color:#f92672">=&lt;/span> [], [], [], []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>exists(freq_df_ATGC_path):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> seq_dict &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;load seq_dict&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq_df &lt;span style="color:#f92672">=&lt;/span> DataFrame&lt;span style="color:#f92672">.&lt;/span>from_dict(seq_dict)&lt;span style="color:#f92672">.&lt;/span>transpose()&lt;span style="color:#f92672">.&lt;/span>fillna(&lt;span style="color:#ae81ff">0&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>astype(int)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq_df &lt;span style="color:#f92672">=&lt;/span> freq_df&lt;span style="color:#f92672">.&lt;/span>sort_index()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq_df &lt;span style="color:#f92672">=&lt;/span> freq_df[list(IUPAC_CODES&lt;span style="color:#f92672">.&lt;/span>keys())][[&lt;span style="color:#e6db74">&amp;#39;A&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;T&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;G&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;C&amp;#39;&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq_df&lt;span style="color:#f92672">.&lt;/span>to_csv(freq_df_ATGC_path)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq_df &lt;span style="color:#f92672">=&lt;/span> read_csv(freq_df_ATGC_path, index_col&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> pos &lt;span style="color:#f92672">in&lt;/span> freq_df&lt;span style="color:#f92672">.&lt;/span>index:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq &lt;span style="color:#f92672">=&lt;/span> freq_df&lt;span style="color:#f92672">.&lt;/span>loc[pos]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cnt_n &lt;span style="color:#f92672">=&lt;/span> freq&lt;span style="color:#f92672">.&lt;/span>sum()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> percentage &lt;span style="color:#f92672">=&lt;/span> freq &lt;span style="color:#f92672">/&lt;/span> cnt_n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> entrpy &lt;span style="color:#f92672">=&lt;/span> entropy(percentage, base&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> percentage&lt;span style="color:#f92672">.&lt;/span>drop(ref_seq[pos], inplace&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq&lt;span style="color:#f92672">.&lt;/span>drop(ref_seq[pos], inplace&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pos_list&lt;span style="color:#f92672">.&lt;/span>append(int(pos))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq_list&lt;span style="color:#f92672">.&lt;/span>append(freq&lt;span style="color:#f92672">.&lt;/span>sum())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> per_list&lt;span style="color:#f92672">.&lt;/span>append(percentage&lt;span style="color:#f92672">.&lt;/span>sum())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> entropy_list&lt;span style="color:#f92672">.&lt;/span>append(entrpy)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mutclust_input_df &lt;span style="color:#f92672">=&lt;/span> DataFrame({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;Position&amp;#39;&lt;/span>: pos_list,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;Frequency&amp;#39;&lt;/span>: freq_list,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;Percentages&amp;#39;&lt;/span>: per_list,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;Entropy&amp;#39;&lt;/span>: entropy_list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mutclust_input_df&lt;span style="color:#f92672">.&lt;/span>to_csv(output_path, sep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>, index&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">False&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> mutclust_input_df
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># === Mutation 데이터 병렬 처리 ===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">read_thead&lt;/span>(filepathlist, return_list, i):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ref_seq_sr &lt;span style="color:#f92672">=&lt;/span> getNucleotideRefSeq()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_dict &lt;span style="color:#f92672">=&lt;/span> {pos: Counter({k: &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> k &lt;span style="color:#f92672">in&lt;/span> IUPAC_CODES&lt;span style="color:#f92672">.&lt;/span>keys()}) &lt;span style="color:#66d9ef">for&lt;/span> pos &lt;span style="color:#f92672">in&lt;/span> ref_seq_sr&lt;span style="color:#f92672">.&lt;/span>index}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> filepath &lt;span style="color:#f92672">in&lt;/span> filepathlist:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df &lt;span style="color:#f92672">=&lt;/span> read_csv(filepath, index_col&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>fillna(&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>reset_index(drop&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> index, mut &lt;span style="color:#f92672">in&lt;/span> enumerate(df[&lt;span style="color:#e6db74">&amp;#39;mut&amp;#39;&lt;/span>]):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> symbol &lt;span style="color:#f92672">=&lt;/span> mut &lt;span style="color:#66d9ef">if&lt;/span> mut &lt;span style="color:#66d9ef">else&lt;/span> ref_seq_sr[index &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> symbol &lt;span style="color:#f92672">in&lt;/span> sub_dict[index &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_dict[index &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>][symbol] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_dict[index &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>][symbol] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return_list&lt;span style="color:#f92672">.&lt;/span>append(sub_dict)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>i&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">th process complete!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">merge_thread&lt;/span>(poslist, sub_dict_list, return_dict):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> pos &lt;span style="color:#f92672">in&lt;/span> poslist:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count_dict &lt;span style="color:#f92672">=&lt;/span> sum([d[pos] &lt;span style="color:#66d9ef">for&lt;/span> d &lt;span style="color:#f92672">in&lt;/span> sub_dict_list], Counter())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> merged_dict &lt;span style="color:#f92672">=&lt;/span> {k: count_dict&lt;span style="color:#f92672">.&lt;/span>get(k, &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#66d9ef">for&lt;/span> k &lt;span style="color:#f92672">in&lt;/span> IUPAC_CODES&lt;span style="color:#f92672">.&lt;/span>keys()}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return_dict[pos] &lt;span style="color:#f92672">=&lt;/span> merged_dict
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">load_mutationinfo&lt;/span>(input_dir&lt;span style="color:#f92672">=&lt;/span>COVID19_MUTATIONINFO_DIR, sample_list&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">None&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> core_n, split_n &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">1000&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_dict_list &lt;span style="color:#f92672">=&lt;/span> Manager()&lt;span style="color:#f92672">.&lt;/span>list()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filelist &lt;span style="color:#f92672">=&lt;/span> get_file_paths_recursive(input_dir)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> sample_list:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filelist &lt;span style="color:#f92672">=&lt;/span> [f &lt;span style="color:#66d9ef">for&lt;/span> f &lt;span style="color:#f92672">in&lt;/span> filelist &lt;span style="color:#66d9ef">if&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>basename(f)&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>)[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">in&lt;/span> sample_list]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;sample_n: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>len(sample_list)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> splited_filepaths &lt;span style="color:#f92672">=&lt;/span> array_split(filelist, split_n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parameter_list &lt;span style="color:#f92672">=&lt;/span> [(chunk, sub_dict_list, i) &lt;span style="color:#66d9ef">for&lt;/span> i, chunk &lt;span style="color:#f92672">in&lt;/span> enumerate(splited_filepaths)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;read thread start!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> multi_processing(read_thead, parameter_list, core_n&lt;span style="color:#f92672">=&lt;/span>core_n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;read thread end!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> merged_dict &lt;span style="color:#f92672">=&lt;/span> Manager()&lt;span style="color:#f92672">.&lt;/span>dict()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> poslist &lt;span style="color:#f92672">=&lt;/span> ref_seq&lt;span style="color:#f92672">.&lt;/span>index
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> splited_poslist &lt;span style="color:#f92672">=&lt;/span> array_split(poslist, split_n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_dict_list &lt;span style="color:#f92672">=&lt;/span> list(sub_dict_list)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parameter_list &lt;span style="color:#f92672">=&lt;/span> [(pos_chunk, sub_dict_list, merged_dict) &lt;span style="color:#66d9ef">for&lt;/span> pos_chunk &lt;span style="color:#f92672">in&lt;/span> splited_poslist]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;merge thread start!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> multi_processing(merge_thread, parameter_list, core_n&lt;span style="color:#f92672">=&lt;/span>core_n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;merge thread end!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> dict(merged_dict)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># === Matrix 생성 병렬 처리 ===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">make_matrix_thread&lt;/span>(file_list):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clusters_df &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>read_csv(os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(GISAID_MUTCLUST_OUTPUT_DIR, &lt;span style="color:#e6db74">&amp;#39;clusters_hscore.txt&amp;#39;&lt;/span>), sep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> column_list &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;c&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>i&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">(&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>row[&lt;span style="color:#e6db74">&amp;#39;left_position&amp;#39;&lt;/span>]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">,&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>row[&lt;span style="color:#e6db74">&amp;#39;right_position&amp;#39;&lt;/span>]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">)&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> i, row &lt;span style="color:#f92672">in&lt;/span> clusters_df&lt;span style="color:#f92672">.&lt;/span>iterrows()]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cluster_df &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>DataFrame(columns&lt;span style="color:#f92672">=&lt;/span>column_list)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> path &lt;span style="color:#f92672">in&lt;/span> file_list:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>read_csv(path)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> patient_name &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>splitext(os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>basename(path))[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cluster_df&lt;span style="color:#f92672">.&lt;/span>loc[patient_name] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> pos &lt;span style="color:#f92672">in&lt;/span> df[df[&lt;span style="color:#e6db74">&amp;#39;mut&amp;#39;&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>notnull()][&lt;span style="color:#e6db74">&amp;#39;pos&amp;#39;&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cluster_idx &lt;span style="color:#f92672">=&lt;/span> clusters_df[(clusters_df[&lt;span style="color:#e6db74">&amp;#39;left_position&amp;#39;&lt;/span>] &lt;span style="color:#f92672">&amp;lt;=&lt;/span> pos) &lt;span style="color:#f92672">&amp;amp;&lt;/span> (pos &lt;span style="color:#f92672">&amp;lt;=&lt;/span> clusters_df[&lt;span style="color:#e6db74">&amp;#39;right_position&amp;#39;&lt;/span>])]&lt;span style="color:#f92672">.&lt;/span>index
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cluster_df&lt;span style="color:#f92672">.&lt;/span>loc[patient_name][cluster_idx] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> cluster_df
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">make_matrix&lt;/span>(mutationinfo_dir, out_dir, tag, cpu_n&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">60&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;starting make matrix!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pool &lt;span style="color:#f92672">=&lt;/span> Pool(processes&lt;span style="color:#f92672">=&lt;/span>cpu_n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> file_list &lt;span style="color:#f92672">=&lt;/span> get_file_paths_recursive(mutationinfo_dir)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> results &lt;span style="color:#f92672">=&lt;/span> pool&lt;span style="color:#f92672">.&lt;/span>map(make_matrix_thread, array_split(file_list, cpu_n))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pd&lt;span style="color:#f92672">.&lt;/span>concat(results)&lt;span style="color:#f92672">.&lt;/span>to_csv(os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(out_dir, &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;cluster_matrix_&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>tag&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">.csv&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pool&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pool&lt;span style="color:#f92672">.&lt;/span>join()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># === H-score 계산 ===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">add_HSCORE&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>read_csv(os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(MUTCLUST_INPUT_DIR, &lt;span style="color:#e6db74">&amp;#39;gisaid_mutclust_input.tsv&amp;#39;&lt;/span>), sep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df[HSCORE] &lt;span style="color:#f92672">=&lt;/span> df[PER] &lt;span style="color:#f92672">*&lt;/span> df[ENT]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df&lt;span style="color:#f92672">.&lt;/span>to_csv(os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(MUTCLUST_INPUT_DIR, &lt;span style="color:#e6db74">&amp;#39;gisaid_mutclust_input_with_score.tsv&amp;#39;&lt;/span>), sep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>, index&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">False&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># === 주석(Annotation) ===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">annotation&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">import&lt;/span> ast
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mapping_df &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>read_csv(os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(GISAID_METADATA_DIR, &lt;span style="color:#e6db74">&amp;#39;merged_info.tsv&amp;#39;&lt;/span>), sep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>, index_col&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i, row &lt;span style="color:#f92672">in&lt;/span> mapping_df&lt;span style="color:#f92672">.&lt;/span>iterrows():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mapping_df&lt;span style="color:#f92672">.&lt;/span>loc[i] &lt;span style="color:#f92672">=&lt;/span> [ast&lt;span style="color:#f92672">.&lt;/span>literal_eval(val) &lt;span style="color:#66d9ef">for&lt;/span> val &lt;span style="color:#f92672">in&lt;/span> row]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(mapping_df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">make_clade_divide_mutation&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clade_dir &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./clade_divide_mutation&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> start_dict &lt;span style="color:#f92672">=&lt;/span> getStartDict()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> file &lt;span style="color:#f92672">in&lt;/span> get_filenames_list(clade_dir):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df &lt;span style="color:#f92672">=&lt;/span> read_csv(os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(clade_dir, file), sep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># === 병렬 처리 유틸리티 ===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">multi_processing&lt;/span>(func, parameter_list, core_n&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">100&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proc, proc_excution, proc_end &lt;span style="color:#f92672">=&lt;/span> [], [], []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> param &lt;span style="color:#f92672">in&lt;/span> parameter_list:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proc&lt;span style="color:#f92672">.&lt;/span>append(Process(target&lt;span style="color:#f92672">=&lt;/span>func, args&lt;span style="color:#f92672">=&lt;/span>param))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> proc &lt;span style="color:#f92672">or&lt;/span> proc_excution:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(len(proc)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(proc_excution) &lt;span style="color:#f92672">&amp;lt;&lt;/span> core_n:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p &lt;span style="color:#f92672">=&lt;/span> proc&lt;span style="color:#f92672">.&lt;/span>pop(&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p&lt;span style="color:#f92672">.&lt;/span>start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proc_excution&lt;span style="color:#f92672">.&lt;/span>append(p)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> p &lt;span style="color:#f92672">in&lt;/span> proc_excution[:]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> p&lt;span style="color:#f92672">.&lt;/span>is_alive():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proc_excution&lt;span style="color:#f92672">.&lt;/span>remove(p)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p&lt;span style="color:#f92672">.&lt;/span>join()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proc_end&lt;span style="color:#f92672">.&lt;/span>append(p)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># === 메인 실행 ===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> annotation()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>