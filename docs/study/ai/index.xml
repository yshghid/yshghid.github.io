<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AI on</title><link>https://yshghid.github.io/docs/study/ai/</link><description>Recent content in AI on</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 22 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://yshghid.github.io/docs/study/ai/index.xml" rel="self" type="application/rss+xml"/><item><title>AI #2 HPO, XAI 실습</title><link>https://yshghid.github.io/docs/study/ai/ai38/</link><pubDate>Mon, 22 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai38/</guid><description>&lt;h1 id="ai-2-hpo-xai-실습"&gt;
 AI #2 HPO, XAI 실습
 &lt;a class="anchor" href="#ai-2-hpo-xai-%ec%8b%a4%ec%8a%b5"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-22&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-실습-개요"&gt;
 1. 실습 개요
 &lt;a class="anchor" href="#1-%ec%8b%a4%ec%8a%b5-%ea%b0%9c%ec%9a%94"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;목적
&lt;ul&gt;
&lt;li&gt;UCI Breast Cancer 데이터를 로드하고 전처리 후 XGBoost 모델을 구축 및 평가&lt;/li&gt;
&lt;li&gt;교차검증(StratifiedKFold, KFold)과 하이퍼파라미터 탐색 기법(RandomizedSearchCV, Optuna)을 비교하여 최적 성능을 도출&lt;/li&gt;
&lt;li&gt;SHAP을 활용하여 전역적·집단적·개별적 수준에서 해석력을 확보하고 도메인 지식과 연결&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;구현
&lt;ul&gt;
&lt;li&gt;데이터 로드: UCI Breast Cancer 데이터셋&lt;/li&gt;
&lt;li&gt;데이터 전처리: 타겟(Diagnosis)을 이진화(M=1, B=0), StandardScaler로 범위 스케일링, 상관계수 0.9 이상인 중복 변수 제거&lt;/li&gt;
&lt;li&gt;모델 구축: xgboost.XGBClassifier&lt;/li&gt;
&lt;li&gt;모델 평가: 정확도, AUC, 분류리포트, 혼동행렬, feature importance&lt;/li&gt;
&lt;li&gt;교차검증: KFold, StratifiedKFold&lt;/li&gt;
&lt;li&gt;하이퍼파라미터 최적화: Random Search, Optuna TPE&lt;/li&gt;
&lt;li&gt;모델 해석 (SHAP)
&lt;ul&gt;
&lt;li&gt;Bar Summary Plot: 전역적 중요도(평균 |SHAP|)를 통해 주요 변수 확인&lt;/li&gt;
&lt;li&gt;Beeswarm Plot: 변수 값 크기(빨강/파랑)와 방향성(+/−)에 따른 분포 해석&lt;/li&gt;
&lt;li&gt;Force / Waterfall Plot: 3가지 개별 환자 샘플(예측 확률 극단/불확실, SHAP 영향력 최대, 도메인 특이 케이스)을 선택하여 모델이 어떤 요인 때문에 해당 예측을 내렸는지 설명&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="2-실습-보고서"&gt;
 2. 실습 보고서
 &lt;a class="anchor" href="#2-%ec%8b%a4%ec%8a%b5-%eb%b3%b4%ea%b3%a0%ec%84%9c"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;목차&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;실습 내용&lt;/li&gt;
&lt;li&gt;개요&lt;/li&gt;
&lt;li&gt;결과 - 데이터 전처리&lt;/li&gt;
&lt;li&gt;결과 - 모델 구축 및 평가 실행&lt;/li&gt;
&lt;li&gt;결과 - 교차검증 전략 비교 실행&lt;/li&gt;
&lt;li&gt;결과 - 하이퍼파라미터 튜닝&lt;/li&gt;
&lt;li&gt;결과 - SHAP 기반 해석 (Bar Summary Plot, Beeswarm Plot)&lt;/li&gt;
&lt;li&gt;결과 - SHAP 기반 해석 (Waterfall Plot)&lt;/li&gt;
&lt;li&gt;Final Report - SHAP 결과 해석 및 임상 활용 방안&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;보고서 링크
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://open-trust-407.notion.site/AI-2-XAI-274766ec530e80c8977cd13e3c27af84?source=copy_link"&gt;https://open-trust-407.notion.site/AI-2-XAI-274766ec530e80c8977cd13e3c27af84?source=copy_link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="3-프롬프팅1---하이퍼파라미터별-의미"&gt;
 3. 프롬프팅1 - 하이퍼파라미터별 의미
 &lt;a class="anchor" href="#3-%ed%94%84%eb%a1%ac%ed%94%84%ed%8c%851---%ed%95%98%ec%9d%b4%ed%8d%bc%ed%8c%8c%eb%9d%bc%eb%af%b8%ed%84%b0%eb%b3%84-%ec%9d%98%eb%af%b8"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;값이 클수록?
&lt;ul&gt;
&lt;li&gt;n_estimators (트리 개수): 크면 학습을 오래 시킴, 성능을 높일 수 있음, overfitting&lt;/li&gt;
&lt;li&gt;max_depth (트리 깊이): 깊으면 데이터의 세부 패턴까지 학습해 overfitting&lt;/li&gt;
&lt;li&gt;learning_rate (학습률): 크면 빠르게 학습하지만 최적점을 지나쳐 버릴 수 있어 overfitting. 작으면 한 스텝씩 조심스럽게 학습해 일반화 성능은 좋아지지만 많은 트리 n_estimators가 필요할수있음.&lt;/li&gt;
&lt;li&gt;subsample (샘플 비율): 크면 variance가 크고 overfitting.&lt;/li&gt;
&lt;li&gt;colsample_bytree (특성 샘플링 비율): 1.0이면 모든 피처를 쓰고 낮추면 랜덤성을 주므로 모델 다양성을 높여 overfitting 완화.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="4-프롬프팅2---shap-플롯-해석법"&gt;
 4. 프롬프팅2 - SHAP 플롯 해석법
 &lt;a class="anchor" href="#4-%ed%94%84%eb%a1%ac%ed%94%84%ed%8c%852---shap-%ed%94%8c%eb%a1%af-%ed%95%b4%ec%84%9d%eb%b2%95"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Bar Summary Plot&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;봐야하는것: 막대 길이
&lt;ul&gt;
&lt;li&gt;막대 길이가 길수록 전체 모델 예측에서 해당 변수가 차지하는 중요도가 크다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;해석 포인트
&lt;ul&gt;
&lt;li&gt;막대 길이가 길다: 전역적으로 중요한 변수&lt;/li&gt;
&lt;li&gt;막대 길이가 짧다: 영향력이 거의 없는 변수&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Beeswarm Plot&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;봐야하는것: 막대 길이, 방향성, 색깔
&lt;ul&gt;
&lt;li&gt;막대 길이의 분포가 넓을수록 샘플별로 변수 효과가 다양하다.&lt;/li&gt;
&lt;li&gt;방향성이 +일수록 예측값을 올린다, -일수록 예측값을 낮춘다.&lt;/li&gt;
&lt;li&gt;색깔이 빨강 = 변수 값이 크다, 파랑 = 변수 값이 작다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;해석 포인트
&lt;ul&gt;
&lt;li&gt;막대길이와 방향성 조합
&lt;ul&gt;
&lt;li&gt;막대길이가 길고 방향성이 양수: 변수 값이 커질수록 예측 확률을 크게 올린다.&lt;/li&gt;
&lt;li&gt;막대길이가 길고 방향성이 음수: 변수 값이 작아질수록 예측 확률을 크게 낮춘다.&lt;/li&gt;
&lt;li&gt;막대길이가 짧거나 방향성이 양/음 혼재: 전체에 미치는 영향은 작음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;색깔과 방향성 조합
&lt;ul&gt;
&lt;li&gt;빨강이면서 방향성이 양수: 값이 클 때 예측값↑&lt;/li&gt;
&lt;li&gt;파랑이면서 방향성이 음수: 값이 작을 때 예측값↓&lt;/li&gt;
&lt;li&gt;원칙적으로는 위와 같은데
&lt;ul&gt;
&lt;li&gt;빨강이면서 음수에 몰림: 값이 클수록 오히려 예측값↓ (역효과)&lt;/li&gt;
&lt;li&gt;파랑이면서 양수에 몰림: 값이 작을수록 오히려 예측값↑ (역효과)&lt;/li&gt;
&lt;li&gt;이런 경우는 보통
&lt;ul&gt;
&lt;li&gt;비선형 관계: 변수 값이 커질수록 예측이 올라가다가, 일정 임계점 넘으면 오히려 내려가는 경우&lt;/li&gt;
&lt;li&gt;상호작용 효과: 다른 변수와 조합됐을 때만 특정 방향으로 작용하는 경우.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="3"&gt;
&lt;li&gt;Force / Waterfall Plot (개별 샘플 해석)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;봐야하는것: 막대 길이, 방향성
&lt;ul&gt;
&lt;li&gt;막대 길이 길수록 해당 샘플의 예측에 기여한 정도가 크다.&lt;/li&gt;
&lt;li&gt;방향성이 +일수록 예측값을 기준선(Base Value)에서 올리는 요인, -일수록 낮추는 요인.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;해석 포인트
&lt;ul&gt;
&lt;li&gt;막대길이가 길고 방향성이 양수: 이 변수 때문에 해당 샘플의 예측 확률이 많이 올라감.&lt;/li&gt;
&lt;li&gt;막대길이가 길고 방향성이 음수: 이 변수 때문에 해당 샘플의 예측 확률이 많이 내려감.&lt;/li&gt;
&lt;li&gt;막대길이가 짧음: 해당 샘플에서는 영향이 거의 없음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h1&gt;</description></item><item><title>AI #3 SK 바이오팜 뇌전증 발작 기전 탐지 프로젝트</title><link>https://yshghid.github.io/docs/study/ai/ai37/</link><pubDate>Mon, 22 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai37/</guid><description>&lt;h1 id="ai-3-sk-바이오팜-뇌전증-발작-기전-탐지-프로젝트"&gt;
 AI #3 SK 바이오팜 뇌전증 발작 기전 탐지 프로젝트
 &lt;a class="anchor" href="#ai-3-sk-%eb%b0%94%ec%9d%b4%ec%98%a4%ed%8c%9c-%eb%87%8c%ec%a0%84%ec%a6%9d-%eb%b0%9c%ec%9e%91-%ea%b8%b0%ec%a0%84-%ed%83%90%ec%a7%80-%ed%94%84%eb%a1%9c%ec%a0%9d%ed%8a%b8"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-22&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-프로젝트-배경"&gt;
 1. 프로젝트 배경
 &lt;a class="anchor" href="#1-%ed%94%84%eb%a1%9c%ec%a0%9d%ed%8a%b8-%eb%b0%b0%ea%b2%bd"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Digital biomarker
&lt;ul&gt;
&lt;li&gt;생체 신호를 디지털 신호로 감지해 질병 상태를 판단하는 지표.&lt;/li&gt;
&lt;li&gt;EEG(뇌전도), ECG(심전도)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;의료 데이터
&lt;ul&gt;
&lt;li&gt;병원 데이터는 실제성이 높지만 노이즈가 심하고 규모가 작음.&lt;/li&gt;
&lt;li&gt;근데 뇌전증 분야는 오픈 데이터셋(CHB-MIT 등)이 많아 연구 접근성이 높음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;서비스 목표: 뇌전증 환자에게 경량 하드웨어 기반의 웨어러블 기기(안경, 밴드, 손목형)를 제공
&lt;ul&gt;
&lt;li&gt;실제로는 머리 전체 64채널 EEG 대신, 관자놀이 부위 2~4채널 신호만 활용해 모델을 구동해야 함.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="2-전체-파이프라인"&gt;
 2. 전체 파이프라인
 &lt;a class="anchor" href="#2-%ec%a0%84%ec%b2%b4-%ed%8c%8c%ec%9d%b4%ed%94%84%eb%9d%bc%ec%9d%b8"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;실시간 서비스화를 고려하여 신호 입력부터 최종 출력까지 크게 4단계로 구성.
&lt;ul&gt;
&lt;li&gt;신호 수집(Input): 환자의 EEG, ECG 신호.&lt;/li&gt;
&lt;li&gt;전처리(Preprocessing): 잡음 제거, 스케일링, 채널 축소.&lt;/li&gt;
&lt;li&gt;모델(Modeling)
&lt;ul&gt;
&lt;li&gt;Detection(발작 탐지): CNN 기반 모델 → 실제 발작 시점에 신호를 감지.&lt;/li&gt;
&lt;li&gt;Prediction(발작 예측): 발작이 오기 전(병원 기준 최소 5분 전) 알림 제공을 목표. 그러나 EEG 특성상 발작 직전 신호 변화가 급격하여 예측은 어려움.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;후처리(Post-processing)
&lt;ul&gt;
&lt;li&gt;예측 결과를 단순 알림으로 끝내지 않고, 기존 저장된 데이터와 함께 시각화·요약.&lt;/li&gt;
&lt;li&gt;서비스 레벨에서 false positive를 줄이기 위해 정확도를 의도적으로 조정하기도 함.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="3-연구-및-모델링-과정"&gt;
 3. 연구 및 모델링 과정
 &lt;a class="anchor" href="#3-%ec%97%b0%ea%b5%ac-%eb%b0%8f-%eb%aa%a8%eb%8d%b8%eb%a7%81-%ea%b3%bc%ec%a0%95"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;(1) Baseline 모델
&lt;ul&gt;
&lt;li&gt;입력 신호: 2채널 EEG + 다른 생체 신호를 조합.&lt;/li&gt;
&lt;li&gt;구조: 2D Conv 기반 블록 (Conv → MaxPooling → BatchNorm → Padding) 반복.&lt;/li&gt;
&lt;li&gt;조합: 두 신호를 Concat 후 sigmoid로 확률값 산출.&lt;/li&gt;
&lt;li&gt;한계: 채널 수가 적어 feature 추출력이 낮고, 발작 이벤트 자체가 희소하여 detection은 가능하지만 prediction 성능은 미흡.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(2) 최종 모델 디자인
&lt;ul&gt;
&lt;li&gt;아이디어 전환: 일본 지진 탐지 논문에서 착안. 지진도 드물게 발생하고, 일어나면 영향이 큰 점에서 데이터 특성이 뇌전증 발작과 유사.&lt;/li&gt;
&lt;li&gt;모델 구조:
&lt;ul&gt;
&lt;li&gt;1D Conv 기반으로 feature map 추출.&lt;/li&gt;
&lt;li&gt;ResNet 블록을 도입해 skip connection과 residual learning 적용.&lt;/li&gt;
&lt;li&gt;Batch Normalization과 ReLU 활성화로 안정성 확보.&lt;/li&gt;
&lt;li&gt;Attention 메커니즘으로 정상 vs 발작 신호의 차이를 극대화.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;성능: Detection은 목표 스코어 달성, Prediction은 데이터 특성상 한계 존재. 최종적으로 semi-supervised 방법을 활용해 제한된 라벨 데이터를 보완.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="4-주요-연구-인사이트"&gt;
 4. 주요 연구 인사이트
 &lt;a class="anchor" href="#4-%ec%a3%bc%ec%9a%94-%ec%97%b0%ea%b5%ac-%ec%9d%b8%ec%82%ac%ec%9d%b4%ed%8a%b8"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;데이터 희소성 문제: 환자는 대부분 정상 상태에 있고 발작은 드물어, imbalance가 극심. 모델은 항상 “정상”으로 예측하는 경향.&lt;/li&gt;
&lt;li&gt;서비스 제약 고려: 논문 대부분은 64채널 데이터를 전제로 하지만, 실제 기기는 2~4채널만 사용해야 함. 따라서 모델 설계는 현실적인 센서 환경에 맞춰야 함.&lt;/li&gt;
&lt;li&gt;도메인 확장 사고: 뇌전증만 고집하지 않고, 유사 특성을 가진 다른 분야(지진 탐지)에서 모델 아이디어를 차용한 점이 혁신적.&lt;/li&gt;
&lt;li&gt;후처리 중요성: 연구 모델이 단순히 “탐지 여부”만 내뱉는 것이 아니라, 서비스로 쓰일 수 있도록 후처리 로직을 통해 신뢰도·사용성을 확보.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="5-최종-성과-및-의미"&gt;
 5. 최종 성과 및 의미
 &lt;a class="anchor" href="#5-%ec%b5%9c%ec%a2%85-%ec%84%b1%ea%b3%bc-%eb%b0%8f-%ec%9d%98%eb%af%b8"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Detection 성능 달성: 환자에게 즉각적인 발작 알림을 제공할 수준에 도달.&lt;/li&gt;
&lt;li&gt;Prediction의 난제 확인: 발작 발생 최소 5분 전 예측은 데이터 한계로 불가능에 가까움 → 임상 적용 시 expectation 관리 필요.&lt;/li&gt;
&lt;li&gt;서비스 수준 설계: 소형 칩셋 기반 웨어러블 기기에 적용할 수 있는 경량 모델 구조 확보.&lt;/li&gt;
&lt;li&gt;연구적 가치: semi-supervised 학습, cross-domain 모델링(지진 연구 적용)이라는 새로운 시도를 통해 향후 의료 AI 연구 확장 가능성 제시.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;정리하면, 이 프로젝트는 “64채널 연구용 EEG → 2~4채널 서비스용 웨어러블 EEG로 현실화”라는 어려운 문제를 해결하려 한 시도였고, detection 단계에서는 성공, prediction 단계에서는 한계를 확인했습니다. 동시에 지진 탐지 모델을 차용하는 등 cross-domain 사고로 연구-서비스 간 간극을 좁힌 사례라 할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h1&gt;</description></item><item><title>AI #1 ML 방법론 기초</title><link>https://yshghid.github.io/docs/study/ai/ai36/</link><pubDate>Fri, 19 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai36/</guid><description>&lt;h1 id="ai-1-ml-방법론-기초"&gt;
 AI #1 ML 방법론 기초
 &lt;a class="anchor" href="#ai-1-ml-%eb%b0%a9%eb%b2%95%eb%a1%a0-%ea%b8%b0%ec%b4%88"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-19&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;#1 ML 방법론&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;통계기반 방법론은?
&lt;ul&gt;
&lt;li&gt;linear regression이나 logistic regression 같은걸 말함&lt;/li&gt;
&lt;li&gt;가설과 근거가 명확히 세워져 있고&lt;/li&gt;
&lt;li&gt;데이터가 알고리즘에 맞게 정제돼있고&lt;/li&gt;
&lt;li&gt;통계적 유의성으로 결과가 나오는 깔끔한 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ML 방법론은?
&lt;ul&gt;
&lt;li&gt;작은 경연을 열듯 시행착오를 거치며 가장 적합한 모델을 찾는다는 컨셉이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;#2 지도 비지도 준지도&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모두 입력 데이터에 존재하는 구조를 추론함&lt;/li&gt;
&lt;li&gt;준지도
&lt;ul&gt;
&lt;li&gt;이상 탐지: 처럼 라벨링 비용이 클때&lt;/li&gt;
&lt;li&gt;딥러닝: 은 파라미터 수가 많아 안정적인 학습을 위해 충분한 데이터가 필요한데
&lt;ul&gt;
&lt;li&gt;우선 라벨이 있는 데이터로 기본 학습을 진행하고 -&amp;gt; 라벨이 없는 데이터의 구조나 의사결정 경계를 활용해 모델을 보완함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;#3 regression, instance based algorithm&lt;/p&gt;</description></item><item><title>ML #1 Hyperparameter Optimization</title><link>https://yshghid.github.io/docs/study/ai/ai35/</link><pubDate>Tue, 16 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai35/</guid><description>&lt;h1 id="ml-1-hyperparameter-optimization"&gt;
 ML #1 Hyperparameter Optimization
 &lt;a class="anchor" href="#ml-1-hyperparameter-optimization"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-16&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-개요"&gt;
 1. 개요
 &lt;a class="anchor" href="#1-%ea%b0%9c%ec%9a%94"&gt;#&lt;/a&gt;
&lt;/h3&gt;</description></item><item><title>Langchain #1 (스터디) 노션 데이터로 나만의 RAG 시스템 구축하기</title><link>https://yshghid.github.io/docs/study/ai/ai32/</link><pubDate>Mon, 15 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai32/</guid><description>&lt;h1 id="langchain-1-스터디-노션-데이터로-나만의-rag-시스템-구축하기"&gt;
 Langchain #1 (스터디) 노션 데이터로 나만의 RAG 시스템 구축하기
 &lt;a class="anchor" href="#langchain-1-%ec%8a%a4%ed%84%b0%eb%94%94-%eb%85%b8%ec%85%98-%eb%8d%b0%ec%9d%b4%ed%84%b0%eb%a1%9c-%eb%82%98%eb%a7%8c%ec%9d%98-rag-%ec%8b%9c%ec%8a%a4%ed%85%9c-%ea%b5%ac%ec%b6%95%ed%95%98%ea%b8%b0"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-15&lt;/p&gt;
&lt;hr&gt;</description></item><item><title>Ray #1 (스터디) Batch Prediction with Ray Core</title><link>https://yshghid.github.io/docs/study/ai/ai34/</link><pubDate>Mon, 15 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai34/</guid><description>&lt;h1 id="ray-1-스터디-batch-prediction-with-ray-core"&gt;
 Ray #1 (스터디) Batch Prediction with Ray Core
 &lt;a class="anchor" href="#ray-1-%ec%8a%a4%ed%84%b0%eb%94%94-batch-prediction-with-ray-core"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-15&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;스터디때 준비해갔던 Ray Core를 사용해서 batch prediction 수행하는 예제!!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;batch prediction이 batch를 예측하는건줄알았는데(..) batch로 prediction하는것이었다.&lt;/li&gt;
&lt;li&gt;순서는 1. Task 기반 batch prediction 2. Actor 기반 batch prediction 3. GPU 기반 수행 코드&lt;/li&gt;
&lt;li&gt;출처는 Ray Document의 &lt;a href="https://docs.ray.io/en/latest/ray-core/examples/batch_prediction.html"&gt;Batch Prediction with Ray Core&lt;/a&gt;이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="0-개요"&gt;
 0. 개요
 &lt;a class="anchor" href="#0-%ea%b0%9c%ec%9a%94"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;목적
&lt;ul&gt;
&lt;li&gt;Parquet 형식의 대규모 데이터셋을 Ray를 이용해 분산 처리하며, 더미 모델을 로딩하여 배치 예측(batch prediction) 을 수행한다.&lt;/li&gt;
&lt;li&gt;Task와 Actor 두 가지 실행 방식을 비교하고, CPU/GPU 자원 활용 차이를 이해한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;설계
&lt;ul&gt;
&lt;li&gt;데이터셋 분할: S3에 저장된 Parquet 파일(12 shards)을 불러와 분산 태스크 단위로 처리&lt;/li&gt;
&lt;li&gt;모델 로딩: 더미 모델(load_model)을 정의하고 ray.put()을 통해 오브젝트 스토어에 1회 저장&lt;/li&gt;
&lt;li&gt;배치 예측(Task 기반): @ray.remote 태스크로 각 shard를 병렬 예측, 결과 크기 반환&lt;/li&gt;
&lt;li&gt;배치 예측(Actor 기반): BatchPredictor 클래스를 Ray Actor로 등록하고, ActorPool을 이용해 shard 분산 예측&lt;/li&gt;
&lt;li&gt;자원 활용(CPU/GPU): CPU 환경에서는 기본 Task 실행, GPU 환경에서는 @ray.remote(num_gpus=1)를 사용해 GPU에서 모델을 실행하도록 구성&lt;/li&gt;
&lt;li&gt;결과 확인: 각 shard에 대해 예측된 결과 크기를 출력하여 병렬 처리 동작을 검증&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="1-코드"&gt;
 1. 코드
 &lt;a class="anchor" href="#1-%ec%bd%94%eb%93%9c"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 0. 환경 준비&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;!&lt;/span&gt;pip &lt;span style="color:#f92672"&gt;-&lt;/span&gt;q install ray pandas pyarrow s3fs torch
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 1. Ray 초기화&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; ray
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ray&lt;span style="color:#f92672"&gt;.&lt;/span&gt;init()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 2. 더미 모델 정의&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; pandas &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; pd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; numpy &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; np
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;load_model&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# A dummy model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;model&lt;/span&gt;(batch: pd&lt;span style="color:#f92672"&gt;.&lt;/span&gt;DataFrame) &lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt; pd&lt;span style="color:#f92672"&gt;.&lt;/span&gt;DataFrame:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; model&lt;span style="color:#f92672"&gt;.&lt;/span&gt;payload &lt;span style="color:#f92672"&gt;=&lt;/span&gt; np&lt;span style="color:#f92672"&gt;.&lt;/span&gt;zeros(&lt;span style="color:#ae81ff"&gt;100_000_000&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; pd&lt;span style="color:#f92672"&gt;.&lt;/span&gt;DataFrame({&lt;span style="color:#e6db74"&gt;&amp;#34;score&amp;#34;&lt;/span&gt;: batch[&lt;span style="color:#e6db74"&gt;&amp;#34;passenger_count&amp;#34;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; model
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;실습에서는 분산 처리 흐름을 보는 것이 핵심이기 때문에 실제 모델이 갖는 특성을 갖는 더미 모델을 생성해준다.
&lt;ul&gt;
&lt;li&gt;실제 모델이 갖는 특성 = 정확히는 실제 모델이 갖는 특성 중 분산 처리에 관여하는 특성.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;실제 모델이 갖는 특성 2가지?
&lt;ol&gt;
&lt;li&gt;큰 메모리 용량. 실제 머신러닝 모델, 특히 딥러닝 모델은 수백 MB에서 수 GB에 달하는 가중치 파라미터를 담고 있다 예를 들어 BERT나 GPT 같은 모델은 엄청난 수의 파라미터를 갖기 때문에, 한 노드에서 다른 노드로 옮길 때 그 자체로 데이터 전송 비용이 크므로 이를 구현해준다.&lt;/li&gt;
&lt;li&gt;입력 데이터를 받아서 변환된 출력을 만듭니다. 실제 모델은 어떤 입력(이미지, 텍스트, 테이블 데이터 등)을 받아서 예측값을 내놓으므로, 이를 구현해줍니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;구현 방법?
&lt;ol&gt;
&lt;li&gt;model.payload = np.zeros(100_000_000)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;큰 메모리의 가중치 파라미터를 담고 있음을 모방하는 코드. 모델이 내부적으로 “큰 덩어리” 데이터를 가진 객체처럼 보이며 이를 통해 Ray가 이 모델을 여러 노드에 배포할 때 진짜처럼 부담을 준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="2"&gt;
&lt;li&gt;{&amp;ldquo;score&amp;rdquo;: batch[&amp;ldquo;passenger_count&amp;rdquo;] % 2 == 0}&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;입력값을 받아서 예측값을 내놓음을 모방하는 코드. 모델은 dataframe을 input으로 받아 승객 수가 짝수냐 홀수냐를 판별한다 즉 “입력 데이터를 보고 뭔가 계산해서 새로운 결과를 만든다”라는 모델의 핵심 행위만 구현한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;mark&gt;1. Task 기반 batch prediction&lt;/mark&gt;&lt;/p&gt;</description></item><item><title>AI #1 ML 방법론 기초</title><link>https://yshghid.github.io/docs/study/ai/ai33/</link><pubDate>Sat, 13 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai33/</guid><description>&lt;h1 id="ai-1-ml-방법론-기초"&gt;
 AI #1 ML 방법론 기초
 &lt;a class="anchor" href="#ai-1-ml-%eb%b0%a9%eb%b2%95%eb%a1%a0-%ea%b8%b0%ec%b4%88"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-13&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;#1 ML type (p.31-33)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ML의 학습방법 3가지
&lt;ul&gt;
&lt;li&gt;지도학습(Supervised)
&lt;ul&gt;
&lt;li&gt;입력 데이터와 출력 데이터가 모두 제공되고 모델은 입력을 보면 어떤 출력이 나와야 하는지를 배움. 학습한 모델은 새로운 데이터가 들어오면 예측을 하고 -&amp;gt; 결과를 실제 정답과 비교해 정확도 계산.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;비지도학습(Unsupervised)
&lt;ul&gt;
&lt;li&gt;문제는 있지만 정답 라벨이 없음. 비슷한 특징을 가진 학생들을 묶어서 그룹을 만들고 어떤 그룹이 우수한지 알 수 없지만 데이터 안에서 자연스럽게 나타나는 구조를 파악한다(클러스터링)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;준지도학습(Semi-Supervised)
&lt;ul&gt;
&lt;li&gt;라벨이 붙은 소량의 데이터와, 라벨이 없는 대량의 데이터를 동시에 사용하면 더 나은 모델을 만들 수 있다 왜냐하면 100% 라벨링된 데이터가 있을 때만큼 정확하지는 않지만, 현실에서는 라벨링이 부족한 경우가 많고 라벨 없는 데이터가 양은 많아서 데이터 분포를 더 잘 보여주기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;#2 머신러닝 알고리즘 (p.34)&lt;/p&gt;</description></item><item><title>Langchain #1 (스터디) 노션 데이터로 나만의 RAG 시스템 구축하기</title><link>https://yshghid.github.io/docs/study/ai/ai30/</link><pubDate>Wed, 10 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai30/</guid><description>&lt;h1 id="langchain-1-스터디-노션-데이터로-나만의-rag-시스템-구축하기"&gt;
 Langchain #1 (스터디) 노션 데이터로 나만의 RAG 시스템 구축하기
 &lt;a class="anchor" href="#langchain-1-%ec%8a%a4%ed%84%b0%eb%94%94-%eb%85%b8%ec%85%98-%eb%8d%b0%ec%9d%b4%ed%84%b0%eb%a1%9c-%eb%82%98%eb%a7%8c%ec%9d%98-rag-%ec%8b%9c%ec%8a%a4%ed%85%9c-%ea%b5%ac%ec%b6%95%ed%95%98%ea%b8%b0"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-10&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;스터디하는친구가 만들어준코드인데 내 노션으로 돌려봤다!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;실습 목적&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;노션 데이터를 &lt;mark&gt;임베딩 생성&lt;/mark&gt;하여 FAISS 벡터 스토어에 저장하고 이를 기반으로 &lt;mark&gt;유사 문서 검색&lt;/mark&gt;을 수행하며, &lt;mark&gt;청킹 기법&lt;/mark&gt;을 통해 데이터 구조를 이해하고 &lt;mark&gt;LLM 프롬프트 제약&lt;/mark&gt;을 적용한 뒤, RAG 구조를 접목해 &lt;mark&gt;자동 답변 구현&lt;/mark&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;실습 설계&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;mark&gt;임베딩 생성&lt;/mark&gt;: SentenceTransformer(&amp;ldquo;BAAI/bge-m3&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;&lt;mark&gt;유사 문서 검색&lt;/mark&gt;: 코사인 유사도 + FAISS 벡터 스토어 기반 최근접 탐색&lt;/li&gt;
&lt;li&gt;&lt;mark&gt;청킹 기법&lt;/mark&gt;: Markdown 단위 분리 + 길이 기반 추가 분할&lt;/li&gt;
&lt;li&gt;&lt;mark&gt;LLM 프롬프트 제약&lt;/mark&gt;: 근거 기반 답변(추측 금지 규칙 포함)&lt;/li&gt;
&lt;li&gt;&lt;mark&gt;자동 답변 구현&lt;/mark&gt;: RAG 구조 + &amp;ldquo;meta-llama/llama-3.1-8b-instruct&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사용한 노션 링크&lt;/p&gt;</description></item><item><title>ML #1</title><link>https://yshghid.github.io/docs/study/ai/ai31/</link><pubDate>Wed, 10 Sep 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai31/</guid><description>&lt;h1 id="ml-1"&gt;
 ML #1
 &lt;a class="anchor" href="#ml-1"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-09-10&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1"&gt;
 1
 &lt;a class="anchor" href="#1"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# !pip install numpy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# !pip install pandas&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# !pip install seaborn&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# !pip install matplotlib&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# !pip install -U scikit-learn&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# !pip install xgboost&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# !pip install lightgbm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; warnings
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; numpy &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; np
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; pandas &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; pd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; seaborn &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; sns
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; plt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; sklearn.datasets &lt;span style="color:#f92672"&gt;import&lt;/span&gt; load_diabetes
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; sklearn.model_selection &lt;span style="color:#f92672"&gt;import&lt;/span&gt; train_test_split
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; sklearn.metrics &lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; r2_score,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mean_squared_error,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; root_mean_squared_error,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mean_absolute_percentage_error,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;warnings&lt;span style="color:#f92672"&gt;.&lt;/span&gt;filterwarnings(&lt;span style="color:#e6db74"&gt;&amp;#34;ignore&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pd&lt;span style="color:#f92672"&gt;.&lt;/span&gt;set_option(&lt;span style="color:#e6db74"&gt;&amp;#34;display.max_columns&amp;#34;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pd&lt;span style="color:#f92672"&gt;.&lt;/span&gt;set_option(&lt;span style="color:#e6db74"&gt;&amp;#34;float_format&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{:.4f}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;format)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sns&lt;span style="color:#f92672"&gt;.&lt;/span&gt;set_style(&lt;span style="color:#e6db74"&gt;&amp;#34;whitegrid&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;RANDOM_STATE &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;42&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 1. Data Definition&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;_data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; load_diabetes()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(_data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;DESCR)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.. _diabetes_dataset:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Diabetes dataset
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;----------------
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Ten baseline variables, age, sex, body mass index, average blood
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pressure, and six blood serum measurements were obtained for each of n =
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;442 diabetes patients, as well as the response of interest, a
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;quantitative measure of disease progression one year after baseline.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;**Data Set Characteristics:**
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;:Number of Instances: 442
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;:Number of Attributes: First 10 columns are numeric predictive values
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;:Target: Column 11 is a quantitative measure of disease progression one year after baseline
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;:Attribute Information:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - age age in years
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - sex
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - bmi body mass index
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - bp average blood pressure
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - s1 tc, total serum cholesterol
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - s2 ldl, low-density lipoproteins
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - s3 hdl, high-density lipoproteins
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - s4 tch, total cholesterol / HDL
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - s5 ltg, possibly log of serum triglycerides level
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - s6 glu, blood sugar level
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Note: Each of these 10 feature variables have been mean centered and scaled by the standard deviation times the square root of `n_samples` (i.e. the sum of squares of each column totals 1).
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Source URL:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;https://www4.stat.ncsu.edu/~boos/var.select/diabetes.html
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;For more information see:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Bradley Efron, Trevor Hastie, Iain Johnstone and Robert Tibshirani (2004) &amp;#34;Least Angle Regression,&amp;#34; Annals of Statistics (with discussion), 407-499.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;(https://web.stanford.edu/~hastie/Papers/LARS/LeastAngle_2002.pdf)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; _data[&lt;span style="color:#e6db74"&gt;&amp;#34;data&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;feature_names &lt;span style="color:#f92672"&gt;=&lt;/span&gt; _data[&lt;span style="color:#e6db74"&gt;&amp;#34;feature_names&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;df &lt;span style="color:#f92672"&gt;=&lt;/span&gt; pd&lt;span style="color:#f92672"&gt;.&lt;/span&gt;DataFrame(data, columns&lt;span style="color:#f92672"&gt;=&lt;/span&gt;feature_names)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;df[&lt;span style="color:#e6db74"&gt;&amp;#34;target&amp;#34;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; _data[&lt;span style="color:#e6db74"&gt;&amp;#34;target&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;head()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 2. EDA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Correlation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;figure(figsize&lt;span style="color:#f92672"&gt;=&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sns&lt;span style="color:#f92672"&gt;.&lt;/span&gt;heatmap(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; data&lt;span style="color:#f92672"&gt;=&lt;/span&gt;df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;drop(&lt;span style="color:#e6db74"&gt;&amp;#34;target&amp;#34;&lt;/span&gt;, axis&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;corr(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; annot&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cmap&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;coolwarm&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;show()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 4. Machine Learning Regression&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Dataset Definition&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;X &lt;span style="color:#f92672"&gt;=&lt;/span&gt; df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;drop(&lt;span style="color:#e6db74"&gt;&amp;#34;target&amp;#34;&lt;/span&gt;, axis&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;y &lt;span style="color:#f92672"&gt;=&lt;/span&gt; df[&lt;span style="color:#e6db74"&gt;&amp;#34;target&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 먼저 train+valid와 test로 분할 (80:20)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;X_temp, X_test, y_temp, y_test &lt;span style="color:#f92672"&gt;=&lt;/span&gt; train_test_split(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; X, y, test_size&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0.2&lt;/span&gt;, random_state&lt;span style="color:#f92672"&gt;=&lt;/span&gt;RANDOM_STATE
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# train+valid를 다시 train과 valid로 분할 (75:25)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;X_train, X_valid, y_train, y_valid &lt;span style="color:#f92672"&gt;=&lt;/span&gt; train_test_split(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; X_temp, y_temp, test_size&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0.25&lt;/span&gt;, random_state&lt;span style="color:#f92672"&gt;=&lt;/span&gt;RANDOM_STATE
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;데이터 분할 결과:&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Train: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;len(X_train)&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt; (&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;len(X_train)&lt;span style="color:#f92672"&gt;/&lt;/span&gt;len(X)&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;&lt;span style="color:#e6db74"&gt;:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;.1f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%)&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Valid: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;len(X_valid)&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt; (&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;len(X_valid)&lt;span style="color:#f92672"&gt;/&lt;/span&gt;len(X)&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;&lt;span style="color:#e6db74"&gt;:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;.1f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%)&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Test: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;len(X_test)&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt; (&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;len(X_test)&lt;span style="color:#f92672"&gt;/&lt;/span&gt;len(X)&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;&lt;span style="color:#e6db74"&gt;:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;.1f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%)&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;데이터 분할 결과:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Train: 264 (59.7%)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Valid: 89 (20.1%)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Test: 89 (20.1%)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Model (Vanila)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; sklearn.tree &lt;span style="color:#f92672"&gt;import&lt;/span&gt; DecisionTreeRegressor
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;model &lt;span style="color:#f92672"&gt;=&lt;/span&gt; DecisionTreeRegressor(random_state&lt;span style="color:#f92672"&gt;=&lt;/span&gt;RANDOM_STATE)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;model&lt;span style="color:#f92672"&gt;.&lt;/span&gt;fit(X_train, y_train)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;model&lt;span style="color:#f92672"&gt;.&lt;/span&gt;score(X_train, y_train)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(model&lt;span style="color:#f92672"&gt;.&lt;/span&gt;intercept_, model&lt;span style="color:#f92672"&gt;.&lt;/span&gt;coef_)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;1.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Feature Importance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;model&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feature_importances_
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;feature_names
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;_feature_importances &lt;span style="color:#f92672"&gt;=&lt;/span&gt; pd&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Series(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; model&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feature_importances_,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; index&lt;span style="color:#f92672"&gt;=&lt;/span&gt;feature_names,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;_feature_importances
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;array([0.08981708, 0.00592253, 0.43861624, 0.08517564, 0.04463861,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 0.04418316, 0.05650334, 0.05949104, 0.13289137, 0.04276099])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;[&amp;#39;age&amp;#39;, &amp;#39;sex&amp;#39;, &amp;#39;bmi&amp;#39;, &amp;#39;bp&amp;#39;, &amp;#39;s1&amp;#39;, &amp;#39;s2&amp;#39;, &amp;#39;s3&amp;#39;, &amp;#39;s4&amp;#39;, &amp;#39;s5&amp;#39;, &amp;#39;s6&amp;#39;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;age 0.0898
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sex 0.0059
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;bmi 0.4386
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;bp 0.0852
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;s1 0.0446
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;s2 0.0442
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;s3 0.0565
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;s4 0.0595
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;s5 0.1329
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;s6 0.0428
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;dtype: float64
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;_feature_importances&lt;span style="color:#f92672"&gt;.&lt;/span&gt;nlargest()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;plot(kind&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;barh&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Prediction&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 각 셋에 대한 예측&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;y_train_pred &lt;span style="color:#f92672"&gt;=&lt;/span&gt; model&lt;span style="color:#f92672"&gt;.&lt;/span&gt;predict(X_train)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;y_valid_pred &lt;span style="color:#f92672"&gt;=&lt;/span&gt; model&lt;span style="color:#f92672"&gt;.&lt;/span&gt;predict(X_valid)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;y_test_pred &lt;span style="color:#f92672"&gt;=&lt;/span&gt; model&lt;span style="color:#f92672"&gt;.&lt;/span&gt;predict(X_test)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 각 셋의 성능 평가&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;calculate_metrics&lt;/span&gt;(y_true, y_pred, set_name):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; r2 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; r2_score(y_true, y_pred)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mse &lt;span style="color:#f92672"&gt;=&lt;/span&gt; mean_squared_error(y_true, y_pred)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; rmse &lt;span style="color:#f92672"&gt;=&lt;/span&gt; root_mean_squared_error(y_true, y_pred)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mape &lt;span style="color:#f92672"&gt;=&lt;/span&gt; mean_absolute_percentage_error(y_true, y_pred)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;Set&amp;#39;&lt;/span&gt;: set_name,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;R²&amp;#39;&lt;/span&gt;: r2,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;MSE&amp;#39;&lt;/span&gt;: mse,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;RMSE&amp;#39;&lt;/span&gt;: rmse,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;MAPE&amp;#39;&lt;/span&gt;: mape
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 모든 셋의 성능 계산&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;train_metrics &lt;span style="color:#f92672"&gt;=&lt;/span&gt; calculate_metrics(y_train, y_train_pred, &lt;span style="color:#e6db74"&gt;&amp;#39;Train&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;valid_metrics &lt;span style="color:#f92672"&gt;=&lt;/span&gt; calculate_metrics(y_valid, y_valid_pred, &lt;span style="color:#e6db74"&gt;&amp;#39;Valid&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;test_metrics &lt;span style="color:#f92672"&gt;=&lt;/span&gt; calculate_metrics(y_test, y_test_pred, &lt;span style="color:#e6db74"&gt;&amp;#39;Test&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 결과를 DataFrame으로 정리&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;results_df &lt;span style="color:#f92672"&gt;=&lt;/span&gt; pd&lt;span style="color:#f92672"&gt;.&lt;/span&gt;DataFrame([train_metrics, valid_metrics, test_metrics])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;results_df &lt;span style="color:#f92672"&gt;=&lt;/span&gt; results_df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;set_index(&lt;span style="color:#e6db74"&gt;&amp;#39;Set&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;&amp;#34;=== Train/Valid/Test 셋 성능 비교 ===&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(results_df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;round(&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;=== Train/Valid/Test 셋 성능 비교 ===
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; R² MSE RMSE MAPE
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Set 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Train 1.0000 0.0000 0.0000 0.0000
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Valid 0.2095 4330.7978 65.8088 0.3744
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Test -0.2659 6706.9101 81.8957 0.5430
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Metrics&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 과적합 분석&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;=== 과적합 분석 ===&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;train_valid_r2_diff &lt;span style="color:#f92672"&gt;=&lt;/span&gt; train_metrics[&lt;span style="color:#e6db74"&gt;&amp;#39;R²&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; valid_metrics[&lt;span style="color:#e6db74"&gt;&amp;#39;R²&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;valid_test_r2_diff &lt;span style="color:#f92672"&gt;=&lt;/span&gt; valid_metrics[&lt;span style="color:#e6db74"&gt;&amp;#39;R²&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; test_metrics[&lt;span style="color:#e6db74"&gt;&amp;#39;R²&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Train-Valid R² 차이: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;train_valid_r2_diff&lt;span style="color:#e6db74"&gt;:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;.4f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Valid-Test R² 차이: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;valid_test_r2_diff&lt;span style="color:#e6db74"&gt;:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;.4f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;=== 과적합 분석 ===
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Train-Valid R² 차이: 0.7905
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Valid-Test R² 차이: 0.4754
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;임계값 0.1&lt;/p&gt;</description></item><item><title>Ray #1 개요</title><link>https://yshghid.github.io/docs/study/ai/ai29/</link><pubDate>Wed, 27 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai29/</guid><description>&lt;h1 id="ray-1-개요"&gt;
 Ray #1 개요
 &lt;a class="anchor" href="#ray-1-%ea%b0%9c%ec%9a%94"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-08-27&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-분산-처리의-필요성"&gt;
 1. 분산 처리의 필요성
 &lt;a class="anchor" href="#1-%eb%b6%84%ec%82%b0-%ec%b2%98%eb%a6%ac%ec%9d%98-%ed%95%84%ec%9a%94%ec%84%b1"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;mark&gt;#1 기존 분산처리 방식&lt;/mark&gt;&lt;/p&gt;</description></item><item><title>Langflow #2 구현</title><link>https://yshghid.github.io/docs/study/ai/ai28/</link><pubDate>Tue, 26 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai28/</guid><description>&lt;h1 id="langflow-2-구현"&gt;
 Langflow #2 구현
 &lt;a class="anchor" href="#langflow-2-%ea%b5%ac%ed%98%84"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-08-26&lt;/p&gt;
&lt;hr&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;backend/
 ├─ app.py # FastAPI 메인 엔트리 (엔드포인트 정의)
 ├─ chains/
 │ ├─ __init__.py
 │ ├─ step1_intake.py # IntakeChain
 │ ├─ step2_classify.py # ClassifierChain
 │ ├─ step3_probe.py # ProbePlannerChain
 │ ├─ step4_evidence.py # EvidenceValidateChain
 │ ├─ step5_diagnose.py # DiagnoseChain
 │ ├─ step6_safety.py # SafetyChain
 │ └─ pipeline.py # 전체 SequentialChain or loop 파이프라인
 ├─ requirements.txt # langchain, fastapi, uvicorn, openai, faiss 등
 └─ README.md
&lt;/code&gt;&lt;/pre&gt;</description></item><item><title>Langflow #1 개념 + 에이전트 구상</title><link>https://yshghid.github.io/docs/study/ai/ai27/</link><pubDate>Mon, 25 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai27/</guid><description>&lt;h1 id="langflow-1-개념--에이전트-구상"&gt;
 Langflow #1 개념 + 에이전트 구상
 &lt;a class="anchor" href="#langflow-1-%ea%b0%9c%eb%85%90--%ec%97%90%ec%9d%b4%ec%a0%84%ed%8a%b8-%ea%b5%ac%ec%83%81"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-08-24&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-개념"&gt;
 1. 개념
 &lt;a class="anchor" href="#1-%ea%b0%9c%eb%85%90"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;#1 정의&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LangChain/LLM/RAG/에이전트 구성요소를 노드로 배치하고 포트를 선으로 연결해 DAG(방향 비순환 그래프) 형태로 실행하는 도구.&lt;/li&gt;
&lt;li&gt;각 노드는 입력·출력 타입(텍스트, JSON/Dict, 문서 리스트 등)이 있고, 파라미터(모델명, 온도, top-k, 임베딩 차원 등)를 가진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#2 주요 노드&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Input/UI 노드: 사용자의 프롬프트·폼 입력을 받음.&lt;/li&gt;
&lt;li&gt;Python Function: 규칙/후처리/포맷 변환 등 로직을 코드로 구현(결정적 처리에 적합).&lt;/li&gt;
&lt;li&gt;LLM 노드: gpt-4o-mini, GPT-5 Thinking 등 대규모 언어모델 호출.&lt;/li&gt;
&lt;li&gt;Prompt/Template: 시스템/사용자 프롬프트를 변수 바인딩해 구성.&lt;/li&gt;
&lt;li&gt;Embedding &amp;amp; Vector Store: text-embedding-3-large + PGVector 같은 벡터 인덱스 검색.&lt;/li&gt;
&lt;li&gt;Retriever/RAG 노드: 쿼리 → 벡터 검색 → 컨텍스트 반환.&lt;/li&gt;
&lt;li&gt;Guard/Safety(파이썬 규칙): 위험 명령 차단 등 정책 적용.&lt;/li&gt;
&lt;li&gt;Output 노드: JSON/텍스트/스트리밍 형태로 결과를 반환.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#3 구현하려는것&lt;/p&gt;</description></item><item><title>MLflow #2 mlflow 파이프라인</title><link>https://yshghid.github.io/docs/study/ai/ai25/</link><pubDate>Fri, 22 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai25/</guid><description>&lt;h1 id="mlflow-2-mlflow-파이프라인"&gt;
 MLflow #2 mlflow 파이프라인
 &lt;a class="anchor" href="#mlflow-2-mlflow-%ed%8c%8c%ec%9d%b4%ed%94%84%eb%9d%bc%ec%9d%b8"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-08-22&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-코드"&gt;
 1. 코드
 &lt;a class="anchor" href="#1-%ec%bd%94%eb%93%9c"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;mark&gt;#1 트래킹 서버 설정&lt;/mark&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; os
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; mlflow
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 1. 로그를 저장할 서버/위치 지정&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mlflow&lt;span style="color:#f92672"&gt;.&lt;/span&gt;set_tracking_uri(uri&lt;span style="color:#f92672"&gt;=&lt;/span&gt;os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getenv(&lt;span style="color:#e6db74"&gt;&amp;#34;MLFLOW_TRACKING_URI&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;)) &lt;span style="color:#75715e"&gt;# MLFLOW_TRACKING_URI로 MLflow 서버를 연결&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;current_uri &lt;span style="color:#f92672"&gt;=&lt;/span&gt; mlflow&lt;span style="color:#f92672"&gt;.&lt;/span&gt;get_tracking_uri()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Current Tracking URI: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;current_uri&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;mark&gt;#2 Experiment 생성&lt;/mark&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 2. Experiment 생성&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;experiment &lt;span style="color:#f92672"&gt;=&lt;/span&gt; mlflow&lt;span style="color:#f92672"&gt;.&lt;/span&gt;set_experiment(&lt;span style="color:#e6db74"&gt;&amp;#34;new_experiment&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Experiment ID: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;experiment&lt;span style="color:#f92672"&gt;.&lt;/span&gt;experiment_id&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Experiment Name: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;experiment&lt;span style="color:#f92672"&gt;.&lt;/span&gt;name&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Artifact Location: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;experiment&lt;span style="color:#f92672"&gt;.&lt;/span&gt;artifact_location&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Lifecycle Stage: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;experiment&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lifecycle_stage&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Experiment ID: 2
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Experiment Name: new_experiment
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Artifact Location: /mlflow/mlruns/2
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Lifecycle Stage: active
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;mark&gt;#3 information 확인, 로그 기록&lt;/mark&gt;&lt;/p&gt;</description></item><item><title>MLflow #3</title><link>https://yshghid.github.io/docs/study/ai/ai26/</link><pubDate>Fri, 22 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai26/</guid><description>&lt;h1 id="mlflow-3"&gt;
 MLflow #3
 &lt;a class="anchor" href="#mlflow-3"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-08-22&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-개념"&gt;
 1. 개념
 &lt;a class="anchor" href="#1-%ea%b0%9c%eb%85%90"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MLflow: 머신러닝 실험을 관리하기 위한 플랫폼. 모델을 학습하는 과정에서 파라미터, 메트릭, 아티팩트, 실행(run) 기록을 남긴다.&lt;/li&gt;
&lt;li&gt;run(실행 단위): 하나의 학습 또는 실험 과정&lt;/li&gt;
&lt;li&gt;start_run / end_run: 새로운 run을 열고 닫는 과정&lt;/li&gt;
&lt;li&gt;active_run: 현재 열려 있는 run&lt;/li&gt;
&lt;li&gt;last_active_run: 최근에 끝났거나 여전히 열려 있는 run&lt;/li&gt;
&lt;li&gt;log_param / log_metric: 하이퍼파라미터나 성능 지표를 기록하는 함수&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="2-코드"&gt;
 2. 코드
 &lt;a class="anchor" href="#2-%ec%bd%94%eb%93%9c"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;mark&gt;#1 active_run.py&lt;/mark&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; mlflow
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Start and end a run&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;with&lt;/span&gt; mlflow&lt;span style="color:#f92672"&gt;.&lt;/span&gt;start_run(): &lt;span style="color:#75715e"&gt;# 새로운 run을 시작&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mlflow&lt;span style="color:#f92672"&gt;.&lt;/span&gt;log_param(&lt;span style="color:#e6db74"&gt;&amp;#34;param1&amp;#34;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;42&lt;/span&gt;) &lt;span style="color:#75715e"&gt;# 현재 run에 &amp;#34;param1&amp;#34; = 42라는 파라미터 기록&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# The run is active within this block&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Active run ID inside the block: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;mlflow&lt;span style="color:#f92672"&gt;.&lt;/span&gt;active_run()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;info&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run_id&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;) &lt;span style="color:#75715e"&gt;# 현재 실행 중인 run&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Now the run is ended&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Active run after block: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;mlflow&lt;span style="color:#f92672"&gt;.&lt;/span&gt;active_run()&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;) &lt;span style="color:#75715e"&gt;# None: 이미 run이 종료되었기 때문에 mlflow.active_run()은 None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Last active run after block: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;mlflow&lt;span style="color:#f92672"&gt;.&lt;/span&gt;last_active_run()&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;) &lt;span style="color:#75715e"&gt;# Should not be None: 방금 끝난 run 객체를 반환하므로, None이 아니라 마지막 run의 메타데이터.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# We can still access the last run’s ID:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;last_run &lt;span style="color:#f92672"&gt;=&lt;/span&gt; mlflow&lt;span style="color:#f92672"&gt;.&lt;/span&gt;last_active_run()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; last_run:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Last run ID: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;last_run&lt;span style="color:#f92672"&gt;.&lt;/span&gt;info&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run_id&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;) &lt;span style="color:#75715e"&gt;# 마지막 run의 ID&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;현재 run과 최근 run을 구분해서 관리.&lt;/p&gt;</description></item><item><title>MLflow #1 설치 &amp; 실습</title><link>https://yshghid.github.io/docs/study/ai/ai24/</link><pubDate>Thu, 21 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai24/</guid><description>&lt;h1 id="mlflow-1-설치--실습"&gt;
 MLflow #1 설치 &amp;amp; 실습
 &lt;a class="anchor" href="#mlflow-1-%ec%84%a4%ec%b9%98--%ec%8b%a4%ec%8a%b5"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-08-21&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-mlflow-설치-및-docker-띄우기"&gt;
 1. mlflow 설치 및 docker 띄우기
 &lt;a class="anchor" href="#1-mlflow-%ec%84%a4%ec%b9%98-%eb%b0%8f-docker-%eb%9d%84%ec%9a%b0%ea%b8%b0"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ export CR_PAT&lt;span style="color:#f92672"&gt;=&lt;/span&gt;* &lt;span style="color:#75715e"&gt;# *: github token 블라인드 처리&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ echo $CR_PAT | docker login ghcr.io -u yshghid --password-stdin
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Login Succeeded
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;로그인햇으면 도커를 켠다음에 다음을 수행.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ docker pull ghcr.io/mlflow/mlflow:v2.0.1
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;v2.0.1: Pulling from mlflow/mlflow
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;7a6db449b51b: Pull complete 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;e238bceb2957: Pull complete 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ce77f44508b5: Pull complete 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;455a39ac3ab8: Pull complete 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;f8c2fbfe5046: Pull complete 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;60e3c6e8536b: Pull complete 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Digest: sha256:1e1f28a6134e7e6c4b0d0a4f5f8647ff31c953ad53eb3bb5af4c51ae4e8dd14d
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Status: Downloaded newer image &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; ghcr.io/mlflow/mlflow:v2.0.1
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ghcr.io/mlflow/mlflow:v2.0.1
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ docker image ls | grep mlflow
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ghcr.io/mlflow/mlflow v2.0.1 35853aa42ccd &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; years ago 905MB
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;확인해보면 제대로 떠있다!!&lt;/p&gt;</description></item><item><title>LLM #2 LLM과 AI 기술요소를 활용하여 비즈니스 서비스 기획안 작성</title><link>https://yshghid.github.io/docs/study/ai/ai23/</link><pubDate>Tue, 19 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai23/</guid><description>&lt;h1 id="llm-2-llm과-ai-기술요소를-활용하여-비즈니스-서비스-기획안-작성"&gt;
 LLM #2 LLM과 AI 기술요소를 활용하여 비즈니스 서비스 기획안 작성
 &lt;a class="anchor" href="#llm-2-llm%ea%b3%bc-ai-%ea%b8%b0%ec%88%a0%ec%9a%94%ec%86%8c%eb%a5%bc-%ed%99%9c%ec%9a%a9%ed%95%98%ec%97%ac-%eb%b9%84%ec%a6%88%eb%8b%88%ec%8a%a4-%ec%84%9c%eb%b9%84%ec%8a%a4-%ea%b8%b0%ed%9a%8d%ec%95%88-%ec%9e%91%ec%84%b1"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-08-19&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-목적"&gt;
 1. 목적
 &lt;a class="anchor" href="#1-%eb%aa%a9%ec%a0%81"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;등기부등본/건축물대장 업로드 시 AI가 자동으로 문서를 분석하여 전세사기 위험 요소를 탐지하고 수치화한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="2-모델-구성도"&gt;
 2. 모델 구성도
 &lt;a class="anchor" href="#2-%eb%aa%a8%eb%8d%b8-%ea%b5%ac%ec%84%b1%eb%8f%84"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;#1 데이터 수집및 정규화&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기술요소: PaddleOCR&lt;/li&gt;
&lt;li&gt;선택 이유: 한국어 인식 정확도와 속도가 좋고, 오픈소스+온프레미스 운영 가능(비용·보안 유리), 표 레이아웃/좌표 추출 지원.&lt;/li&gt;
&lt;li&gt;입력
&lt;ul&gt;
&lt;li&gt;파일: PDF/스캔 이미지(JPG/PNG)&lt;/li&gt;
&lt;li&gt;매개변수: lang=&amp;ldquo;korean&amp;rdquo;, det+rec 사용, dpi(≥300)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;출력
&lt;ul&gt;
&lt;li&gt;텍스트 블록: [{page, bbox, text}]&lt;/li&gt;
&lt;li&gt;정규화 결과: 주소/금액/날짜/권리유형 표준화(JSON)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#2 위험 특약/권리 분석&lt;/p&gt;</description></item><item><title>데이터분석 #4 리뷰 데이터 분석</title><link>https://yshghid.github.io/docs/study/ai/ai22/</link><pubDate>Tue, 19 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai22/</guid><description>&lt;h1 id="데이터분석-4-리뷰-데이터-분석"&gt;
 데이터분석 #4 리뷰 데이터 분석
 &lt;a class="anchor" href="#%eb%8d%b0%ec%9d%b4%ed%84%b0%eb%b6%84%ec%84%9d-4-%eb%a6%ac%eb%b7%b0-%eb%8d%b0%ec%9d%b4%ed%84%b0-%eb%b6%84%ec%84%9d"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-08-19&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-목적"&gt;
 1. 목적
 &lt;a class="anchor" href="#1-%eb%aa%a9%ec%a0%81"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;리뷰 데이터를 보고&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;감성 점수와 평점의 관계&lt;/li&gt;
&lt;li&gt;리뷰 길이와 감성 점수의 관계&lt;/li&gt;
&lt;li&gt;카테고리별 감성 차이&lt;/li&gt;
&lt;li&gt;Review_length가 AI 임베딩 유사도에 영향을 줄 수 있는지&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;인사이트 생성하기.&lt;/p&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="2-코드"&gt;
 2. 코드
 &lt;a class="anchor" href="#2-%ec%bd%94%eb%93%9c"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; os
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; pandas &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; pd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; numpy &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; np
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; seaborn &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; sns
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; plt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; plt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; matplotlib &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; mpl
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; sentence_transformers &lt;span style="color:#f92672"&gt;import&lt;/span&gt; SentenceTransformer, util
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Mac 환경 한글 폰트 설정&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;rc(&lt;span style="color:#e6db74"&gt;&amp;#39;font&amp;#39;&lt;/span&gt;, family&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;AppleGothic&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mpl&lt;span style="color:#f92672"&gt;.&lt;/span&gt;rcParams[&lt;span style="color:#e6db74"&gt;&amp;#39;axes.unicode_minus&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Set path&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;chdir(&lt;span style="color:#e6db74"&gt;&amp;#34;/Users/yshmbid/Documents/home/github/Data-MLOps/0814&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getcwd()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;#39;/Users/yshmbid/Documents/home/github/Data-MLOps/0814&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 1. 데이터 불러오기&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;df &lt;span style="color:#f92672"&gt;=&lt;/span&gt; pd&lt;span style="color:#f92672"&gt;.&lt;/span&gt;read_csv(&lt;span style="color:#e6db74"&gt;&amp;#39;reviews.csv&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;df
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img width="1724" height="602" alt="image" src="https://github.com/user-attachments/assets/6fe14386-26a9-4388-841c-04e2c26bc982" /&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 2. 결측치 및 기본 정보 확인&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;&amp;#34;결측치 개수:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;isnull()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sum())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;데이터 기본 정보:&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;info())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 결측치 처리: review_text 또는 sentiment_score 중 하나라도 결측인 행 제거&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;before_rows &lt;span style="color:#f92672"&gt;=&lt;/span&gt; df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;shape[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;df &lt;span style="color:#f92672"&gt;=&lt;/span&gt; df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dropna(subset&lt;span style="color:#f92672"&gt;=&lt;/span&gt;[&lt;span style="color:#e6db74"&gt;&amp;#39;review_text&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;sentiment_score&amp;#39;&lt;/span&gt;], how&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;any&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;after_rows &lt;span style="color:#f92672"&gt;=&lt;/span&gt; df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;shape[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;제거된 행 수: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;before_rows &lt;span style="color:#f92672"&gt;-&lt;/span&gt; after_rows&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt; (&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;(before_rows &lt;span style="color:#f92672"&gt;-&lt;/span&gt; after_rows) &lt;span style="color:#f92672"&gt;/&lt;/span&gt; before_rows &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;&lt;span style="color:#e6db74"&gt;:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;.1f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;% 데이터 손실)&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;남은 데이터 수: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;after_rows&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;개&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;결측치 개수:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; review_id 0
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;product_id 0
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;category 0
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;review_text 5
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;review_length 0
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;num_words 0
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sentiment_score 5
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rating 0
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;dtype: int64
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;데이터 기본 정보:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;class &amp;#39;pandas.core.frame.DataFrame&amp;#39;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;RangeIndex: 200 entries, 0 to 199
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Data columns (total 8 columns):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; # Column Non-Null Count Dtype 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;--- ------ -------------- ----- 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 0 review_id 200 non-null object 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 1 product_id 200 non-null object 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 2 category 200 non-null object 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 3 review_text 195 non-null object 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 4 review_length 200 non-null int64 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 5 num_words 200 non-null int64 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 6 sentiment_score 195 non-null float64
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 7 rating 200 non-null int64 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;None
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;제거된 행 수: 10 (5.0% 데이터 손실)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;남은 데이터 수: 190개
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 3. 분포 시각화 및 이상치 탐지&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 수치형 컬럼만 선택&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;numeric_cols &lt;span style="color:#f92672"&gt;=&lt;/span&gt; df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;select_dtypes(include&lt;span style="color:#f92672"&gt;=&lt;/span&gt;[&lt;span style="color:#e6db74"&gt;&amp;#39;int64&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;float64&amp;#39;&lt;/span&gt;])&lt;span style="color:#f92672"&gt;.&lt;/span&gt;columns
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 히스토그램 (분포 확인)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;fig, axes &lt;span style="color:#f92672"&gt;=&lt;/span&gt; plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;subplots(nrows&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, ncols&lt;span style="color:#f92672"&gt;=&lt;/span&gt;len(numeric_cols), figsize&lt;span style="color:#f92672"&gt;=&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;&lt;span style="color:#f92672"&gt;*&lt;/span&gt;len(numeric_cols), &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; ax, col &lt;span style="color:#f92672"&gt;in&lt;/span&gt; zip(axes, numeric_cols):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sns&lt;span style="color:#f92672"&gt;.&lt;/span&gt;histplot(df[col], kde&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;, ax&lt;span style="color:#f92672"&gt;=&lt;/span&gt;ax)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ax&lt;span style="color:#f92672"&gt;.&lt;/span&gt;set_title(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;col&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt; Distribution&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;tight_layout()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;show()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 박스플롯 (이상치 확인)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;fig, axes &lt;span style="color:#f92672"&gt;=&lt;/span&gt; plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;subplots(nrows&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, ncols&lt;span style="color:#f92672"&gt;=&lt;/span&gt;len(numeric_cols), figsize&lt;span style="color:#f92672"&gt;=&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;&lt;span style="color:#f92672"&gt;*&lt;/span&gt;len(numeric_cols), &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; ax, col &lt;span style="color:#f92672"&gt;in&lt;/span&gt; zip(axes, numeric_cols):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sns&lt;span style="color:#f92672"&gt;.&lt;/span&gt;boxplot(x&lt;span style="color:#f92672"&gt;=&lt;/span&gt;df[col], ax&lt;span style="color:#f92672"&gt;=&lt;/span&gt;ax)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ax&lt;span style="color:#f92672"&gt;.&lt;/span&gt;set_title(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;col&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt; Boxplot&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;tight_layout()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;show()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img width="3138" height="1278" alt="image" src="https://github.com/user-attachments/assets/80182a81-c7aa-4640-8526-7bca90b936f8" /&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 이상치 처리&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;df_clean &lt;span style="color:#f92672"&gt;=&lt;/span&gt; df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;copy()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# review_length 상하위 1% 제거&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;lower_bound &lt;span style="color:#f92672"&gt;=&lt;/span&gt; df_clean[&lt;span style="color:#e6db74"&gt;&amp;#39;review_length&amp;#39;&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;quantile(&lt;span style="color:#ae81ff"&gt;0.01&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;upper_bound &lt;span style="color:#f92672"&gt;=&lt;/span&gt; df_clean[&lt;span style="color:#e6db74"&gt;&amp;#39;review_length&amp;#39;&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;quantile(&lt;span style="color:#ae81ff"&gt;0.99&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;df_clean &lt;span style="color:#f92672"&gt;=&lt;/span&gt; df_clean[(df_clean[&lt;span style="color:#e6db74"&gt;&amp;#39;review_length&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; lower_bound) &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; (df_clean[&lt;span style="color:#e6db74"&gt;&amp;#39;review_length&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; upper_bound)]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# num_words 상하위 1% 제거&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;lower_bound &lt;span style="color:#f92672"&gt;=&lt;/span&gt; df_clean[&lt;span style="color:#e6db74"&gt;&amp;#39;num_words&amp;#39;&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;quantile(&lt;span style="color:#ae81ff"&gt;0.01&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;upper_bound &lt;span style="color:#f92672"&gt;=&lt;/span&gt; df_clean[&lt;span style="color:#e6db74"&gt;&amp;#39;num_words&amp;#39;&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;quantile(&lt;span style="color:#ae81ff"&gt;0.99&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;df_clean &lt;span style="color:#f92672"&gt;=&lt;/span&gt; df_clean[(df_clean[&lt;span style="color:#e6db74"&gt;&amp;#39;num_words&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; lower_bound) &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; (df_clean[&lt;span style="color:#e6db74"&gt;&amp;#39;num_words&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; upper_bound)]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;&amp;#34;상하위 1% 절삭 후 데이터 크기:&amp;#34;&lt;/span&gt;, df_clean&lt;span style="color:#f92672"&gt;.&lt;/span&gt;shape)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;상하위 &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;span style="color:#f92672"&gt;%&lt;/span&gt; 절삭 후 데이터 크기: (&lt;span style="color:#ae81ff"&gt;184&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 4. 범주별 평균 평점&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;category_mean_rating &lt;span style="color:#f92672"&gt;=&lt;/span&gt; df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;groupby(&lt;span style="color:#e6db74"&gt;&amp;#39;category&amp;#39;&lt;/span&gt;)[&lt;span style="color:#e6db74"&gt;&amp;#39;rating&amp;#39;&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;mean()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sort_values(ascending&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(category_mean_rating)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 시각화&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;figure(figsize&lt;span style="color:#f92672"&gt;=&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sns&lt;span style="color:#f92672"&gt;.&lt;/span&gt;barplot(x&lt;span style="color:#f92672"&gt;=&lt;/span&gt;category_mean_rating&lt;span style="color:#f92672"&gt;.&lt;/span&gt;index, y&lt;span style="color:#f92672"&gt;=&lt;/span&gt;category_mean_rating&lt;span style="color:#f92672"&gt;.&lt;/span&gt;values)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;title(&lt;span style="color:#e6db74"&gt;&amp;#34;Category별 평균 평점&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;show()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;category
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;electronics 3.764706
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;home 3.500000
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;fashion 3.469388
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sports 3.285714
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Name: rating, dtype: float64
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img width="2262" height="814" alt="image" src="https://github.com/user-attachments/assets/6c9ba31e-696d-4cd9-a60e-0ac19e40488b" /&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 5. Sentiment Score vs Rating&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;figure(figsize&lt;span style="color:#f92672"&gt;=&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sns&lt;span style="color:#f92672"&gt;.&lt;/span&gt;scatterplot(data&lt;span style="color:#f92672"&gt;=&lt;/span&gt;df, x&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;sentiment_score&amp;#39;&lt;/span&gt;, y&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;rating&amp;#39;&lt;/span&gt;, alpha&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0.5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;title(&lt;span style="color:#e6db74"&gt;&amp;#34;감성 점수 vs 평점&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;show()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 상관계수 확인&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;corr_sentiment_rating &lt;span style="color:#f92672"&gt;=&lt;/span&gt; df[&lt;span style="color:#e6db74"&gt;&amp;#39;sentiment_score&amp;#39;&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;corr(df[&lt;span style="color:#e6db74"&gt;&amp;#39;rating&amp;#39;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;&amp;#34;감성 점수와 평점의 상관계수:&amp;#34;&lt;/span&gt;, corr_sentiment_rating)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;감성 점수와 평점의 상관계수: -0.020926485382556512
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img width="2332" height="814" alt="image" src="https://github.com/user-attachments/assets/aa8e268d-49be-4197-9d5c-e2156f1f2664" /&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 6. Review Length vs Rating (violinplot)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;figure(figsize&lt;span style="color:#f92672"&gt;=&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sns&lt;span style="color:#f92672"&gt;.&lt;/span&gt;violinplot(data&lt;span style="color:#f92672"&gt;=&lt;/span&gt;df, x&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;rating&amp;#39;&lt;/span&gt;, y&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;review_length&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;title(&lt;span style="color:#e6db74"&gt;&amp;#34;리뷰 길이 vs 평점&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;show()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 상관계수 확인&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;corr_length_rating &lt;span style="color:#f92672"&gt;=&lt;/span&gt; df[&lt;span style="color:#e6db74"&gt;&amp;#39;review_length&amp;#39;&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;corr(df[&lt;span style="color:#e6db74"&gt;&amp;#39;rating&amp;#39;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;&amp;#34;리뷰 길이와 평점의 상관계수:&amp;#34;&lt;/span&gt;, corr_length_rating)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;리뷰 길이와 평점의 상관계수: &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0.018622392015914393&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img width="2504" height="816" alt="image" src="https://github.com/user-attachments/assets/7ef0e4f3-207e-430a-a575-8ed36dc8802e" /&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 7. Category별 평균 Sentiment Score&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;category_sentiment &lt;span style="color:#f92672"&gt;=&lt;/span&gt; df_clean&lt;span style="color:#f92672"&gt;.&lt;/span&gt;groupby(&lt;span style="color:#e6db74"&gt;&amp;#39;category&amp;#39;&lt;/span&gt;)[&lt;span style="color:#e6db74"&gt;&amp;#39;sentiment_score&amp;#39;&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;mean()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sort_values(ascending&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;&amp;#34;Category별 평균 Sentiment Score:&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(category_sentiment)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;figure(figsize&lt;span style="color:#f92672"&gt;=&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sns&lt;span style="color:#f92672"&gt;.&lt;/span&gt;barplot(data&lt;span style="color:#f92672"&gt;=&lt;/span&gt;df_clean, x&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;category&amp;#39;&lt;/span&gt;, y&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;sentiment_score&amp;#39;&lt;/span&gt;, ci&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;, order&lt;span style="color:#f92672"&gt;=&lt;/span&gt;category_sentiment&lt;span style="color:#f92672"&gt;.&lt;/span&gt;index)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;title(&lt;span style="color:#e6db74"&gt;&amp;#39;Category별 평균 Sentiment Score&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;xticks(rotation&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;45&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;show()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Category별 평균 Sentiment Score:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;category
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sports 0.241842
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;fashion 0.152500
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;electronics 0.112400
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;home 0.069375
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Name: sentiment_score, dtype: float64
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img width="2418" height="1056" alt="image" src="https://github.com/user-attachments/assets/28a35823-fc1b-4ab3-b1d1-a167036313a1" /&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 9. Review Length vs 평균 Embedding Similarity &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 1) 임베딩 생성&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;model &lt;span style="color:#f92672"&gt;=&lt;/span&gt; SentenceTransformer(&lt;span style="color:#e6db74"&gt;&amp;#39;snunlp/KR-SBERT-V40K-klueNLI-augSTS&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;texts &lt;span style="color:#f92672"&gt;=&lt;/span&gt; df_clean[&lt;span style="color:#e6db74"&gt;&amp;#39;review_text&amp;#39;&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;fillna(&lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;tolist()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;embeddings &lt;span style="color:#f92672"&gt;=&lt;/span&gt; model&lt;span style="color:#f92672"&gt;.&lt;/span&gt;encode(texts, convert_to_tensor&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 2) 모든 리뷰 쌍 간 코사인 유사도 행렬 계산&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;similarity_matrix &lt;span style="color:#f92672"&gt;=&lt;/span&gt; util&lt;span style="color:#f92672"&gt;.&lt;/span&gt;cos_sim(embeddings, embeddings)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;cpu()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;numpy()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 3) 자기 자신과의 유사도(=1.0) 제외한 평균 유사도 계산&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mean_similarities &lt;span style="color:#f92672"&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(len(similarity_matrix)):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# i번째 리뷰의 다른 리뷰들과의 평균 유사도&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sims &lt;span style="color:#f92672"&gt;=&lt;/span&gt; np&lt;span style="color:#f92672"&gt;.&lt;/span&gt;delete(similarity_matrix[i], i) &lt;span style="color:#75715e"&gt;# 자기 자신 제외&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mean_similarities&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(np&lt;span style="color:#f92672"&gt;.&lt;/span&gt;mean(sims))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 4) 데이터프레임에 평균 유사도 컬럼 추가&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;df_clean[&lt;span style="color:#e6db74"&gt;&amp;#39;mean_embedding_similarity&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; mean_similarities
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 5) 상관계수 확인&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;corr_length_mean_similarity &lt;span style="color:#f92672"&gt;=&lt;/span&gt; df_clean[&lt;span style="color:#e6db74"&gt;&amp;#39;review_length&amp;#39;&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;corr(df_clean[&lt;span style="color:#e6db74"&gt;&amp;#39;mean_embedding_similarity&amp;#39;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;리뷰 길이와 평균 Embedding Similarity 상관계수: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;corr_length_mean_similarity&lt;span style="color:#e6db74"&gt;:&lt;/span&gt;&lt;span style="color:#e6db74"&gt;.3f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 6) 시각화&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;figure(figsize&lt;span style="color:#f92672"&gt;=&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sns&lt;span style="color:#f92672"&gt;.&lt;/span&gt;scatterplot(data&lt;span style="color:#f92672"&gt;=&lt;/span&gt;df_clean, x&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;review_length&amp;#39;&lt;/span&gt;, y&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;mean_embedding_similarity&amp;#39;&lt;/span&gt;, alpha&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0.6&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;title(&lt;span style="color:#e6db74"&gt;&amp;#39;Review Length vs 평균 Embedding Similarity&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;show()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;리뷰 길이와 평균 Embedding Similarity 상관계수: &lt;span style="color:#ae81ff"&gt;0.044&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img width="2394" height="976" alt="image" src="https://github.com/user-attachments/assets/dd84fe8f-1975-4caf-a589-c24a2656a372" /&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;h3 id="3-생각"&gt;
 3. 생각
 &lt;a class="anchor" href="#3-%ec%83%9d%ea%b0%81"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;결측치 처리&lt;/p&gt;</description></item><item><title>LLM #1 LLM 이해와 Transformer</title><link>https://yshghid.github.io/docs/study/ai/ai21/</link><pubDate>Mon, 18 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai21/</guid><description>&lt;h1 id="llm-1-llm-이해와-transformer"&gt;
 LLM #1 LLM 이해와 Transformer
 &lt;a class="anchor" href="#llm-1-llm-%ec%9d%b4%ed%95%b4%ec%99%80-transformer"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-08-11&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-llm-기본이해"&gt;
 1. LLM 기본이해
 &lt;a class="anchor" href="#1-llm-%ea%b8%b0%eb%b3%b8%ec%9d%b4%ed%95%b4"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;mark&gt;#1 Word Embedding&lt;/mark&gt; (p.27-28)&lt;/p&gt;
&lt;p&gt;Word Embedding&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;핵심 아이디어는 단어가 어떤 맥락에서 자주 함께 등장하는지를 학습.&lt;/li&gt;
&lt;li&gt;“you say goodbye and I say hello”에서
&lt;ul&gt;
&lt;li&gt;‘goodbye’주변에는 ‘you’, ‘say’, ‘and’, ‘I’ 같은 단어가 함께 등장하고 그 관계를 학습하도록 신경망을 훈련시킨다.&lt;/li&gt;
&lt;li&gt;학습이 반복되면 각 단어는 벡터로 표현되고 의미가 비슷한 단어일수록 벡터 공간에서 가깝게 위치한다.&lt;/li&gt;
&lt;li&gt;Input이 ‘goodbye’이고 Target이 ‘you’, ‘say’, ‘and’, ‘I’여도 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Word Embedding - 신경망 구조 그림&lt;/p&gt;</description></item><item><title>MLOps #1</title><link>https://yshghid.github.io/docs/study/ai/ai20/</link><pubDate>Mon, 11 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai20/</guid><description>&lt;h1 id="mlops-1"&gt;
 MLOps #1
 &lt;a class="anchor" href="#mlops-1"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-08-11&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="실습"&gt;
 실습
 &lt;a class="anchor" href="#%ec%8b%a4%ec%8a%b5"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;메이크파일, 린팅, 테스트와 같이 파이썬 프로젝트 스캐폴딩에 필수적인 요소가 포함된 깃허브 저장소를 생성해보자. 그리고 간단하게 코드 포매팅을 수행하도록 메이크파일 스크립트를 작성해보자.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;깃허브 액션을 사용하여 두개 이상의 파이썬 버전에 대해 깃허브 프로젝트 테스트를 수행해보자.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;클라우드 네이티브 빌드 서버(AWS 코드빌드, GCP 클라우드 빌드, 애저 DevOps 파이프라인)를 사용하여 지속적 통합을 수행해보자.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;깃허브 프로젝트를 도커 파일로 컨테이너화하고, 자동으로 컨테이너 레지스트리에 새로운 컨테이너가 등록되도록 만들어보자.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;locust 또는 loader io와 같은 부하 테스트 프레임워크를 사용하여 애플리케이션에 대한 간단한 부하 테스트 코드를 작성한다. 그리고 스테이징 브랜치에 변경 사항을 푸시할 때 이 테스트가 자동으로 수행되도록 만들어보자.&lt;/p&gt;</description></item><item><title>생성형 AI #1 생성형 AI 기초 및 Prompt Engineering</title><link>https://yshghid.github.io/docs/study/ai/ai18/</link><pubDate>Sat, 09 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai18/</guid><description>&lt;h1 id="생성형-ai-1-생성형-ai-기초-및-prompt-engineering"&gt;
 생성형 AI #1 생성형 AI 기초 및 Prompt Engineering
 &lt;a class="anchor" href="#%ec%83%9d%ec%84%b1%ed%98%95-ai-1-%ec%83%9d%ec%84%b1%ed%98%95-ai-%ea%b8%b0%ec%b4%88-%eb%b0%8f-prompt-engineering"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-08-09&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;mark&gt;#1 RAG&lt;/mark&gt; (p.27)&lt;/p&gt;
&lt;p&gt;RAG의 역할?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;질문을 LLM에 던지기 전에 knowledge corpus에 질문을 미리 검색한다(회사 데이터에 대한 지식 벡터 db).
&lt;ul&gt;
&lt;li&gt;질문과 연관된 문서를 찾고 적절하게 만들어서 retrieval 던지면 의도대로 답변이 잘 나온다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;mark&gt;#2 LLM 출력 구성&lt;/mark&gt; (p.42-45)&lt;/p&gt;
&lt;p&gt;Output Length (Max Tockens)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;500자로 제한을 걸면 500자로 맞춰주는게 아니라 500자 넘으면 출력을 멈춘다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sampling Controls&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;LLM은 다음에 올 단어를 고를 때 미리 계산된 사전 확률분포를 가지고 거기서 하나를 뽑는다&lt;/p&gt;</description></item><item><title>생성형 AI #2 Prompt Engineering 실습 미리돌려보기</title><link>https://yshghid.github.io/docs/study/ai/ai19/</link><pubDate>Sat, 09 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai19/</guid><description>&lt;h1 id="생성형-ai-2-prompt-engineering-실습-미리돌려보기"&gt;
 생성형 AI #2 Prompt Engineering 실습 미리돌려보기
 &lt;a class="anchor" href="#%ec%83%9d%ec%84%b1%ed%98%95-ai-2-prompt-engineering-%ec%8b%a4%ec%8a%b5-%eb%af%b8%eb%a6%ac%eb%8f%8c%eb%a0%a4%eb%b3%b4%ea%b8%b0"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-08-09&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-voc-분석"&gt;
 1. VOC 분석
 &lt;a class="anchor" href="#1-voc-%eb%b6%84%ec%84%9d"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;mark&gt;setting&lt;/mark&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://openrouter.ai/"&gt;https://openrouter.ai/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Model: GPT-5&lt;/li&gt;
&lt;li&gt;Temperature: 0.2 (낮게: 일관성 있는 분류 결과)&lt;/li&gt;
&lt;li&gt;Top-k / Top-p: default&lt;/li&gt;
&lt;li&gt;Max tokens: 1024&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;mark&gt;system prompt&lt;/mark&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;너는 IT 시스템의 평가전문가야. 
이번에 개발한 AI를 적용한 회계세무 시스템을 테스트한 고객의 평가내용인 VOC를 분석하는 것이 너의 역할이야. 
판단근거를 2가지로 함께 제시해줘.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;mark&gt;user prompt&lt;/mark&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;아래에 제공하는 모든 VOC 문장을 긍정, 중립, 부정 중 하나로 분류하고, 
특히 부정일 경우 그렇게 판단한 이유를 2가지로 요약해줘. 
결과는 표 형태로 [번호 | VOC 내용 | 분류 | 판단 근거] 형식으로 출력해.

VOC 데이터:
1. 복잡한 엑셀 정리에서 해방됐어요. 기존 수작업으로 처리하던 매출/비용 분석을 자동화해 시간 절약 효과를 체감했습니다.
2. 회계 비전문가인 마케팅 담당자도 재무 지표의 의미를 쉽게 파악할 수 있었습니다.
3. AI 추천 덕분에 세무 위험을 미리 인지했어요. 실제로 부가세 누락 가능성을 사전에 알림 받아, 실제 신고 전에 정정할 수 있었던 점이 유용했습니다.
4. 실시간으로 현금흐름을 추적할 수 있어 좋았습니다. 회계팀 없이도 매주 자금 흐름을 파악하고 의사결정에 반영할 수 있었습니다.
5. 처음에만 가이드를 받고 나니 반복 작업이 놀랍도록 간단해졌습니다. 설정만 끝나면 이후 반복 업무에서 자동화된 결과물이 기대 이상으로 좋네요.
6. 기능은 흥미롭지만, 실제 업무에 어떻게 녹여야 할지 고민이 됩니다. 시스템이 낯설고 기존 워크플로우와 맞물리는 데 시간이 필요해 보입니다.
7. 예쁜 그래프가 많긴 하지만 실무상 의미가 뚜렷하게 와 닿지는 않았습니다.
8. AI가 추천해주는 분석은 흥미로웠지만, 최종 결정은 여전히 사람이 해야겠더라고요. 완전한 자동화보다는 보조 도구로 보는 것이 현실적이라 느꼈습니다.
9. 피벗 기능이나 드릴다운 기능이 있었으면 더 좋을 것 같긴 해요. 보고서 결과는 직관적이지만, 좀 더 상세 데이터를 보고 싶을 때 아쉬움이 있습니다.
10. 회계 전문가 입장에서는 보안이 필요해 보이지만, 일반 사용자에겐 적합할 수도 있겠네요. 어떤 고객을 주 대상으로 할지 더 명확하면 좋겠습니다.
11. 일부 기능은 대기업 회계 기준에 맞춰져 있어 간편한 사용을 기대한 소규모 기업에는 과도했습니다.
12. AI 설명이 부족해 불안했어요. AI가 어떤 기준으로 판단했는지, 근거가 불투명해 검토에 시간이 걸렸습니다.
13. 엑셀 연동 시 포맷 오류가 잦았습니다. 업로드한 자료가 표준 포맷이 아닐 경우 오류가 자주 발생했습니다.
14. 초기 세팅에 시간이 좀 걸렸습니다. 계정과목 연결, 은행 계좌 연동 등 초기 설정을 마치기까지 다소 복잡하게 느껴졌습니다.
15. 사용자별 접근 권한 설정이 더 세분화되었으면 합니다. 팀 내 다양한 역할별로 보기 권한을 구분하고 싶었는데 현재는 제한적이었습니다.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;mark&gt;result&lt;/mark&gt;&lt;/p&gt;</description></item><item><title>데이터 분석 #3 회귀분석</title><link>https://yshghid.github.io/docs/study/ai/ai17/</link><pubDate>Thu, 07 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai17/</guid><description>&lt;h1 id="데이터-분석-3-회귀분석"&gt;
 데이터 분석 #3 회귀분석
 &lt;a class="anchor" href="#%eb%8d%b0%ec%9d%b4%ed%84%b0-%eb%b6%84%ec%84%9d-3-%ed%9a%8c%ea%b7%80%eb%b6%84%ec%84%9d"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-08-07&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;mark&gt;#1 Oversampling Techinique&lt;/mark&gt; (p.69-71)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SMOTE&lt;/p&gt;
&lt;img width="376" height="136" alt="image" src="https://github.com/user-attachments/assets/8fc7ce10-eef3-486a-9432-b6cdb032085b" /&gt;
&lt;ul&gt;
&lt;li&gt;소수 클래스 포인트 중 하나를 랜덤하게 고르고&lt;/li&gt;
&lt;li&gt;이웃 포인트 k개를 찾고&lt;/li&gt;
&lt;li&gt;이 이웃들과의 연결선을 따라 중간 어딘가에 새로운 샘플을 만든다.
&lt;ul&gt;
&lt;li&gt;즉 원본과 이웃 사이에 위치한 점들을 생성한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;소수 클래스 포인트들 사이의 직선 위에서만 새로운 데이터를 만들기 때문에 실제로는 decision boundary 근처에서 중요한 데이터를 놓칠 수 있다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Borderline-SMOTE&lt;/p&gt;
&lt;img width="365" height="134" alt="image" src="https://github.com/user-attachments/assets/97c5ac14-d0f2-493b-9181-b5dc534b412b" /&gt;
&lt;ul&gt;
&lt;li&gt;소수 클래스의 포인트에 대해 kNN을 수행해서 이웃들을 찾는데
&lt;ul&gt;
&lt;li&gt;이때 이웃 중에서 과반수 이상이 다수 클래스인 경우 위험한 샘플(danger set)으로 간주된다 즉 이 샘플은 결정 경계에 가깝기 때문에 모델 입장에서 헷갈릴 가능성이 높다.&lt;/li&gt;
&lt;li&gt;그런 danger set에 대해서만 SMOTE를 수행하여 새로운 데이터를 생성해서 decision boundary 근처의 소수 클래스 밀도를 높인다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이렇게 하면 모델이 중요한 경계 영역에서의 소수 클래스를 더 잘 인식하도록 도와줄 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ADASYN&lt;/p&gt;</description></item><item><title>데이터 분석 #2 Preprocessing</title><link>https://yshghid.github.io/docs/study/ai/ai16/</link><pubDate>Wed, 06 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai16/</guid><description>&lt;h1 id="데이터-분석-2-preprocessing"&gt;
 데이터 분석 #2 Preprocessing
 &lt;a class="anchor" href="#%eb%8d%b0%ec%9d%b4%ed%84%b0-%eb%b6%84%ec%84%9d-2-preprocessing"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-08-06&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;mark&gt;#1 머신러닝 프로세스&lt;/mark&gt; (p.25)&lt;/p&gt;
 &lt;img width="499" height="260" alt="image" src="https://github.com/user-attachments/assets/80033421-9fe4-4651-8318-7b6151aa0533" /&gt;
&lt;ul&gt;
&lt;li&gt;test data가 필요한 이유?
&lt;ul&gt;
&lt;li&gt;hyperparameter tuning을 하면서 validation data는 모델이 이미 참고했다 즉 간접적으로 학습에 영향을 줬기 때문에 모델 학습 과정에서 한번도 보지않은 데이터가 필요함.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;mark&gt;#2 Box plot&lt;/mark&gt; (p.38)&lt;/p&gt;
&lt;img width="575" height="331" alt="image" src="https://github.com/user-attachments/assets/ffc57e8d-53a9-4623-a501-1180efdf0a32" /&gt;
&lt;p&gt;그림이 7개 차종에서 연비 플롯이라고 가정&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;투입됏을때 예측에 긍정적영향을 줄수잇는건?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;납작한애들. 두꺼우면 대표성이 떨어진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2번에서 이상치들이 많으니까 잘 처리해야하겠다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;만약 그림같지 않고 y축 높이가 다 비슷비슷했다면?&lt;/p&gt;</description></item><item><title>데이터 분석 #1 기초통계</title><link>https://yshghid.github.io/docs/study/ai/ai14/</link><pubDate>Tue, 05 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai14/</guid><description>&lt;h1 id="데이터-분석-1-기초통계"&gt;
 데이터 분석 #1 기초통계
 &lt;a class="anchor" href="#%eb%8d%b0%ec%9d%b4%ed%84%b0-%eb%b6%84%ec%84%9d-1-%ea%b8%b0%ec%b4%88%ed%86%b5%ea%b3%84"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-08-05&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-기술-통계"&gt;
 1. 기술 통계
 &lt;a class="anchor" href="#1-%ea%b8%b0%ec%88%a0-%ed%86%b5%ea%b3%84"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;mark&gt;#1 IQR&lt;/mark&gt; (p.34)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IQR은? 가운데 50%의 거리.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그림 설명&lt;/p&gt;
&lt;img width="265" height="219" alt="image" src="https://github.com/user-attachments/assets/0f803bf5-51b7-4a32-9a75-95672ecfe8be" /&gt;
&lt;ul&gt;
&lt;li&gt;그림의 2,3: 각각 IQR의 1.5배 선, median 값 선.&lt;/li&gt;
&lt;li&gt;그림의 B: ⚬ 가 많으면 특이값이 많은 것.&lt;/li&gt;
&lt;li&gt;그림의 1,2,3: 1,2는 각각 IQR의 1.5배 선이라고 했는데 3과의 거리가 서로 다른 이유는? 1.5배 안쪽에 데이터들이 다 분포해서. 즉max가 1.5배보다 작아서.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;mark&gt;#2 변이 계수(Coefficient of Variables)&lt;/mark&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;평균치가 다른 집단 비교.&lt;/li&gt;
&lt;li&gt;변이 계수 = 표준편차 / 평균.&lt;/li&gt;
&lt;li&gt;값이 작을수록? 평균 가까이에 분포한다.&lt;/li&gt;
&lt;li&gt;평균 관점에서 퍼짐의 해석 -&amp;gt; 이상치에 민감하다.
&lt;ul&gt;
&lt;li&gt;IQR은? 중앙값 관점에서 퍼짐의 해석 -&amp;gt; 이상치에 강건하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;h3 id="2-추론-통계"&gt;
 2. 추론 통계
 &lt;a class="anchor" href="#2-%ec%b6%94%eb%a1%a0-%ed%86%b5%ea%b3%84"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;mark&gt;#1 모집단과 표본집단&lt;/mark&gt;&lt;/p&gt;</description></item><item><title>RF-SHAP 연구 #1 모델 학습</title><link>https://yshghid.github.io/docs/study/ai/ai12/</link><pubDate>Mon, 04 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai12/</guid><description>&lt;h1 id="rf-shap-연구-1-모델-학습"&gt;
 RF-SHAP 연구 #1 모델 학습
 &lt;a class="anchor" href="#rf-shap-%ec%97%b0%ea%b5%ac-1-%eb%aa%a8%eb%8d%b8-%ed%95%99%ec%8a%b5"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-08-04&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-load-data"&gt;
 1. Load data
 &lt;a class="anchor" href="#1-load-data"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; pandas &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; pd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; numpy &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; np
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; sklearn.ensemble &lt;span style="color:#f92672"&gt;import&lt;/span&gt; RandomForestClassifier
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; sklearn.model_selection &lt;span style="color:#f92672"&gt;import&lt;/span&gt; train_test_split, cross_val_score
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; sklearn.metrics &lt;span style="color:#f92672"&gt;import&lt;/span&gt; accuracy_score
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; pickle
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;with&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;&amp;#39;/preprocessing/processed_data.pickle&amp;#39;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; preproc_data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; pickle&lt;span style="color:#f92672"&gt;.&lt;/span&gt;load(f)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cytokine_df &lt;span style="color:#f92672"&gt;=&lt;/span&gt; preproc_data[&lt;span style="color:#e6db74"&gt;&amp;#39;cytokine_data&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;patient_meta &lt;span style="color:#f92672"&gt;=&lt;/span&gt; preproc_data[&lt;span style="color:#e6db74"&gt;&amp;#39;metadata&amp;#39;&lt;/span&gt;] 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;patient_info &lt;span style="color:#f92672"&gt;=&lt;/span&gt; preproc_data[&lt;span style="color:#e6db74"&gt;&amp;#39;clinical&amp;#39;&lt;/span&gt;] 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="2-train-data-split"&gt;
 2. Train data split
 &lt;a class="anchor" href="#2-train-data-split"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;normal_df &lt;span style="color:#f92672"&gt;=&lt;/span&gt; cytokine_df[cytokine_df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;index&lt;span style="color:#f92672"&gt;.&lt;/span&gt;str&lt;span style="color:#f92672"&gt;.&lt;/span&gt;contains(&lt;span style="color:#e6db74"&gt;&amp;#39;Healthy&amp;#39;&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;severe_samples &lt;span style="color:#f92672"&gt;=&lt;/span&gt; patient_meta[patient_meta&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Severity &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;severe_df &lt;span style="color:#f92672"&gt;=&lt;/span&gt; cytokine_df[cytokine_df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;index&lt;span style="color:#f92672"&gt;.&lt;/span&gt;isin(severe_samples&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Sample)]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;normal_df[&lt;span style="color:#e6db74"&gt;&amp;#39;source&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;severe_df[&lt;span style="color:#e6db74"&gt;&amp;#39;source&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;normal_df,severe_df
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;( CXCL9 LIF CXCL11 IL25 IL12B IL10 \
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Healthy1 6.560136 4.251866 4.151513 7.586942 5.541050 1.843384 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Healthy2 5.277100 4.089332 3.650800 7.886990 6.377469 2.113211 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; IL13 IL11 IL15 PTX3 ... FSTL3 FLT3LG \
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Healthy1 6.470743 6.949630 3.716450 5.163174 ... 9.613881 4.906822 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Healthy2 6.450212 7.541794 4.181554 6.741940 ... 9.458981 4.658021 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; FAP FABP4 F3 ESM1 ERBB3 ENPP2 \
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Healthy1 10.903602 7.923477 3.383774 6.034197 9.096096 10.839433 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Healthy2 11.238270 8.730215 3.317157 5.497652 8.543655 10.454511 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; WFDC2 source 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Healthy1 8.383246 0 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Healthy2 8.260845 0 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; [2 rows x 167 columns],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; CXCL9 LIF CXCL11 IL25 IL12B IL10 \
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Patient2_1 7.426598 4.211594 4.429560 7.799068 6.318247 1.769972 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Patient2_2 7.541794 4.355353 4.514350 7.886990 6.741940 1.769972 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Patient2_3 7.541794 4.151513 3.933607 7.799068 6.159825 1.916796 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Patient2_4 7.130935 4.429560 3.585707 7.886990 5.612199 1.916796 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; IL13 IL11 IL15 PTX3 ... FSTL3 FLT3LG \
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Patient2_1 5.725485 6.782954 3.716450 8.190382 ... 8.802718 3.042321 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Patient2_2 5.843465 6.646599 3.716450 7.496809 ... 9.008530 3.317157 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Patient2_3 5.984188 6.701283 3.880626 7.210939 ... 9.214496 3.448254 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Patient2_4 6.214099 6.883351 3.933607 7.496809 ... 9.008530 3.448254 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; FAP FABP4 F3 ESM1 ERBB3 ENPP2 \
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Patient2_1 7.886990 9.296877 2.952843 5.214755 8.543655 9.096096 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Patient2_2 8.110591 9.168168 2.820616 5.497652 8.683792 9.296877 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Patient2_3 8.190382 9.296877 3.232241 5.306376 8.862940 9.535287 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Patient2_4 8.383246 9.296877 3.127159 5.306376 9.096096 9.613881 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; WFDC2 source 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Patient2_1 8.909767 1 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Patient2_2 8.862940 1 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Patient2_3 8.909767 1 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Patient2_4 8.683792 1 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; [4 rows x 167 columns])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="3-model-training"&gt;
 3. Model training
 &lt;a class="anchor" href="#3-model-training"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;df &lt;span style="color:#f92672"&gt;=&lt;/span&gt; pd&lt;span style="color:#f92672"&gt;.&lt;/span&gt;concat([normal_df,severe_df],axis &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;X &lt;span style="color:#f92672"&gt;=&lt;/span&gt; df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;drop(columns&lt;span style="color:#f92672"&gt;=&lt;/span&gt;[&lt;span style="color:#e6db74"&gt;&amp;#39;source&amp;#39;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;y &lt;span style="color:#f92672"&gt;=&lt;/span&gt; df[&lt;span style="color:#e6db74"&gt;&amp;#39;source&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#Assume X_train as X, y as well&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;X_train &lt;span style="color:#f92672"&gt;=&lt;/span&gt; X
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;y_train &lt;span style="color:#f92672"&gt;=&lt;/span&gt; y
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rf_model &lt;span style="color:#f92672"&gt;=&lt;/span&gt; RandomForestClassifier()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rf_model&lt;span style="color:#f92672"&gt;.&lt;/span&gt;fit(X_train, y_train)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;X_train
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	CXCL9	LIF	CXCL11	IL25	IL12B	IL10	IL13	IL11	IL15	PTX3	...	FURIN	FSTL3	FLT3LG	FAP	FABP4	F3	ESM1	ERBB3	ENPP2	WFDC2
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Healthy1	6.560136	4.251866	4.151513	7.586942	5.541050	1.843384	6.470743	6.949630	3.716450	5.163174	...	6.883351	9.613881	4.906822	10.903602	7.923477	3.383774	6.034197	9.096096	10.839433	8.383246
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Healthy2	5.277100	4.089332	3.650800	7.886990	6.377469	2.113211	6.450212	7.541794	4.181554	6.741940	...	7.002611	9.458981	4.658021	11.238270	8.730215	3.317157	5.497652	8.543655	10.454511	8.260845
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Patient2_1	7.426598	4.211594	4.429560	7.799068	6.318247	1.769972	5.725485	6.782954	3.716450	8.190382	...	7.660761	8.802718	3.042321	7.886990	9.296877	2.952843	5.214755	8.543655	9.096096	8.909767
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Patient2_2	7.541794	4.355353	4.514350	7.886990	6.741940	1.769972	5.843465	6.646599	3.716450	7.496809	...	7.210939	9.008530	3.317157	8.110591	9.168168	2.820616	5.497652	8.683792	9.296877	8.862940
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Patient2_3	7.541794	4.151513	3.933607	7.799068	6.159825	1.916796	5.984188	6.701283	3.880626	7.210939	...	6.646599	9.214496	3.448254	8.190382	9.296877	3.232241	5.306376	8.862940	9.535287	8.909767
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Patient2_4	7.130935	4.429560	3.585707	7.886990	5.612199	1.916796	6.214099	6.883351	3.933607	7.496809	...	6.532043	9.008530	3.448254	8.383246	9.296877	3.127159	5.306376	9.096096	9.613881	8.683792
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;6 rows × 166 columns
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Let&amp;#39;s assume test set as well&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;y_test &lt;span style="color:#f92672"&gt;=&lt;/span&gt; y
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;X_test &lt;span style="color:#f92672"&gt;=&lt;/span&gt; X
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;y_pred &lt;span style="color:#f92672"&gt;=&lt;/span&gt; rf_model&lt;span style="color:#f92672"&gt;.&lt;/span&gt;predict(X_test)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;accuracy &lt;span style="color:#f92672"&gt;=&lt;/span&gt; accuracy_score(y_test, y_pred)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(accuracy)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;1.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="4-confusion-matrix"&gt;
 4. Confusion matrix
 &lt;a class="anchor" href="#4-confusion-matrix"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; sklearn.metrics &lt;span style="color:#f92672"&gt;import&lt;/span&gt; confusion_matrix
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; plt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; seaborn &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; sns
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;conf_matrix &lt;span style="color:#f92672"&gt;=&lt;/span&gt; confusion_matrix(y_test, y_pred)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;figure(figsize&lt;span style="color:#f92672"&gt;=&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sns&lt;span style="color:#f92672"&gt;.&lt;/span&gt;heatmap(conf_matrix, annot&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;, fmt&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;d&amp;#34;&lt;/span&gt;, cmap&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Blues&amp;#34;&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; xticklabels&lt;span style="color:#f92672"&gt;=&lt;/span&gt;[&lt;span style="color:#e6db74"&gt;&amp;#39;Healthy&amp;#39;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#39;Severe&amp;#39;&lt;/span&gt;], yticklabels&lt;span style="color:#f92672"&gt;=&lt;/span&gt;[&lt;span style="color:#e6db74"&gt;&amp;#39;Healthy&amp;#39;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#39;Severe&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ,annot_kws&lt;span style="color:#f92672"&gt;=&lt;/span&gt;{&lt;span style="color:#e6db74"&gt;&amp;#34;fontsize&amp;#34;&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;14&lt;/span&gt;},)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;xlabel(&lt;span style="color:#e6db74"&gt;&amp;#39;Predicted&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;ylabel(&lt;span style="color:#e6db74"&gt;&amp;#39;Actual&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;title(&lt;span style="color:#e6db74"&gt;&amp;#39;Confusion Matrix&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;tick_params(axis&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;both&amp;#39;&lt;/span&gt;, which&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;major&amp;#39;&lt;/span&gt;, labelsize&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;12&lt;/span&gt;) &lt;span style="color:#75715e"&gt;# Adjust tick label size&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(len(rf_model&lt;span style="color:#f92672"&gt;.&lt;/span&gt;classes_)):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; j &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(len(rf_model&lt;span style="color:#f92672"&gt;.&lt;/span&gt;classes_)):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; i &lt;span style="color:#f92672"&gt;==&lt;/span&gt; j: &lt;span style="color:#75715e"&gt;# Condition to check diagonal cells (true positives)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;text(j &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0.5&lt;/span&gt;, i &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0.5&lt;/span&gt;, conf_matrix[i, j],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ha&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;center&amp;#34;&lt;/span&gt;, va&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;center&amp;#34;&lt;/span&gt;, color&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;white&amp;#39;&lt;/span&gt;, fontsize&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;text(j &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0.5&lt;/span&gt;, i &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0.5&lt;/span&gt;, conf_matrix[i, j],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ha&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;center&amp;#34;&lt;/span&gt;, va&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;center&amp;#34;&lt;/span&gt;, color&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;black&amp;#39;&lt;/span&gt;, fontsize&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;show()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img width="1816" height="808" alt="image" src="https://github.com/user-attachments/assets/6a1206bc-14d4-4917-b63a-af3db972f7f6" /&gt;
&lt;h3 id="5-save-model"&gt;
 5. Save model
 &lt;a class="anchor" href="#5-save-model"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; joblib
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;joblib&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dump(rf_model, &lt;span style="color:#e6db74"&gt;&amp;#39;/model/rf_model.pkl&amp;#39;&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>RF-SHAP 연구 #2 SHAP 분석</title><link>https://yshghid.github.io/docs/study/ai/ai13/</link><pubDate>Mon, 04 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai13/</guid><description>&lt;h1 id="rf-shap-연구-2-shap-분석"&gt;
 RF-SHAP 연구 #2 SHAP 분석
 &lt;a class="anchor" href="#rf-shap-%ec%97%b0%ea%b5%ac-2-shap-%eb%b6%84%ec%84%9d"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-08-04&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-load-data"&gt;
 1. Load data
 &lt;a class="anchor" href="#1-load-data"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; pandas &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; pd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; numpy &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; np
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; pickle
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; joblib
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; shap
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; plt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; seaborn &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; sns
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#Load rf model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;with&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;&amp;#39;/model/rf_model.pkl&amp;#39;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; rf_model &lt;span style="color:#f92672"&gt;=&lt;/span&gt; joblib&lt;span style="color:#f92672"&gt;.&lt;/span&gt;load(f)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#Load dataset&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;with&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;&amp;#39;/preprocessing/processed_data.pickle&amp;#39;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; preproc_data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; pickle&lt;span style="color:#f92672"&gt;.&lt;/span&gt;load(f)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cytokine_df &lt;span style="color:#f92672"&gt;=&lt;/span&gt; preproc_data[&lt;span style="color:#e6db74"&gt;&amp;#39;cytokine_data&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;patient_meta &lt;span style="color:#f92672"&gt;=&lt;/span&gt; preproc_data[&lt;span style="color:#e6db74"&gt;&amp;#39;metadata&amp;#39;&lt;/span&gt;] 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;patient_info &lt;span style="color:#f92672"&gt;=&lt;/span&gt; preproc_data[&lt;span style="color:#e6db74"&gt;&amp;#39;clinical&amp;#39;&lt;/span&gt;] 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="2-model-evaluation---feature-importance"&gt;
 2. Model evaluation - feature importance
 &lt;a class="anchor" href="#2-model-evaluation---feature-importance"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Get feature importances&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;importances &lt;span style="color:#f92672"&gt;=&lt;/span&gt; rf_model&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feature_importances_
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;feature_names &lt;span style="color:#f92672"&gt;=&lt;/span&gt; cytokine_df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;columns
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;feature_importances &lt;span style="color:#f92672"&gt;=&lt;/span&gt; pd&lt;span style="color:#f92672"&gt;.&lt;/span&gt;DataFrame({&lt;span style="color:#e6db74"&gt;&amp;#39;feature&amp;#39;&lt;/span&gt;: feature_names, &lt;span style="color:#e6db74"&gt;&amp;#39;importance&amp;#39;&lt;/span&gt;: importances})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Sort the feature importances in descending order and select the top 20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;top_20_features &lt;span style="color:#f92672"&gt;=&lt;/span&gt; feature_importances&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sort_values(by&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;importance&amp;#39;&lt;/span&gt;, ascending&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;head(&lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Plot the top 20 feature importances&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;figure(figsize&lt;span style="color:#f92672"&gt;=&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sns&lt;span style="color:#f92672"&gt;.&lt;/span&gt;barplot(x&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;importance&amp;#39;&lt;/span&gt;, y&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;feature&amp;#39;&lt;/span&gt;, data&lt;span style="color:#f92672"&gt;=&lt;/span&gt;top_20_features)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;show()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img width="1802" height="1198" alt="image" src="https://github.com/user-attachments/assets/f8c04c4d-eaf1-4dad-9b6f-783ddf073f1b" /&gt;
&lt;h3 id="3-model-evaluation---shap"&gt;
 3. Model evaluation - SHAP
 &lt;a class="anchor" href="#3-model-evaluation---shap"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tree_explainer &lt;span style="color:#f92672"&gt;=&lt;/span&gt; shap&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TreeExplainer(rf_model) &lt;span style="color:#75715e"&gt;## TreeExplainer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;shap_values &lt;span style="color:#f92672"&gt;=&lt;/span&gt; tree_explainer&lt;span style="color:#f92672"&gt;.&lt;/span&gt;shap_values(cytokine_df) &lt;span style="color:#75715e"&gt;## SHAP Value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;fig &lt;span style="color:#f92672"&gt;=&lt;/span&gt; plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;figure(figsize&lt;span style="color:#f92672"&gt;=&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;fig&lt;span style="color:#f92672"&gt;.&lt;/span&gt;set_facecolor(&lt;span style="color:#e6db74"&gt;&amp;#39;white&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ax &lt;span style="color:#f92672"&gt;=&lt;/span&gt; fig&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_subplot()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#Plot SHAP as sever probability&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;shap&lt;span style="color:#f92672"&gt;.&lt;/span&gt;summary_plot(shap_values[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;], cytokine_df, 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cmap&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;bwr&amp;#39;&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; show&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; plot_type&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;dot&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ax&lt;span style="color:#f92672"&gt;.&lt;/span&gt;set_xlabel(&lt;span style="color:#e6db74"&gt;&amp;#39;SHAP Value&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ax&lt;span style="color:#f92672"&gt;.&lt;/span&gt;set_title(&lt;span style="color:#e6db74"&gt;&amp;#39;SHAP Dot Plot&amp;#39;&lt;/span&gt;, fontsize&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;show()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img width="1808" height="1388" alt="image" src="https://github.com/user-attachments/assets/bf1fcf5f-3469-429b-bb7b-cc7491d64682" /&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;shap_df &lt;span style="color:#f92672"&gt;=&lt;/span&gt; pd&lt;span style="color:#f92672"&gt;.&lt;/span&gt;DataFrame(shap_values[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;],columns &lt;span style="color:#f92672"&gt;=&lt;/span&gt; cytokine_df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;columns)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;shap_df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;index &lt;span style="color:#f92672"&gt;=&lt;/span&gt; cytokine_df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;index
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;shap_df
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	CXCL9	LIF	CXCL11	IL25	IL12B	IL10	IL13	IL11	IL15	PTX3	...	FURIN	FSTL3	FLT3LG	FAP	FABP4	F3	ESM1	ERBB3	ENPP2	WFDC2
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Healthy1	0.0	0.001667	0.0	0.0	-0.008333	0.0	0.0	-0.003333	0.0	0.0	...	0.0	-0.011667	-0.005	-0.013333	0.0	-0.006667	0.0	0.0	0.0	-0.005
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Healthy2	0.0	-0.008333	0.0	0.0	0.001667	0.0	0.0	-0.013333	0.0	0.0	...	0.0	-0.011667	-0.005	-0.013333	0.0	-0.006667	0.0	0.0	0.0	-0.005
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Patient1_1	0.0	0.001667	0.0	0.0	0.001667	0.0	0.0	-0.013333	0.0	0.0	...	0.0	-0.011667	-0.005	-0.013333	0.0	-0.006667	0.0	0.0	0.0	-0.005
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Patient1_2	0.0	0.001667	0.0	0.0	0.001667	0.0	0.0	-0.013333	0.0	0.0	...	0.0	-0.011667	0.005	-0.013333	0.0	-0.006667	0.0	0.0	0.0	-0.005
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Patient1_5	0.0	-0.008333	0.0	0.0	0.001667	0.0	0.0	-0.003333	0.0	0.0	...	0.0	-0.011667	-0.005	-0.013333	0.0	-0.006667	0.0	0.0	0.0	-0.005
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Patient1_6	0.0	-0.008333	0.0	0.0	0.001667	0.0	0.0	0.006667	0.0	0.0	...	0.0	-0.011667	-0.005	0.006667	0.0	0.003333	0.0	0.0	0.0	-0.005
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Patient2_1	0.0	0.001667	0.0	0.0	0.001667	0.0	0.0	0.006667	0.0	0.0	...	0.0	0.008333	0.005	0.006667	0.0	0.003333	0.0	0.0	0.0	0.005
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Patient2_2	0.0	0.001667	0.0	0.0	0.001667	0.0	0.0	0.006667	0.0	0.0	...	0.0	0.008333	0.005	0.006667	0.0	0.003333	0.0	0.0	0.0	0.005
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Patient2_3	0.0	0.001667	0.0	0.0	0.001667	0.0	0.0	0.006667	0.0	0.0	...	0.0	0.008333	0.005	0.006667	0.0	-0.006667	0.0	0.0	0.0	0.005
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Patient2_4	0.0	0.001667	0.0	0.0	0.001667	0.0	0.0	0.006667	0.0	0.0	...	0.0	0.008333	0.005	0.006667	0.0	0.003333	0.0	0.0	0.0	0.005
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Patient2_5	0.0	0.001667	0.0	0.0	0.001667	0.0	0.0	0.006667	0.0	0.0	...	0.0	0.008333	-0.005	0.006667	0.0	-0.006667	0.0	0.0	0.0	-0.005
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;11 rows × 166 columns
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="4-umap"&gt;
 4. UMAP
 &lt;a class="anchor" href="#4-umap"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; umap.umap_ &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; umap
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; pandas &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; pd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; plt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; seaborn &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; sns
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;reducer &lt;span style="color:#f92672"&gt;=&lt;/span&gt; umap&lt;span style="color:#f92672"&gt;.&lt;/span&gt;UMAP()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;embedding &lt;span style="color:#f92672"&gt;=&lt;/span&gt; reducer&lt;span style="color:#f92672"&gt;.&lt;/span&gt;fit_transform(shap_df)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; plt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Extract UMAP coordinates and labels&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;umap_x &lt;span style="color:#f92672"&gt;=&lt;/span&gt; embedding[:, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;umap_y &lt;span style="color:#f92672"&gt;=&lt;/span&gt; embedding[:, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="5-dbscan"&gt;
 5. DBSCAN
 &lt;a class="anchor" href="#5-dbscan"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; sklearn.cluster &lt;span style="color:#f92672"&gt;import&lt;/span&gt; DBSCAN
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Initialize DBSCAN&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;dbscan &lt;span style="color:#f92672"&gt;=&lt;/span&gt; DBSCAN(eps&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0.8&lt;/span&gt;, min_samples&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;) &lt;span style="color:#75715e"&gt;# partial data is too small to set min_sample=20.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Fit to UMAP data and get cluster labels&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;clusters &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dbscan&lt;span style="color:#f92672"&gt;.&lt;/span&gt;fit_predict(embedding)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;embedding, clusters
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;(array([[16.714314 , -2.0475426],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; [17.279623 , -2.4140635],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; [16.705837 , -3.002305 ],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; [17.19955 , -1.342096 ],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; [17.838465 , -2.021136 ],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; [18.537838 , -1.5079662],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; [21.44188 , -2.1259143],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; [21.123413 , -3.075382 ],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; [20.373632 , -3.0233152],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; [21.83852 , -2.899527 ],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; [20.435349 , -2.2629123]], dtype=float32),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; array([ 0, 0, -1, -1, 0, -1, -1, 1, 1, 1, 1]))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="6-save-result"&gt;
 6. Save result
 &lt;a class="anchor" href="#6-save-result"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;analyzed_data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;analyzed_data[&lt;span style="color:#e6db74"&gt;&amp;#39;shap_value&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; shap_df
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;analyzed_data[&lt;span style="color:#e6db74"&gt;&amp;#39;umap&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; embedding
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;analyzed_data[&lt;span style="color:#e6db74"&gt;&amp;#39;cluster&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; clusters
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;with&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;&amp;#39;/analysis/analyzed_data.pickle&amp;#39;&lt;/span&gt;,&lt;span style="color:#e6db74"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pickle&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dump(analyzed_data,f)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="7-hierarchical-dendrogram"&gt;
 7. Hierarchical dendrogram
 &lt;a class="anchor" href="#7-hierarchical-dendrogram"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; matplotlib.patches &lt;span style="color:#f92672"&gt;import&lt;/span&gt; Patch
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;patient_meta&lt;span style="color:#f92672"&gt;.&lt;/span&gt;index &lt;span style="color:#f92672"&gt;=&lt;/span&gt; patient_meta&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Sample
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;label_colors_1 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;sDP&amp;#39;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;mDP&amp;#39;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;orange&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;sRP&amp;#39;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;purple&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;mRP&amp;#39;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;label_colors_2 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;4.0&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;orange&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;5.0&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;orange&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;7.0&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;8.0&lt;/span&gt;:&lt;span style="color:#e6db74"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;label_colors_3 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;DP&amp;#39;&lt;/span&gt; :&lt;span style="color:#e6db74"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;RP&amp;#39;&lt;/span&gt; : &lt;span style="color:#e6db74"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;col_colors_1 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; patient_meta&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Detailed_PPG&lt;span style="color:#f92672"&gt;.&lt;/span&gt;map(label_colors_1)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;col_colors_2 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; patient_meta&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Severity&lt;span style="color:#f92672"&gt;.&lt;/span&gt;map(label_colors_2)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;col_colors_3 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; patient_meta&lt;span style="color:#f92672"&gt;.&lt;/span&gt;PPG&lt;span style="color:#f92672"&gt;.&lt;/span&gt;map(label_colors_3)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;col_colors &lt;span style="color:#f92672"&gt;=&lt;/span&gt; pd&lt;span style="color:#f92672"&gt;.&lt;/span&gt;DataFrame({&lt;span style="color:#e6db74"&gt;&amp;#39;PPGs&amp;#39;&lt;/span&gt;: col_colors_1,&lt;span style="color:#e6db74"&gt;&amp;#39;severity&amp;#39;&lt;/span&gt;:col_colors_2,})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;legend_elements_1 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [Patch(facecolor&lt;span style="color:#f92672"&gt;=&lt;/span&gt;color, label&lt;span style="color:#f92672"&gt;=&lt;/span&gt;label) &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; label, color &lt;span style="color:#f92672"&gt;in&lt;/span&gt; label_colors_1&lt;span style="color:#f92672"&gt;.&lt;/span&gt;items()]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;legend_elements_2 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [Patch(facecolor&lt;span style="color:#f92672"&gt;=&lt;/span&gt;color, label&lt;span style="color:#f92672"&gt;=&lt;/span&gt;label) &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; label, color &lt;span style="color:#f92672"&gt;in&lt;/span&gt; label_colors_2&lt;span style="color:#f92672"&gt;.&lt;/span&gt;items()]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span style="color:#f92672"&gt;import&lt;/span&gt; StandardScaler
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;df &lt;span style="color:#f92672"&gt;=&lt;/span&gt; shap_df[&lt;span style="color:#f92672"&gt;~&lt;/span&gt;shap_df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;index&lt;span style="color:#f92672"&gt;.&lt;/span&gt;str&lt;span style="color:#f92672"&gt;.&lt;/span&gt;contains(&lt;span style="color:#e6db74"&gt;&amp;#39;Healthy&amp;#39;&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;df_filtered &lt;span style="color:#f92672"&gt;=&lt;/span&gt; df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;loc[:, (df &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;any(axis&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;scaler &lt;span style="color:#f92672"&gt;=&lt;/span&gt; StandardScaler()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; df_scaled &lt;span style="color:#f92672"&gt;=&lt;/span&gt; scaler&lt;span style="color:#f92672"&gt;.&lt;/span&gt;fit_transform(df_filtered)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; df_scaled &lt;span style="color:#f92672"&gt;=&lt;/span&gt; pd&lt;span style="color:#f92672"&gt;.&lt;/span&gt;DataFrame(df_scaled, index&lt;span style="color:#f92672"&gt;=&lt;/span&gt;df_filtered&lt;span style="color:#f92672"&gt;.&lt;/span&gt;index, columns&lt;span style="color:#f92672"&gt;=&lt;/span&gt;df_filtered&lt;span style="color:#f92672"&gt;.&lt;/span&gt;columns)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;except&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;FloatingPointError&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; e:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Error during scaling: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;e&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;g&lt;span style="color:#f92672"&gt;=&lt;/span&gt; sns&lt;span style="color:#f92672"&gt;.&lt;/span&gt;clustermap(df_scaled&lt;span style="color:#f92672"&gt;.&lt;/span&gt;T, cmap&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;coolwarm&amp;#39;&lt;/span&gt;, figsize&lt;span style="color:#f92672"&gt;=&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;27&lt;/span&gt;), col_colors&lt;span style="color:#f92672"&gt;=&lt;/span&gt;col_colors)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;legend_ax_1 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; g&lt;span style="color:#f92672"&gt;.&lt;/span&gt;fig&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_axes([&lt;span style="color:#ae81ff"&gt;1.05&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;0.60&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;0.3&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;0.2&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;legend_ax_2 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; g&lt;span style="color:#f92672"&gt;.&lt;/span&gt;fig&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_axes([&lt;span style="color:#ae81ff"&gt;1.05&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;0.48&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;0.3&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;0.2&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;legend_ax_1&lt;span style="color:#f92672"&gt;.&lt;/span&gt;legend(handles&lt;span style="color:#f92672"&gt;=&lt;/span&gt;legend_elements_1, title&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;PPGs&amp;#34;&lt;/span&gt;, loc&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;center&amp;#34;&lt;/span&gt;, fontsize &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;15&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;legend_ax_1&lt;span style="color:#f92672"&gt;.&lt;/span&gt;axis(&lt;span style="color:#e6db74"&gt;&amp;#39;off&amp;#39;&lt;/span&gt;) &lt;span style="color:#75715e"&gt;# Turn off the axis&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;legend_ax_2&lt;span style="color:#f92672"&gt;.&lt;/span&gt;legend(handles&lt;span style="color:#f92672"&gt;=&lt;/span&gt;legend_elements_2, title&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Sample Severity&amp;#34;&lt;/span&gt;, loc&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;center&amp;#34;&lt;/span&gt;, fontsize &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;15&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;legend_ax_2&lt;span style="color:#f92672"&gt;.&lt;/span&gt;axis(&lt;span style="color:#e6db74"&gt;&amp;#39;off&amp;#39;&lt;/span&gt;) &lt;span style="color:#75715e"&gt;# Turn off the axis&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;show()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img width="2292" height="1466" alt="image" src="https://github.com/user-attachments/assets/865246b0-f54b-4195-9b2d-ae6fe0231203" /&gt;
&lt;h1 id=""&gt;
 
 &lt;a class="anchor" href="#"&gt;#&lt;/a&gt;
&lt;/h1&gt;</description></item><item><title>DBSCAN #2 슈도코드</title><link>https://yshghid.github.io/docs/study/ai/ai9/</link><pubDate>Mon, 28 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai9/</guid><description>&lt;h1 id="dbscan-2-슈도코드"&gt;
 DBSCAN #2 슈도코드
 &lt;a class="anchor" href="#dbscan-2-%ec%8a%88%eb%8f%84%ec%bd%94%eb%93%9c"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-07-28&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1"&gt;
 1
 &lt;a class="anchor" href="#1"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Input:
 - D: 데이터 포인트 집합
 - eps: 이웃 거리 임계값
 - minPts: 최소 이웃 수 (밀도 기준)

Output:
 - cluster_labels: 각 데이터 포인트에 대한 클러스터 라벨 (노이즈는 -1)

Initialize:
 - cluster_id ← 0
 - label[x] ← UNVISITED for all x in D
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;데이터 집합 D, 파라미터 eps와 minPts가 들어간다.&lt;/p&gt;
&lt;h3 id="2"&gt;
 2
 &lt;a class="anchor" href="#2"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;For each point x in D:
 If label[x] ≠ UNVISITED:
 continue

 N ← regionQuery(x, eps) // x 주변의 eps 이내 이웃 포인트 탐색

 If |N| &amp;lt; minPts:
 label[x] ← NOISE
// Else:
// cluster_id ← cluster_id + 1
// expandCluster(x, N, cluster_id, eps, minPts, label)

Function regionQuery(x, eps):
 return { all points y in D such that distance(x, y) ≤ eps }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;주석 처리 안된 부분만 보기.&lt;/p&gt;</description></item><item><title>DBSCAN: #1 1D 클러스터링의 성능 평가</title><link>https://yshghid.github.io/docs/study/ai/ai8/</link><pubDate>Mon, 28 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai8/</guid><description>&lt;h1 id="dbscan-1-1d-클러스터링의-성능-평가"&gt;
 DBSCAN: #1 1D 클러스터링의 성능 평가
 &lt;a class="anchor" href="#dbscan-1-1d-%ed%81%b4%eb%9f%ac%ec%8a%a4%ed%84%b0%eb%a7%81%ec%9d%98-%ec%84%b1%eb%8a%a5-%ed%8f%89%ea%b0%80"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-07-28&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-problem"&gt;
 1. Problem
 &lt;a class="anchor" href="#1-problem"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;클러스터 응집도는 보통 클러스터 내 데이터 간의 평균 거리나 분산, 혹은 실루엣 계수처럼 군집 내 응집도와 군집 간 분리도를 동시에 평가한다.&lt;/p&gt;
&lt;p&gt;하지만 1차원 데이터에서는 클러스터 응집도(Cluster Cohesion) 또는 실루엣 계수(Silhouette coefficient) 같은 지표가 잘 작동하지 않는다.&lt;/p&gt;
&lt;h3 id="2-클러스터-응집도"&gt;
 2. 클러스터 응집도
 &lt;a class="anchor" href="#2-%ed%81%b4%eb%9f%ac%ec%8a%a4%ed%84%b0-%ec%9d%91%ec%a7%91%eb%8f%84"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;클러스터링 성능을 평가하는 지표 중 하나인 응집도(Cohesion)는 클러스터 내부의 데이터들이 얼마나 서로 가까운지를 측정하는 지표다. 대표적으로는 클러스터 내 모든 점 간의 평균 거리, 클러스터 중심과 각 점 사이의 평균 거리, 혹은 분산을 사용하는 방식 등이 있다. 이와 함께 자주 사용되는 분리도(Separation)는 클러스터 간의 거리가 얼마나 떨어져 있는지를 평가하며, 이 두 지표를 동시에 고려하는 실루엣 계수(Silhouette coefficient) 같은 복합 지표도 존재한다.&lt;/p&gt;</description></item><item><title>MutClust 슈도코드 작성하기</title><link>https://yshghid.github.io/docs/study/ai/ai10/</link><pubDate>Mon, 28 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai10/</guid><description>&lt;h1 id="mutclust-슈도코드-작성하기"&gt;
 MutClust 슈도코드 작성하기
 &lt;a class="anchor" href="#mutclust-%ec%8a%88%eb%8f%84%ec%bd%94%eb%93%9c-%ec%9e%91%ec%84%b1%ed%95%98%ea%b8%b0"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-07-28&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1"&gt;
 1
 &lt;a class="anchor" href="#1"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Input:
 - D: 데이터 포인트 집합
 - Efactor: 이웃 거리 조정값
 - DiminFactor: 클러스터 경계 조정값
 - minPts: 최소 이웃 수 (밀도 기준)

Output:
 - cluster_labels: 각 데이터 포인트에 대한 클러스터 라벨 (노이즈는 -1)

Initialize:
 - cluster_id ← 0
 - Label[x] ← UNVISITED for all x in D
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;데이터 집합 D, 파라미터 eps와 minPts가 들어간다.&lt;/p&gt;
&lt;h3 id="2-h-중요도-계산"&gt;
 2. H-중요도 계산
 &lt;a class="anchor" href="#2-h-%ec%a4%91%ec%9a%94%eb%8f%84-%ea%b3%84%ec%82%b0"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;For each point x in D:
 x.H ← calculateHscore(x)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;각 데이터포인트에 대해 H-score를 계산한다.&lt;/p&gt;</description></item><item><title>TFT #0 연구 방향</title><link>https://yshghid.github.io/docs/study/ai/ai4/</link><pubDate>Wed, 23 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai4/</guid><description>&lt;h1 id="tft-0-연구-방향"&gt;
 TFT #0 연구 방향
 &lt;a class="anchor" href="#tft-0-%ec%97%b0%ea%b5%ac-%eb%b0%a9%ed%96%a5"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-07-23&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;(#2025-05-31 작성)&lt;/p&gt;
&lt;p&gt;#1&lt;/p&gt;
&lt;p&gt;사용하고자 하는 데이터는?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;feature
&lt;ul&gt;
&lt;li&gt;Clinical feature (17, float): Creatinine, Hemoglobin, LDH, Lymphocytes, Neutrophils, Platelet count, WBC count, hs-CRP, D-Dimer, BDTEMP, BREATH, DBP, SBP, PULSE, SPO2, O2_APPLY&lt;/li&gt;
&lt;li&gt;Antibiotics feature (2, str)
&lt;ul&gt;
&lt;li&gt;Treatment (list, str): 투여한 항생제, 결측값일수도있고 2개 이상일수도 있음&lt;/li&gt;
&lt;li&gt;Strain (str): 환자가 감염된 균주, 1개&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NEWS (int): 중증도&lt;/li&gt;
&lt;li&gt;Code (int/str): 환자 등록번호&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;time-series
&lt;ul&gt;
&lt;li&gt;10개 시점 (항생제 투여 기준 D-3 ~ D+6)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TFT input 형식은?&lt;/p&gt;</description></item><item><title>TFT #1 입력 시퀀스 생성</title><link>https://yshghid.github.io/docs/study/ai/ai5/</link><pubDate>Wed, 23 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai5/</guid><description>&lt;h1 id="tft-1-입력-시퀀스-생성"&gt;
 TFT #1 입력 시퀀스 생성
 &lt;a class="anchor" href="#tft-1-%ec%9e%85%eb%a0%a5-%ec%8b%9c%ed%80%80%ec%8a%a4-%ec%83%9d%ec%84%b1"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-07-23&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-load-package"&gt;
 1. Load package
 &lt;a class="anchor" href="#1-load-package"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;%&lt;/span&gt;load_ext autoreload
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;%&lt;/span&gt;autoreload &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; sys
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; pandas &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; pd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; numpy &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; np
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; os
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; pickle
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; ast
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sys&lt;span style="color:#f92672"&gt;.&lt;/span&gt;path&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(&lt;span style="color:#e6db74"&gt;&amp;#39;/data3/projects/2025_Antibiotics/YSH/bin&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; sc &lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;chdir(&lt;span style="color:#e6db74"&gt;&amp;#39;/data3/projects/2025_Antibiotics/YSH/workspace&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="2-load-raw-data"&gt;
 2. Load raw data
 &lt;a class="anchor" href="#2-load-raw-data"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;#data&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/data
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;├── PreprocessedData/
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;│ └── TimecourseData/
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;│ └── * (*: patient id)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;│ ├── SeverityScore.csv
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;│ ├── Laboratory_processed.csv 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;│ └── Medication.csv
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;├── PreprocessedData_knuh/
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;│ └── (PreprocessedData와 동일)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;└── 병원체자원은행 균주현황(2014-2024.06)_Sepsis.xlsx
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/data_knuch
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;└── (empty)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/data_knuh
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;└── (empty)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data_knuch &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;/data/PreprocessedData/TimecourseData&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data_knuh &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;/data/PreprocessedData_knuh/TimecourseData&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pids &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [d &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; d &lt;span style="color:#f92672"&gt;in&lt;/span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;listdir(data_knuch)] &lt;span style="color:#f92672"&gt;+&lt;/span&gt; [d &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; d &lt;span style="color:#f92672"&gt;in&lt;/span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;listdir(data_knuh)]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;len(pids)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;13779
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="3-raw-data-processing"&gt;
 3. Raw data processing
 &lt;a class="anchor" href="#3-raw-data-processing"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#processing knuch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;datadir &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;/data/PreprocessedData/TimecourseData&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pids &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [d &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; d &lt;span style="color:#f92672"&gt;in&lt;/span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;listdir(datadir)]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;input_dict &lt;span style="color:#f92672"&gt;=&lt;/span&gt; make_input(datadir, pids)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;input_dict, no_strains &lt;span style="color:#f92672"&gt;=&lt;/span&gt; add_strain(input_dict)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;outdir &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;data_knuch&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;with&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;outdir&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;/Input.pkl&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pickle&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dump(input_dict, f)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(len(list(input_dict&lt;span style="color:#f92672"&gt;.&lt;/span&gt;keys())))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(len(no_strains))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;4516
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;4
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#processing knuh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;datadir &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;/data/PreprocessedData_knuh/TimecourseData&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pids &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [d &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; d &lt;span style="color:#f92672"&gt;in&lt;/span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;listdir(datadir)]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;input_dict &lt;span style="color:#f92672"&gt;=&lt;/span&gt; make_input(datadir, pids)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;input_dict, no_strains &lt;span style="color:#f92672"&gt;=&lt;/span&gt; add_strain(input_dict)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;outdir &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;data_knuh&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;with&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;outdir&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;/Input.pkl&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pickle&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dump(input_dict, f)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(len(list(input_dict&lt;span style="color:#f92672"&gt;.&lt;/span&gt;keys())))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(len(no_strains))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;9100
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;#result&lt;/p&gt;</description></item><item><title>TFT #2 입력 feature 생성</title><link>https://yshghid.github.io/docs/study/ai/ai6/</link><pubDate>Wed, 23 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai6/</guid><description>&lt;h1 id="tft-2-입력-feature-생성"&gt;
 TFT #2 입력 feature 생성
 &lt;a class="anchor" href="#tft-2-%ec%9e%85%eb%a0%a5-feature-%ec%83%9d%ec%84%b1"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-07-23&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-load-package"&gt;
 1. Load package
 &lt;a class="anchor" href="#1-load-package"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;%&lt;/span&gt;load_ext autoreload
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;%&lt;/span&gt;autoreload &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; sys
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; pandas &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; pd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; numpy &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; np
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; os
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; pickle
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; ast
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sys&lt;span style="color:#f92672"&gt;.&lt;/span&gt;path&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(&lt;span style="color:#e6db74"&gt;&amp;#39;/data3/projects/2025_Antibiotics/YSH/bin&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; sc &lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;chdir(&lt;span style="color:#e6db74"&gt;&amp;#39;/data3/projects/2025_Antibiotics/YSH/workspace&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="2-make-feature1"&gt;
 2. Make feature1
 &lt;a class="anchor" href="#2-make-feature1"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;#data&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/data
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;└── all_meds.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/data_knuch
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;└── sequence
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; └── *.pkl (*: antibiotics)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/data_knuh
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;└── sequence
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; └── *.pkl (*: antibiotics)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;medinfo &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;/data/all_meds.txt&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;with&lt;/span&gt; open(medinfo, &lt;span style="color:#e6db74"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; meds &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [line&lt;span style="color:#f92672"&gt;.&lt;/span&gt;strip()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;replace(&lt;span style="color:#e6db74"&gt;&amp;#34;/&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;_&amp;#34;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; line &lt;span style="color:#f92672"&gt;in&lt;/span&gt; f &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; line&lt;span style="color:#f92672"&gt;.&lt;/span&gt;strip()]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;outdir &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;data_&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;dtype&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;strain_dic &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; med &lt;span style="color:#f92672"&gt;in&lt;/span&gt; meds:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;with&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;data_&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;dtype&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;/sequence/&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;med&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;.pkl&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; res_dict &lt;span style="color:#f92672"&gt;=&lt;/span&gt; pickle&lt;span style="color:#f92672"&gt;.&lt;/span&gt;load(f)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; feature1_list &lt;span style="color:#f92672"&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; pid, df &lt;span style="color:#f92672"&gt;in&lt;/span&gt; res_dict&lt;span style="color:#f92672"&gt;.&lt;/span&gt;items():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; news_bf &lt;span style="color:#f92672"&gt;=&lt;/span&gt; df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;iloc[&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;][&lt;span style="color:#e6db74"&gt;&amp;#39;NEWS&amp;#39;&lt;/span&gt;] &lt;span style="color:#75715e"&gt;# 3번째 행 (0-indexed)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; news_af &lt;span style="color:#f92672"&gt;=&lt;/span&gt; df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;iloc[&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;:][&lt;span style="color:#e6db74"&gt;&amp;#39;NEWS&amp;#39;&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;max() &lt;span style="color:#75715e"&gt;# 4번째 행부터 마지막까지 중 최댓값&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; news_af &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; news_bf: &lt;span style="color:#75715e"&gt;# &amp;#34;작은&amp;#34; 경우만 (같은 건 포함하지 않음)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; feature1_list&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(pid)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;#print(len(feature1_list))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; filtered_res_dict &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {pid: res_dict[pid] &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; pid &lt;span style="color:#f92672"&gt;in&lt;/span&gt; feature1_list &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; pid &lt;span style="color:#f92672"&gt;in&lt;/span&gt; res_dict}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;with&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;data_&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;dtype&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;/temp/feature1/&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;med&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;.pkl&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pickle&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dump(filtered_res_dict, f)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; pid, df &lt;span style="color:#f92672"&gt;in&lt;/span&gt; filtered_res_dict&lt;span style="color:#f92672"&gt;.&lt;/span&gt;items():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; len(df) &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;continue&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cur_strain &lt;span style="color:#f92672"&gt;=&lt;/span&gt; df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;iloc[&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;][&lt;span style="color:#e6db74"&gt;&amp;#39;strain&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; isinstance(cur_strain, list):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; strains &lt;span style="color:#f92672"&gt;=&lt;/span&gt; cur_strain
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; strains &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [cur_strain]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;except&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Exception&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; e:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;#print(med)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; strain &lt;span style="color:#f92672"&gt;in&lt;/span&gt; strains:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; strain &lt;span style="color:#f92672"&gt;in&lt;/span&gt; strain_dic:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; strain_dic[strain]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(med)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; strain_dic[strain] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [med]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; strain &lt;span style="color:#f92672"&gt;in&lt;/span&gt; strain_dic:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; strain_dic[strain] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; list(set(strain_dic[strain]))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Save feature1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;with&lt;/span&gt; open(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;outdir&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;/feature1.pkl&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pickle&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dump(strain_dic, f)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;#result&lt;/p&gt;</description></item><item><title>TFT #3 모델 학습</title><link>https://yshghid.github.io/docs/study/ai/ai7/</link><pubDate>Wed, 23 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai7/</guid><description>&lt;h1 id="tft-3-모델-학습"&gt;
 TFT #3 모델 학습
 &lt;a class="anchor" href="#tft-3-%eb%aa%a8%eb%8d%b8-%ed%95%99%ec%8a%b5"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-07-23&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-load-package"&gt;
 1. Load package
 &lt;a class="anchor" href="#1-load-package"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; pytorch_lightning &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; pl
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; pytorch_lightning.callbacks &lt;span style="color:#f92672"&gt;import&lt;/span&gt; EarlyStopping, LearningRateMonitor
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; pytorch_lightning.loggers &lt;span style="color:#f92672"&gt;import&lt;/span&gt; TensorBoardLogger
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; pytorch_forecasting &lt;span style="color:#f92672"&gt;import&lt;/span&gt; TimeSeriesDataSet
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; pytorch_forecasting.models &lt;span style="color:#f92672"&gt;import&lt;/span&gt; TemporalFusionTransformer
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; pytorch_forecasting.models.baseline &lt;span style="color:#f92672"&gt;import&lt;/span&gt; Baseline
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; pytorch_forecasting.metrics &lt;span style="color:#f92672"&gt;import&lt;/span&gt; QuantileLoss
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; pytorch_forecasting.metrics &lt;span style="color:#f92672"&gt;import&lt;/span&gt; MAE
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; pytorch_forecasting.data &lt;span style="color:#f92672"&gt;import&lt;/span&gt; GroupNormalizer, NaNLabelEncoder
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; numpy &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; np
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; pandas &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; pd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; torch
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; pickle
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; plt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;#data&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plain" data-lang="plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/data
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;└── Sequence.pkl
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="2-load-data"&gt;
 2. Load data
 &lt;a class="anchor" href="#2-load-data"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sequence &lt;span style="color:#f92672"&gt;=&lt;/span&gt; pd&lt;span style="color:#f92672"&gt;.&lt;/span&gt;read_pickle(&lt;span style="color:#e6db74"&gt;&amp;#34;/data/Sequence.pkl&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sequence
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src="https://github.com/user-attachments/assets/2dc80ef0-4da5-4d72-bf2d-4d7087b38b64" alt="image" /&gt;&lt;/p&gt;</description></item><item><title>RAG #2 출력 파서의 개념, Pydantic/Json 출력 파서</title><link>https://yshghid.github.io/docs/study/ai/ai2/</link><pubDate>Sat, 19 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai2/</guid><description>&lt;h1 id="rag-2-출력-파서의-개념-pydanticjson-출력-파서"&gt;
 RAG #2 출력 파서의 개념, Pydantic/Json 출력 파서
 &lt;a class="anchor" href="#rag-2-%ec%b6%9c%eb%a0%a5-%ed%8c%8c%ec%84%9c%ec%9d%98-%ea%b0%9c%eb%85%90-pydanticjson-%ec%b6%9c%eb%a0%a5-%ed%8c%8c%ec%84%9c"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-07-19&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-출력-파서의-개념과-종류-그리고-세가지-주요-메서드"&gt;
 1. 출력 파서의 개념과 종류 그리고 세가지 주요 메서드
 &lt;a class="anchor" href="#1-%ec%b6%9c%eb%a0%a5-%ed%8c%8c%ec%84%9c%ec%9d%98-%ea%b0%9c%eb%85%90%ea%b3%bc-%ec%a2%85%eb%a5%98-%ea%b7%b8%eb%a6%ac%ea%b3%a0-%ec%84%b8%ea%b0%80%ec%a7%80-%ec%a3%bc%ec%9a%94-%eb%a9%94%ec%84%9c%eb%93%9c"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;출력 파서(output parser)는 LLM에서 생성된 응답을 받아서 우리가 원하는 형식으로 변환해주는 역할을 한다. 쉽게 말해, LLM은 텍스트만 생성하지만 우리는 그 텍스트를 리스트, 딕셔너리, JSON, 숫자 등 구조화된 데이터로 바꾸어서 프로그램에 넘기거나, 다음 단계 체인으로 활용하길 원할 때가 많다. 출력 파서는 이 연결고리 역할을 한다. 출력 파서는 LLM이라는 기계가 말한 인간 언어를 다시 기계가 이해할 수 있는 언어로 &amp;lsquo;번역&amp;rsquo;하는 통역사 같은 존재이다. 예를 들어 LLM이 “답은 아시아입니다”라고 말하면, 이걸 다시 &lt;code&gt;{&amp;quot;answer&amp;quot;: &amp;quot;아시아&amp;quot;}&lt;/code&gt; 같은 JSON 객체로 바꿔주는 게 파서의 역할이다. 반대로 말하면, 출력 파서 없이는 LLM이 말한 결과를 그대로 사람이 읽고 판단하거나 후처리 코드를 추가해야만 한다.&lt;/p&gt;</description></item><item><title>RAG #3 자동 대화 이력 관리</title><link>https://yshghid.github.io/docs/study/ai/ai3/</link><pubDate>Sat, 19 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai3/</guid><description>&lt;h1 id="rag-3-자동-대화-이력-관리"&gt;
 RAG #3 자동 대화 이력 관리
 &lt;a class="anchor" href="#rag-3-%ec%9e%90%eb%8f%99-%eb%8c%80%ed%99%94-%ec%9d%b4%eb%a0%a5-%ea%b4%80%eb%a6%ac"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-07-19&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-자동-대화-이력-관리"&gt;
 1. 자동 대화 이력 관리
 &lt;a class="anchor" href="#1-%ec%9e%90%eb%8f%99-%eb%8c%80%ed%99%94-%ec%9d%b4%eb%a0%a5-%ea%b4%80%eb%a6%ac"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ChatPromptTemplate&lt;/code&gt;을 통해 시스템 메시지를 포함하는 프롬프트를 만든다. 시스템 메시지는 모델에게 “너는 금융 상담사야”라고 역할을 부여하는 것이다. 이어지는 &lt;code&gt;(&amp;quot;placeholder&amp;quot;, &amp;quot;{messages}&amp;quot;)&lt;/code&gt;는 실제 사용자의 질문과 AI의 답변이 이 자리에 채워질 것이라는 의미다. 이 프롬프트는 &lt;code&gt;chat = ChatOpenAI(model=&amp;quot;gpt-4o-mini&amp;quot;)&lt;/code&gt;와 연결되는데, 이는 OpenAI의 gpt-4o-mini 모델을 사용하는 챗 인터페이스이다. 이 프롬프트와 모델을 &lt;code&gt;prompt | chat&lt;/code&gt;이라는 LCEL 표현으로 묶으면, 하나의 체인이 만들어진다. 이 체인은 주어진 메시지 목록을 받아, GPT 모델에 전달하고 응답을 생성하는 구조다.&lt;/p&gt;</description></item><item><title>RAG #1 랭체인, LCEL, 프롬프트</title><link>https://yshghid.github.io/docs/study/ai/ai1/</link><pubDate>Thu, 17 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai1/</guid><description>&lt;h1 id="rag-1-랭체인-lcel-프롬프트"&gt;
 RAG #1 랭체인, LCEL, 프롬프트
 &lt;a class="anchor" href="#rag-1-%eb%9e%ad%ec%b2%b4%ec%9d%b8-lcel-%ed%94%84%eb%a1%ac%ed%94%84%ed%8a%b8"&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;#2025-07-17&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="1-랭체인-생태계의-주요-패키지"&gt;
 1. 랭체인 생태계의 주요 패키지
 &lt;a class="anchor" href="#1-%eb%9e%ad%ec%b2%b4%ec%9d%b8-%ec%83%9d%ed%83%9c%ea%b3%84%ec%9d%98-%ec%a3%bc%ec%9a%94-%ed%8c%a8%ed%82%a4%ec%a7%80"&gt;#&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;랭체인(LangChain)은 LLM(Large Language Model)을 활용한 애플리케이션을 쉽게 만들 수 있도록 돕는 프레임워크이다. 이 생태계는 단일 라이브러리로 구성된 것이 아니라 여러 개의 하위 패키지로 나뉘어 있고, 각각의 역할이 명확하게 분리되어 있다. 랭체인의 주요 목적은 LLM을 단순한 텍스트 생성 도구가 아니라, 여러 시스템과 결합하여 유의미한 작업을 수행하는 &amp;ldquo;생각하고 행동하는&amp;rdquo; 에이전트로 만드는 것이다. 이 생태계의 핵심 구성 요소들을 쉽게 설명하자면, 마치 LLM이라는 뇌에 주변 감각기관과 기억장치, 도구들, 그리고 의사결정 능력을 붙여주는 것이라고 보면 된다.&lt;/p&gt;</description></item></channel></rss>