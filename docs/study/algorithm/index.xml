<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>알고리즘 on</title><link>https://yshghid.github.io/docs/study/algorithm/</link><description>Recent content in 알고리즘 on</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 31 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://yshghid.github.io/docs/study/algorithm/index.xml" rel="self" type="application/rss+xml"/><item><title>MutClust #1 코드정리: lib.py</title><link>https://yshghid.github.io/docs/study/algorithm/algo1/</link><pubDate>Thu, 31 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/algorithm/algo1/</guid><description>&lt;h1 id="mutclust-1-코드정리-libpy">
 MutClust #1 코드정리: lib.py
 &lt;a class="anchor" href="#mutclust-1-%ec%bd%94%eb%93%9c%ec%a0%95%eb%a6%ac-libpy">#&lt;/a>
&lt;/h1>
&lt;p>#2025-07-31&lt;/p>
&lt;hr>
&lt;p>MutClust 알고리즘의 코드 구성은 아래와 같은데&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>MutClust
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── sc/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── lib.py // 핵심 알고리즘 로직
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── arg_parser.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── utils.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── Test
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>lib.py는 후보 Core 선택 로직과 클러스터 탐지 알고리즘을 포함한다.&lt;/p>
&lt;h1 id="">
 
 &lt;a class="anchor" href="#">#&lt;/a>
&lt;/h1>
&lt;h3 id="1-config--constant-선언">
 1. Config &amp;amp; Constant 선언
 &lt;a class="anchor" href="#1-config--constant-%ec%84%a0%ec%96%b8">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># === mlib.py ===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> math &lt;span style="color:#f92672">import&lt;/span> ceil
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#66d9ef">as&lt;/span> np
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> src.utils &lt;span style="color:#f92672">import&lt;/span> mutation_filtering
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># --- Constants ---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>POS &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Position&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FREQ &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Frequency&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PER &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Percentage&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ENT &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Entropy&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HSCORE &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;H-score&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HSCORE_SUM &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;H-score_sum&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HSCORE_AVR &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;H-score_avr&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PER_SUM &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;per_sum&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ENT_SUM &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;ent_sum&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PER_AVR &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;per_avr&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ENT_AVR &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;ent_avr&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>EPSILON &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>EPSILON_SCALING_FACTOR &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DIMINISHING_FACTOR &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MIN_CLUSTER_LENGTH &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CCM_MIN_HSCORE_SUM &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.05&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CCM_MIN_HSCORE_AVR &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.01&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CCM_MIN_HSCORE &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.03&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MIN_MUTATIONS &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># --- Config Init ---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">init&lt;/span>(d, info):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">--- Configurations ---&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Input data: &amp;#39;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>fin&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39; &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>d&lt;span style="color:#f92672">.&lt;/span>shape&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Output dir: &amp;#39;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>outdir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;Parameters:&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34; Min Eps=&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>eps&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34; Max Eps=&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>maxeps&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34; Min per_sum=&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>min_persum&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#e6db74">.1f&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34; Eps scaling factor=&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>eps_scaler_const&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#e6db74">.1f&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34; Expansion diminishing factor=&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>es_control_const&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34; Min cluster length=&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>min_cluster_length&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;----------------------&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-eps-내-중요도-계산">
 2. Eps 내 중요도 계산
 &lt;a class="anchor" href="#2-eps-%eb%82%b4-%ec%a4%91%ec%9a%94%eb%8f%84-%ea%b3%84%ec%82%b0">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># --- EPS Stats ---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">get_eps_stats&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">__init__&lt;/span>(self, idx, pos, df, lr_index, lr_distance, es):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>idx &lt;span style="color:#f92672">=&lt;/span> idx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>i &lt;span style="color:#f92672">=&lt;/span> pos
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>i_per &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>loc[idx, PER]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>i_freq &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>loc[idx, FREQ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>i_ent &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>loc[idx, ENT]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>i_hscore &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>loc[idx, HSCORE]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>l_dist, self&lt;span style="color:#f92672">.&lt;/span>r_dist &lt;span style="color:#f92672">=&lt;/span> lr_distance
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ccm_df &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>loc[lr_index[&lt;span style="color:#ae81ff">0&lt;/span>]:lr_index[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>length &lt;span style="color:#f92672">=&lt;/span> len(ccm_df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>l_pos &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>loc[lr_index[&lt;span style="color:#ae81ff">0&lt;/span>], POS]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>r_pos &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>loc[lr_index[&lt;span style="color:#ae81ff">1&lt;/span>], POS]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>mut_n &lt;span style="color:#f92672">=&lt;/span> len(ccm_df[ccm_df[HSCORE] &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>eps_scaler &lt;span style="color:#f92672">=&lt;/span> es
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>freq_sum &lt;span style="color:#f92672">=&lt;/span> ccm_df[FREQ]&lt;span style="color:#f92672">.&lt;/span>sum()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>freq_avr &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>freq_sum &lt;span style="color:#f92672">/&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>length
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>per_sum &lt;span style="color:#f92672">=&lt;/span> ccm_df[PER]&lt;span style="color:#f92672">.&lt;/span>sum()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>per_avr &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>per_sum &lt;span style="color:#f92672">/&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>length
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>ent_sum &lt;span style="color:#f92672">=&lt;/span> ccm_df[ENT]&lt;span style="color:#f92672">.&lt;/span>sum()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>ent_avr &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>ent_sum &lt;span style="color:#f92672">/&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>length
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>hscore_sum &lt;span style="color:#f92672">=&lt;/span> ccm_df[HSCORE]&lt;span style="color:#f92672">.&lt;/span>sum()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>hscore_avr &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>hscore_sum &lt;span style="color:#f92672">/&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>length
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">to_dict&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;index&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>idx, POS: self&lt;span style="color:#f92672">.&lt;/span>i, FREQ: self&lt;span style="color:#f92672">.&lt;/span>i_freq, PER: self&lt;span style="color:#f92672">.&lt;/span>i_per,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ENT: self&lt;span style="color:#f92672">.&lt;/span>i_ent, HSCORE: self&lt;span style="color:#f92672">.&lt;/span>i_hscore, &lt;span style="color:#e6db74">&amp;#39;length&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>length,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;freq_sum&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>freq_sum, &lt;span style="color:#e6db74">&amp;#39;freq_avr&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>freq_avr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PER_SUM: self&lt;span style="color:#f92672">.&lt;/span>per_sum, PER_AVR: self&lt;span style="color:#f92672">.&lt;/span>per_avr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ENT_SUM: self&lt;span style="color:#f92672">.&lt;/span>ent_sum, ENT_AVR: self&lt;span style="color:#f92672">.&lt;/span>ent_avr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HSCORE_SUM: self&lt;span style="color:#f92672">.&lt;/span>hscore_sum, HSCORE_AVR: self&lt;span style="color:#f92672">.&lt;/span>hscore_avr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;eps_scaler&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>eps_scaler, &lt;span style="color:#e6db74">&amp;#39;left_distance&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>l_dist,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;right_distance&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>r_dist, &lt;span style="color:#e6db74">&amp;#39;l_pos&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>l_pos,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;r_pos&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>r_pos, &lt;span style="color:#e6db74">&amp;#39;mut_n&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>mut_n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-local-eps-설정-로직">
 3. Local Eps 설정 로직
 &lt;a class="anchor" href="#3-local-eps-%ec%84%a4%ec%a0%95-%eb%a1%9c%ec%a7%81">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code># --- EPS Region ---
def get_eps_region(df, idx, info):
 pos = df.loc[idx, POS]
 cur_hscore = df.loc[idx, HSCORE]
 eps_scaler = ceil(EPSILON_SCALING_FACTOR * cur_hscore)
 ldeps = rdeps = eps_scaler * EPSILON

 ldeps = min(ldeps, info.maxeps)
 rdeps = min(rdeps, info.maxeps)

 l_idx, r_idx = idx - 1, idx + 1
 while l_idx &amp;gt;= 0 and (pos - df.loc[l_idx, POS]) &amp;lt;= ldeps:
 l_idx -= 1
 while r_idx &amp;lt; len(df) and (df.loc[r_idx, POS] - pos) &amp;lt;= rdeps:
 r_idx += 1

 return [l_idx + 1, r_idx - 1], [idx - (l_idx + 1), (r_idx - 1) - idx], eps_scaler
&lt;/code>&lt;/pre>&lt;h3 id="4-후보-core-돌연변이-선택">
 4. 후보 Core 돌연변이 선택
 &lt;a class="anchor" href="#4-%ed%9b%84%eb%b3%b4-core-%eb%8f%8c%ec%97%b0%eb%b3%80%ec%9d%b4-%ec%84%a0%ed%83%9d">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code># --- Core Mutation Detection ---
def get_candidate_core_mutations(df, info, tag):
 mut_list = []
 ccm_list = []
 df = mutation_filtering(df)

 for idx, pos in enumerate(df[POS]):
 lr_idx, lr_dist, es = get_eps_region(df, idx, info)
 stat = get_eps_stats(idx, pos, df, lr_idx, lr_dist, es)
 d = stat.to_dict()
 mut_list.append(d)

 if d[&amp;#39;mut_n&amp;#39;] &amp;gt;= MIN_MUTATIONS and d[HSCORE_SUM] &amp;gt;= CCM_MIN_HSCORE_SUM and d[HSCORE_AVR] &amp;gt;= CCM_MIN_HSCORE_AVR and d[HSCORE] &amp;gt;= CCM_MIN_HSCORE:
 ccm_list.append(idx)

 with open(f&amp;#34;{info.outdir}/total_results_{tag}.tsv&amp;#34;, &amp;#39;w&amp;#39;) as f:
 f.write(&amp;#39;\t&amp;#39;.join(mut_list[0].keys()) + &amp;#39;\n&amp;#39;)
 for m in mut_list:
 f.write(&amp;#39;\t&amp;#39;.join(map(str, m.values())) + &amp;#39;\n&amp;#39;)

 with open(f&amp;#34;{info.outdir}/ccm_results_{tag}.tsv&amp;#34;, &amp;#39;w&amp;#39;) as f:
 f.write(&amp;#39;\t&amp;#39;.join(mut_list[0].keys()) + &amp;#39;\n&amp;#39;)
 for i in ccm_list:
 f.write(&amp;#39;\t&amp;#39;.join(map(str, mut_list[i].values())) + &amp;#39;\n&amp;#39;)

 return np.array(mut_list), ccm_list
&lt;/code>&lt;/pre>&lt;h3 id="5-cluster-expansion-로직">
 5. Cluster Expansion 로직
 &lt;a class="anchor" href="#5-cluster-expansion-%eb%a1%9c%ec%a7%81">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code># --- Cluster Expansion ---
def expand_cluster(ccm_idx, mut_list, info):
 es_l = es_r = mut_list[ccm_idx][&amp;#39;eps_scaler&amp;#39;]
 l_idx, r_idx = ccm_idx - 1, ccm_idx + 1
 mut_n = len(mut_list)

 l_max, r_max = mut_list[ccm_idx][&amp;#39;left_distance&amp;#39;], mut_list[ccm_idx][&amp;#39;right_distance&amp;#39;]
 l_pos = mut_list[ccm_idx][POS]

 while l_idx &amp;gt;= 0 and (l_pos - mut_list[l_idx][POS]) &amp;lt;= l_max:
 delta = es_l - mut_list[l_idx][&amp;#39;eps_scaler&amp;#39;]
 es_l -= delta / info.es_control_const
 l_max = max(info.eps * es_l, 0)
 l_idx -= 1

 while r_idx &amp;lt; mut_n and (mut_list[r_idx][POS] - l_pos) &amp;lt;= r_max:
 delta = es_r - mut_list[r_idx][&amp;#39;eps_scaler&amp;#39;]
 es_r -= delta / info.es_control_const
 r_max = max(info.eps * es_r, 0)
 r_idx += 1

 l_idx = max(l_idx + 1, 0)
 r_idx = min(r_idx - 1, mut_n - 1)
 clust = [a[POS] for a in mut_list[l_idx:r_idx + 1] if a[HSCORE] &amp;gt; 0]

 return {
 &amp;#39;left_position&amp;#39;: min(clust),
 &amp;#39;right_position&amp;#39;: max(clust),
 &amp;#39;length&amp;#39;: max(clust) - min(clust) + 1,
 &amp;#39;mut_positions&amp;#39;: &amp;#39;,&amp;#39;.join(map(str, sorted(clust)))
 }
&lt;/code>&lt;/pre>&lt;h3 id="6-dynamic-clustering-알">
 6. Dynamic Clustering 알
 &lt;a class="anchor" href="#6-dynamic-clustering-%ec%95%8c">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code># --- Dynamic Clustering ---
def dynaclust(mut_list, ccm_list, info, tag):
 clusters = [expand_cluster(i, mut_list, info) for i in ccm_list]
 clusters.sort(key=lambda x: x[&amp;#39;left_position&amp;#39;])

 merged = []
 i = 0
 while i &amp;lt; len(clusters):
 l, r = clusters[i][&amp;#39;left_position&amp;#39;], clusters[i][&amp;#39;right_position&amp;#39;]
 muts = set(map(int, clusters[i][&amp;#39;mut_positions&amp;#39;].split(&amp;#39;,&amp;#39;)))
 j = i + 1
 while j &amp;lt; len(clusters) and clusters[j][&amp;#39;left_position&amp;#39;] &amp;lt;= r:
 r = max(r, clusters[j][&amp;#39;right_position&amp;#39;])
 muts.update(map(int, clusters[j][&amp;#39;mut_positions&amp;#39;].split(&amp;#39;,&amp;#39;)))
 j += 1
 if len(muts) &amp;gt;= MIN_MUTATIONS:
 merged.append({
 &amp;#39;left_position&amp;#39;: min(muts),
 &amp;#39;right_position&amp;#39;: max(muts),
 &amp;#39;length&amp;#39;: max(muts) - min(muts) + 1,
 &amp;#39;mut_positions&amp;#39;: &amp;#39;,&amp;#39;.join(map(str, sorted(muts)))
 })
 i = j

 with open(f&amp;#34;{info.outdir}/clusters_{tag}.txt&amp;#34;, &amp;#39;w&amp;#39;) as f:
 f.write(&amp;#39;\t&amp;#39;.join(merged[0].keys()) + &amp;#39;\n&amp;#39;)
 for m in merged:
 f.write(&amp;#39;\t&amp;#39;.join(map(str, m.values())) + &amp;#39;\n&amp;#39;)

 return merged
&lt;/code>&lt;/pre></description></item><item><title>MutClust #2 코드정리: arg_parser.py</title><link>https://yshghid.github.io/docs/study/algorithm/algo2/</link><pubDate>Thu, 31 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/algorithm/algo2/</guid><description>&lt;h1 id="mutclust-2-코드정리-arg_parserpy">
 MutClust #2 코드정리: arg_parser.py
 &lt;a class="anchor" href="#mutclust-2-%ec%bd%94%eb%93%9c%ec%a0%95%eb%a6%ac-arg_parserpy">#&lt;/a>
&lt;/h1>
&lt;p>#2025-07-31&lt;/p>
&lt;hr>
&lt;p>MutClust 알고리즘의 코드 구성은 아래와 같은데&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>MutClust
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── sc/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── lib.py 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── arg_parser.py // 실행 설정
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── utils.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── Test
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>arg_parser.py는 실험 환경 파라미터 세팅 및 CLI 인자 파싱을 포함한다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># === arg_parser.py ===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> argparse
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> os.path &lt;span style="color:#f92672">import&lt;/span> exists
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> src.mlib &lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DIMINISHING_FACTOR, EPSILON, EPSILON_SCALING_FACTOR,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MAX_EPS, MIN_CLUSTER_LENGTH, CCM_MIN_PERCENTAGE_SUM
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ArgsInfo&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">__init__&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>args &lt;span style="color:#f92672">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>fin &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>ref &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>outdir &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>eps &lt;span style="color:#f92672">=&lt;/span> EPSILON
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>maxeps &lt;span style="color:#f92672">=&lt;/span> MAX_EPS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>min_persum &lt;span style="color:#f92672">=&lt;/span> CCM_MIN_PERCENTAGE_SUM
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>eps_scaler_const &lt;span style="color:#f92672">=&lt;/span> EPSILON_SCALING_FACTOR
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>es_control_const &lt;span style="color:#f92672">=&lt;/span> DIMINISHING_FACTOR
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>min_cluster_length &lt;span style="color:#f92672">=&lt;/span> MIN_CLUSTER_LENGTH
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">set_env&lt;/span>(input_path&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">None&lt;/span>, reference&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">None&lt;/span>, output_path&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">None&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info &lt;span style="color:#f92672">=&lt;/span> ArgsInfo()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser &lt;span style="color:#f92672">=&lt;/span> argparse&lt;span style="color:#f92672">.&lt;/span>ArgumentParser(prog&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;cluster.py&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser&lt;span style="color:#f92672">.&lt;/span>add_argument(&lt;span style="color:#e6db74">&amp;#39;-f&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;--input_file&amp;#39;&lt;/span>, type&lt;span style="color:#f92672">=&lt;/span>str, default&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/data3/projects/2020_MUTCLUST/Data/Rawdata/COVID19/nucleotide_data/mutclust_input_data.txt&amp;#39;&lt;/span>, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;mutation frequency data file&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser&lt;span style="color:#f92672">.&lt;/span>add_argument(&lt;span style="color:#e6db74">&amp;#39;-r&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;--ref&amp;#39;&lt;/span>, type&lt;span style="color:#f92672">=&lt;/span>str, default&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/data3/projects/2020_MUTCLUST/Data/Rawdata/COVID19/nucleotide_data/new_reference.fasta&amp;#39;&lt;/span>, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;the reference genome&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser&lt;span style="color:#f92672">.&lt;/span>add_argument(&lt;span style="color:#e6db74">&amp;#39;-e&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;--eps&amp;#39;&lt;/span>, type&lt;span style="color:#f92672">=&lt;/span>int, default&lt;span style="color:#f92672">=&lt;/span>EPSILON, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;width of window (epsilon)&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser&lt;span style="color:#f92672">.&lt;/span>add_argument(&lt;span style="color:#e6db74">&amp;#39;--maxeps&amp;#39;&lt;/span>, type&lt;span style="color:#f92672">=&lt;/span>int, default&lt;span style="color:#f92672">=&lt;/span>MAX_EPS, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;maximum eps&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser&lt;span style="color:#f92672">.&lt;/span>add_argument(&lt;span style="color:#e6db74">&amp;#39;--minps&amp;#39;&lt;/span>, type&lt;span style="color:#f92672">=&lt;/span>float, default&lt;span style="color:#f92672">=&lt;/span>CCM_MIN_PERCENTAGE_SUM, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;minimum per_sum&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser&lt;span style="color:#f92672">.&lt;/span>add_argument(&lt;span style="color:#e6db74">&amp;#39;--es&amp;#39;&lt;/span>, type&lt;span style="color:#f92672">=&lt;/span>float, default&lt;span style="color:#f92672">=&lt;/span>EPSILON_SCALING_FACTOR, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;eps scaling factor&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser&lt;span style="color:#f92672">.&lt;/span>add_argument(&lt;span style="color:#e6db74">&amp;#39;--exd&amp;#39;&lt;/span>, type&lt;span style="color:#f92672">=&lt;/span>float, default&lt;span style="color:#f92672">=&lt;/span>DIMINISHING_FACTOR, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;cluster expansion es diminishing factor&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser&lt;span style="color:#f92672">.&lt;/span>add_argument(&lt;span style="color:#e6db74">&amp;#39;--minl&amp;#39;&lt;/span>, type&lt;span style="color:#f92672">=&lt;/span>int, default&lt;span style="color:#f92672">=&lt;/span>MIN_CLUSTER_LENGTH, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;minimum cluster length&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> args &lt;span style="color:#f92672">=&lt;/span> parser&lt;span style="color:#f92672">.&lt;/span>parse_args()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info&lt;span style="color:#f92672">.&lt;/span>fin &lt;span style="color:#f92672">=&lt;/span> input_path &lt;span style="color:#66d9ef">if&lt;/span> input_path &lt;span style="color:#66d9ef">else&lt;/span> args&lt;span style="color:#f92672">.&lt;/span>input_file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info&lt;span style="color:#f92672">.&lt;/span>ref &lt;span style="color:#f92672">=&lt;/span> reference &lt;span style="color:#66d9ef">if&lt;/span> reference &lt;span style="color:#66d9ef">else&lt;/span> args&lt;span style="color:#f92672">.&lt;/span>ref
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info&lt;span style="color:#f92672">.&lt;/span>outdir &lt;span style="color:#f92672">=&lt;/span> output_path &lt;span style="color:#66d9ef">if&lt;/span> output_path &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./output&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> exists(info&lt;span style="color:#f92672">.&lt;/span>fin):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Input file does not exist: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>fin&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info&lt;span style="color:#f92672">.&lt;/span>eps &lt;span style="color:#f92672">=&lt;/span> args&lt;span style="color:#f92672">.&lt;/span>eps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info&lt;span style="color:#f92672">.&lt;/span>maxeps &lt;span style="color:#f92672">=&lt;/span> args&lt;span style="color:#f92672">.&lt;/span>maxeps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info&lt;span style="color:#f92672">.&lt;/span>min_persum &lt;span style="color:#f92672">=&lt;/span> args&lt;span style="color:#f92672">.&lt;/span>minps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info&lt;span style="color:#f92672">.&lt;/span>eps_scaler_const &lt;span style="color:#f92672">=&lt;/span> args&lt;span style="color:#f92672">.&lt;/span>es
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info&lt;span style="color:#f92672">.&lt;/span>es_control_const &lt;span style="color:#f92672">=&lt;/span> args&lt;span style="color:#f92672">.&lt;/span>exd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info&lt;span style="color:#f92672">.&lt;/span>min_cluster_length &lt;span style="color:#f92672">=&lt;/span> args&lt;span style="color:#f92672">.&lt;/span>minl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> info
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>BFS/DFS #3 게임 맵 최단거리</title><link>https://yshghid.github.io/docs/study/algorithm/algo8/</link><pubDate>Mon, 21 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/algorithm/algo8/</guid><description>&lt;h1 id="bfsdfs-3-게임-맵-최단거리">
 BFS/DFS #3 게임 맵 최단거리
 &lt;a class="anchor" href="#bfsdfs-3-%ea%b2%8c%ec%9e%84-%eb%a7%b5-%ec%b5%9c%eb%8b%a8%ea%b1%b0%eb%a6%ac">#&lt;/a>
&lt;/h1>
&lt;p>#2025-07-21&lt;/p>
&lt;hr>
&lt;p>문제: ROR 게임은 두 팀으로 나누어서 진행하며, 상대 팀 진영을 먼저 파괴하면 이기는 게임입니다. 따라서, 각 팀은 상대 팀 진영에 최대한 빨리 도착하는 것이 유리합니다. 지금부터 당신은 한 팀의 팀원이 되어 게임을 진행하려고 합니다. 다음은 5 x 5 크기의 맵에, 당신의 캐릭터가 (행: 1, 열: 1) 위치에 있고, 상대 팀 진영은 (행: 5, 열: 5) 위치에 있는 경우의 예시입니다.&lt;/p>
&lt;p>&lt;img src="https://github.com/user-attachments/assets/0c2834d7-07d7-4c5a-b6c6-9058de58a3da" alt="image" />&lt;/p>
&lt;p>위 그림에서 검은색 부분은 벽으로 막혀있어 갈 수 없는 길이며, 흰색 부분은 갈 수 있는 길입니다. 캐릭터가 움직일 때는 동, 서, 남, 북 방향으로 한 칸씩 이동하며, 게임 맵을 벗어난 길은 갈 수 없습니다. 아래 예시는 캐릭터가 상대 팀 진영으로 가는 두 가지 방법을 나타내고 있습니다.&lt;/p></description></item><item><title>BFS/DFS #1 타겟 넘버</title><link>https://yshghid.github.io/docs/study/algorithm/algo6/</link><pubDate>Sat, 19 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/algorithm/algo6/</guid><description>&lt;h1 id="bfsdfs-1-타겟-넘버">
 BFS/DFS #1 타겟 넘버
 &lt;a class="anchor" href="#bfsdfs-1-%ed%83%80%ea%b2%9f-%eb%84%98%eb%b2%84">#&lt;/a>
&lt;/h1>
&lt;p>#2025-07-19&lt;/p>
&lt;hr>
&lt;p>문제: n개의 음이 아닌 정수들이 있습니다. 이 정수들을 순서를 바꾸지 않고 적절히 더하거나 빼서 타겟 넘버를 만들려고 합니다. 사용할 수 있는 숫자가 담긴 배열 &lt;code>numbers&lt;/code>, 타겟 넘버 &lt;code>target&lt;/code>이 매개변수로 주어질 때 숫자를 적절히 더하고 빼서 타겟 넘버를 만드는 방법의 수를 return 하도록 solution 함수를 작성해주세요.&lt;/p>
&lt;p>제한사항: 주어지는 숫자의 개수는 2개 이상 20개 이하입니다. 각 숫자는 1 이상 50 이하인 자연수입니다. 타겟 넘버는 1 이상 1000 이하인 자연수입니다.&lt;/p></description></item><item><title>BFS/DFS #2 네트워크</title><link>https://yshghid.github.io/docs/study/algorithm/algo7/</link><pubDate>Sat, 19 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/algorithm/algo7/</guid><description>&lt;h1 id="bfsdfs-2-네트워크">
 BFS/DFS #2 네트워크
 &lt;a class="anchor" href="#bfsdfs-2-%eb%84%a4%ed%8a%b8%ec%9b%8c%ed%81%ac">#&lt;/a>
&lt;/h1>
&lt;p>#2025-07-19&lt;/p>
&lt;hr>
&lt;p>문제: 컴퓨터 A와 컴퓨터 B가 직접적으로 연결되어있고, 컴퓨터 B와 컴퓨터 C가 직접적으로 연결되어 있을 때 컴퓨터 A와 컴퓨터 C도 간접적으로 연결되어 정보를 교환할 수 있습니다. 이때 컴퓨터 A, B, C는 모두 같은 네트워크 상에 있다고 할 수 있습니다. 컴퓨터의 개수 n, 연결에 대한 정보가 담긴 2차원 배열 computers가 매개변수로 주어질 때, 네트워크의 개수를 return 하도록 solution 함수를 작성하시오.&lt;/p>
&lt;p>제한사항: 컴퓨터의 개수 n은 1 이상 200 이하인 자연수입니다. 각 컴퓨터는 0부터 &lt;code>n-1&lt;/code>인 정수로 표현합니다. i번 컴퓨터와 j번 컴퓨터가 연결되어 있으면 computers[i][j]를 1로 표현합니다. computer[i][i]는 항상 1입니다.&lt;/p></description></item><item><title>BFS 공부</title><link>https://yshghid.github.io/docs/study/algorithm/algo5/</link><pubDate>Fri, 04 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/algorithm/algo5/</guid><description>&lt;h1 id="bfs-공부">
 BFS 공부
 &lt;a class="anchor" href="#bfs-%ea%b3%b5%eb%b6%80">#&lt;/a>
&lt;/h1>
&lt;hr>
&lt;h3 id="1-기본로직">
 1. 기본로직
 &lt;a class="anchor" href="#1-%ea%b8%b0%eb%b3%b8%eb%a1%9c%ec%a7%81">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>1. graph 만든다
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2. 인접 리스트 정렬
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>3. bfs 만든다.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>i) visited 만들고 / queue 만들어서 start만 넣는다. 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ii) queue가 빌때까지 다음을 수행
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>: queue의 첫번째값 v를 꺼냄. v가 미방문이면? visited에 v추가하고. v의 이웃을 봣을때 미방문이면? queue에 추가.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>4. bfs 돌린다.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>참고 문제: &lt;a href="https://yshghid.github.io/docs/study/algorithm/algo3/#1-%eb%b0%a9%eb%ac%b8-%ec%88%9c%ec%84%9c-%ec%b6%9c%eb%a0%a5%ed%95%98%ea%b8%b0">BFS #1&lt;/a>&lt;/p>
&lt;h1 id="">
 
 &lt;a class="anchor" href="#">#&lt;/a>
&lt;/h1></description></item><item><title>BFS #1 #2</title><link>https://yshghid.github.io/docs/study/algorithm/algo3/</link><pubDate>Thu, 03 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/algorithm/algo3/</guid><description>&lt;h1 id="bfs-1-2">
 BFS #1 #2
 &lt;a class="anchor" href="#bfs-1-2">#&lt;/a>
&lt;/h1>
&lt;p>#2025-07-03&lt;/p>
&lt;hr>
&lt;h3 id="1-방문-순서-출력하기">
 1. 방문 순서 출력하기
 &lt;a class="anchor" href="#1-%eb%b0%a9%eb%ac%b8-%ec%88%9c%ec%84%9c-%ec%b6%9c%eb%a0%a5%ed%95%98%ea%b8%b0">#&lt;/a>
&lt;/h3>
&lt;p>#문제 설명&lt;/p>
&lt;p>정점의 개수 n, 간선의 개수 m, 시작 정점 s가 주어진다.
이후 m개의 간선 정보(정점 a, 정점 b)가 주어진다.
인접한 정점들을 오름차순으로 방문한다고 할 때, BFS로 방문한 정점의 순서를 출력하시오.&lt;/p>
&lt;p>#입력 형식&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>5 4 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1 3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2 4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>3 5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>#출력 예시&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>1 2 3 4 5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>#정답&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> collections &lt;span style="color:#f92672">import&lt;/span> deque
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 입력&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>n, m, s &lt;span style="color:#f92672">=&lt;/span> map(int, input()&lt;span style="color:#f92672">.&lt;/span>split()) &lt;span style="color:#75715e"># 정점 개수, 간선 개수, 시작 정점&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>graph &lt;span style="color:#f92672">=&lt;/span> {i: [] &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">1&lt;/span>, n&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 간선 입력&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(m):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a, b &lt;span style="color:#f92672">=&lt;/span> map(int, input()&lt;span style="color:#f92672">.&lt;/span>split())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph[a]&lt;span style="color:#f92672">.&lt;/span>append(b)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph[b]&lt;span style="color:#f92672">.&lt;/span>append(a) &lt;span style="color:#75715e"># 양방향 그래프&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 인접 리스트 정렬 (오름차순 방문)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> node &lt;span style="color:#f92672">in&lt;/span> graph:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph[node]&lt;span style="color:#f92672">.&lt;/span>sort()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># BFS 함수&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">bfs&lt;/span>(start):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited &lt;span style="color:#f92672">=&lt;/span> set()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue &lt;span style="color:#f92672">=&lt;/span> deque([start])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited_order &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> queue:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v &lt;span style="color:#f92672">=&lt;/span> queue&lt;span style="color:#f92672">.&lt;/span>popleft()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> v &lt;span style="color:#f92672">not&lt;/span> &lt;span style="color:#f92672">in&lt;/span> visited:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited&lt;span style="color:#f92672">.&lt;/span>add(v)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited_order&lt;span style="color:#f92672">.&lt;/span>append(v)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> neighbor &lt;span style="color:#f92672">in&lt;/span> graph[v]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> neighbor &lt;span style="color:#f92672">not&lt;/span> &lt;span style="color:#f92672">in&lt;/span> visited:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue&lt;span style="color:#f92672">.&lt;/span>append(neighbor)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> visited_order
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 출력&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>order &lt;span style="color:#f92672">=&lt;/span> bfs(s)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(map(str, order)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>#풀이&lt;/p></description></item><item><title>BFS #3</title><link>https://yshghid.github.io/docs/study/algorithm/algo4/</link><pubDate>Thu, 03 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/algorithm/algo4/</guid><description>&lt;h1 id="bfs-3">
 BFS #3
 &lt;a class="anchor" href="#bfs-3">#&lt;/a>
&lt;/h1>
&lt;p>#2025-07-03&lt;/p>
&lt;hr>
&lt;h3 id="3-가장-가까운-목표지점까지의-거리">
 3. 가장 가까운 목표지점까지의 거리
 &lt;a class="anchor" href="#3-%ea%b0%80%ec%9e%a5-%ea%b0%80%ea%b9%8c%ec%9a%b4-%eb%aa%a9%ed%91%9c%ec%a7%80%ec%a0%90%ea%b9%8c%ec%a7%80%ec%9d%98-%ea%b1%b0%eb%a6%ac">#&lt;/a>
&lt;/h3>
&lt;p>#문제 설명&lt;/p>
&lt;p>1과 0으로 구성된 maps 배열이 주어집니다.
maps[y][x] == 1인 곳은 이동할 수 있고, 0인 곳은 이동할 수 없습니다.&lt;/p>
&lt;p>시작점은 (0,0), 도착점은 (n-1, m-1)입니다.
상, 하, 좌, 우 4방향으로만 이동할 수 있을 때, 도착지까지 최단 거리를 구하세요.
도착할 수 없는 경우 -1을 반환하세요.&lt;/p>
&lt;p>#제한사항&lt;/p>
&lt;p>maps는 5 ≤ maps의 세로 길이, 가로 길이 ≤ 100&lt;/p>
&lt;p>시작점과 도착점은 항상 1입니다.&lt;/p></description></item></channel></rss>