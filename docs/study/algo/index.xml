<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Algorithm on</title><link>https://yshghid.github.io/docs/study/algo/</link><description>Recent content in Algorithm on</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 31 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://yshghid.github.io/docs/study/algo/index.xml" rel="self" type="application/rss+xml"/><item><title>MutClust #1 코드정리: lib.py</title><link>https://yshghid.github.io/docs/study/algo/algo1/</link><pubDate>Thu, 31 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/algo/algo1/</guid><description>&lt;h1 id="mutclust-1-코드정리-libpy">
 MutClust #1 코드정리: lib.py
 &lt;a class="anchor" href="#mutclust-1-%ec%bd%94%eb%93%9c%ec%a0%95%eb%a6%ac-libpy">#&lt;/a>
&lt;/h1>
&lt;p>#2025-07-31&lt;/p>
&lt;hr>
&lt;p>MutClust 알고리즘의 코드 구성은 아래와 같은데&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>MutClust
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── sc/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── lib.py // 핵심 알고리즘 로직
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── arg_parser.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── utils.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── Test
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>lib.py는 후보 Core 선택 로직과 클러스터 탐지 알고리즘을 포함한다.&lt;/p>
&lt;h1 id="">
 
 &lt;a class="anchor" href="#">#&lt;/a>
&lt;/h1>
&lt;h3 id="1-config--constant-선언">
 1. Config &amp;amp; Constant 선언
 &lt;a class="anchor" href="#1-config--constant-%ec%84%a0%ec%96%b8">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># === mlib.py ===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> math &lt;span style="color:#f92672">import&lt;/span> ceil
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#66d9ef">as&lt;/span> np
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> src.utils &lt;span style="color:#f92672">import&lt;/span> mutation_filtering
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># --- Constants ---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>POS &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Position&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FREQ &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Frequency&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PER &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Percentage&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ENT &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Entropy&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HSCORE &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;H-score&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HSCORE_SUM &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;H-score_sum&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HSCORE_AVR &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;H-score_avr&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PER_SUM &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;per_sum&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ENT_SUM &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;ent_sum&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PER_AVR &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;per_avr&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ENT_AVR &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;ent_avr&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>EPSILON &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>EPSILON_SCALING_FACTOR &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DIMINISHING_FACTOR &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MIN_CLUSTER_LENGTH &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CCM_MIN_HSCORE_SUM &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.05&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CCM_MIN_HSCORE_AVR &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.01&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CCM_MIN_HSCORE &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.03&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MIN_MUTATIONS &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># --- Config Init ---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">init&lt;/span>(d, info):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">--- Configurations ---&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Input data: &amp;#39;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>fin&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39; &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>d&lt;span style="color:#f92672">.&lt;/span>shape&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Output dir: &amp;#39;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>outdir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;Parameters:&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34; Min Eps=&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>eps&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34; Max Eps=&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>maxeps&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34; Min per_sum=&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>min_persum&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#e6db74">.1f&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34; Eps scaling factor=&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>eps_scaler_const&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#e6db74">.1f&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34; Expansion diminishing factor=&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>es_control_const&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34; Min cluster length=&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>min_cluster_length&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;----------------------&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-eps-내-중요도-계산">
 2. Eps 내 중요도 계산
 &lt;a class="anchor" href="#2-eps-%eb%82%b4-%ec%a4%91%ec%9a%94%eb%8f%84-%ea%b3%84%ec%82%b0">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># --- EPS Stats ---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">get_eps_stats&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">__init__&lt;/span>(self, idx, pos, df, lr_index, lr_distance, es):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>idx &lt;span style="color:#f92672">=&lt;/span> idx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>i &lt;span style="color:#f92672">=&lt;/span> pos
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>i_per &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>loc[idx, PER]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>i_freq &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>loc[idx, FREQ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>i_ent &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>loc[idx, ENT]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>i_hscore &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>loc[idx, HSCORE]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>l_dist, self&lt;span style="color:#f92672">.&lt;/span>r_dist &lt;span style="color:#f92672">=&lt;/span> lr_distance
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ccm_df &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>loc[lr_index[&lt;span style="color:#ae81ff">0&lt;/span>]:lr_index[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>length &lt;span style="color:#f92672">=&lt;/span> len(ccm_df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>l_pos &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>loc[lr_index[&lt;span style="color:#ae81ff">0&lt;/span>], POS]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>r_pos &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>loc[lr_index[&lt;span style="color:#ae81ff">1&lt;/span>], POS]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>mut_n &lt;span style="color:#f92672">=&lt;/span> len(ccm_df[ccm_df[HSCORE] &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>eps_scaler &lt;span style="color:#f92672">=&lt;/span> es
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>freq_sum &lt;span style="color:#f92672">=&lt;/span> ccm_df[FREQ]&lt;span style="color:#f92672">.&lt;/span>sum()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>freq_avr &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>freq_sum &lt;span style="color:#f92672">/&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>length
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>per_sum &lt;span style="color:#f92672">=&lt;/span> ccm_df[PER]&lt;span style="color:#f92672">.&lt;/span>sum()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>per_avr &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>per_sum &lt;span style="color:#f92672">/&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>length
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>ent_sum &lt;span style="color:#f92672">=&lt;/span> ccm_df[ENT]&lt;span style="color:#f92672">.&lt;/span>sum()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>ent_avr &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>ent_sum &lt;span style="color:#f92672">/&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>length
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>hscore_sum &lt;span style="color:#f92672">=&lt;/span> ccm_df[HSCORE]&lt;span style="color:#f92672">.&lt;/span>sum()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>hscore_avr &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>hscore_sum &lt;span style="color:#f92672">/&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>length
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">to_dict&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;index&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>idx, POS: self&lt;span style="color:#f92672">.&lt;/span>i, FREQ: self&lt;span style="color:#f92672">.&lt;/span>i_freq, PER: self&lt;span style="color:#f92672">.&lt;/span>i_per,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ENT: self&lt;span style="color:#f92672">.&lt;/span>i_ent, HSCORE: self&lt;span style="color:#f92672">.&lt;/span>i_hscore, &lt;span style="color:#e6db74">&amp;#39;length&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>length,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;freq_sum&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>freq_sum, &lt;span style="color:#e6db74">&amp;#39;freq_avr&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>freq_avr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PER_SUM: self&lt;span style="color:#f92672">.&lt;/span>per_sum, PER_AVR: self&lt;span style="color:#f92672">.&lt;/span>per_avr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ENT_SUM: self&lt;span style="color:#f92672">.&lt;/span>ent_sum, ENT_AVR: self&lt;span style="color:#f92672">.&lt;/span>ent_avr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HSCORE_SUM: self&lt;span style="color:#f92672">.&lt;/span>hscore_sum, HSCORE_AVR: self&lt;span style="color:#f92672">.&lt;/span>hscore_avr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;eps_scaler&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>eps_scaler, &lt;span style="color:#e6db74">&amp;#39;left_distance&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>l_dist,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;right_distance&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>r_dist, &lt;span style="color:#e6db74">&amp;#39;l_pos&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>l_pos,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;r_pos&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>r_pos, &lt;span style="color:#e6db74">&amp;#39;mut_n&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>mut_n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-local-eps-설정-로직">
 3. Local Eps 설정 로직
 &lt;a class="anchor" href="#3-local-eps-%ec%84%a4%ec%a0%95-%eb%a1%9c%ec%a7%81">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code># --- EPS Region ---
def get_eps_region(df, idx, info):
 pos = df.loc[idx, POS]
 cur_hscore = df.loc[idx, HSCORE]
 eps_scaler = ceil(EPSILON_SCALING_FACTOR * cur_hscore)
 ldeps = rdeps = eps_scaler * EPSILON

 ldeps = min(ldeps, info.maxeps)
 rdeps = min(rdeps, info.maxeps)

 l_idx, r_idx = idx - 1, idx + 1
 while l_idx &amp;gt;= 0 and (pos - df.loc[l_idx, POS]) &amp;lt;= ldeps:
 l_idx -= 1
 while r_idx &amp;lt; len(df) and (df.loc[r_idx, POS] - pos) &amp;lt;= rdeps:
 r_idx += 1

 return [l_idx + 1, r_idx - 1], [idx - (l_idx + 1), (r_idx - 1) - idx], eps_scaler
&lt;/code>&lt;/pre>&lt;h3 id="4-후보-core-돌연변이-선택">
 4. 후보 Core 돌연변이 선택
 &lt;a class="anchor" href="#4-%ed%9b%84%eb%b3%b4-core-%eb%8f%8c%ec%97%b0%eb%b3%80%ec%9d%b4-%ec%84%a0%ed%83%9d">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code># --- Core Mutation Detection ---
def get_candidate_core_mutations(df, info, tag):
 mut_list = []
 ccm_list = []
 df = mutation_filtering(df)

 for idx, pos in enumerate(df[POS]):
 lr_idx, lr_dist, es = get_eps_region(df, idx, info)
 stat = get_eps_stats(idx, pos, df, lr_idx, lr_dist, es)
 d = stat.to_dict()
 mut_list.append(d)

 if d[&amp;#39;mut_n&amp;#39;] &amp;gt;= MIN_MUTATIONS and d[HSCORE_SUM] &amp;gt;= CCM_MIN_HSCORE_SUM and d[HSCORE_AVR] &amp;gt;= CCM_MIN_HSCORE_AVR and d[HSCORE] &amp;gt;= CCM_MIN_HSCORE:
 ccm_list.append(idx)

 with open(f&amp;#34;{info.outdir}/total_results_{tag}.tsv&amp;#34;, &amp;#39;w&amp;#39;) as f:
 f.write(&amp;#39;\t&amp;#39;.join(mut_list[0].keys()) + &amp;#39;\n&amp;#39;)
 for m in mut_list:
 f.write(&amp;#39;\t&amp;#39;.join(map(str, m.values())) + &amp;#39;\n&amp;#39;)

 with open(f&amp;#34;{info.outdir}/ccm_results_{tag}.tsv&amp;#34;, &amp;#39;w&amp;#39;) as f:
 f.write(&amp;#39;\t&amp;#39;.join(mut_list[0].keys()) + &amp;#39;\n&amp;#39;)
 for i in ccm_list:
 f.write(&amp;#39;\t&amp;#39;.join(map(str, mut_list[i].values())) + &amp;#39;\n&amp;#39;)

 return np.array(mut_list), ccm_list
&lt;/code>&lt;/pre>&lt;h3 id="5-cluster-expansion-로직">
 5. Cluster Expansion 로직
 &lt;a class="anchor" href="#5-cluster-expansion-%eb%a1%9c%ec%a7%81">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code># --- Cluster Expansion ---
def expand_cluster(ccm_idx, mut_list, info):
 es_l = es_r = mut_list[ccm_idx][&amp;#39;eps_scaler&amp;#39;]
 l_idx, r_idx = ccm_idx - 1, ccm_idx + 1
 mut_n = len(mut_list)

 l_max, r_max = mut_list[ccm_idx][&amp;#39;left_distance&amp;#39;], mut_list[ccm_idx][&amp;#39;right_distance&amp;#39;]
 l_pos = mut_list[ccm_idx][POS]

 while l_idx &amp;gt;= 0 and (l_pos - mut_list[l_idx][POS]) &amp;lt;= l_max:
 delta = es_l - mut_list[l_idx][&amp;#39;eps_scaler&amp;#39;]
 es_l -= delta / info.es_control_const
 l_max = max(info.eps * es_l, 0)
 l_idx -= 1

 while r_idx &amp;lt; mut_n and (mut_list[r_idx][POS] - l_pos) &amp;lt;= r_max:
 delta = es_r - mut_list[r_idx][&amp;#39;eps_scaler&amp;#39;]
 es_r -= delta / info.es_control_const
 r_max = max(info.eps * es_r, 0)
 r_idx += 1

 l_idx = max(l_idx + 1, 0)
 r_idx = min(r_idx - 1, mut_n - 1)
 clust = [a[POS] for a in mut_list[l_idx:r_idx + 1] if a[HSCORE] &amp;gt; 0]

 return {
 &amp;#39;left_position&amp;#39;: min(clust),
 &amp;#39;right_position&amp;#39;: max(clust),
 &amp;#39;length&amp;#39;: max(clust) - min(clust) + 1,
 &amp;#39;mut_positions&amp;#39;: &amp;#39;,&amp;#39;.join(map(str, sorted(clust)))
 }
&lt;/code>&lt;/pre>&lt;h3 id="6-dynamic-clustering-알">
 6. Dynamic Clustering 알
 &lt;a class="anchor" href="#6-dynamic-clustering-%ec%95%8c">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code># --- Dynamic Clustering ---
def dynaclust(mut_list, ccm_list, info, tag):
 clusters = [expand_cluster(i, mut_list, info) for i in ccm_list]
 clusters.sort(key=lambda x: x[&amp;#39;left_position&amp;#39;])

 merged = []
 i = 0
 while i &amp;lt; len(clusters):
 l, r = clusters[i][&amp;#39;left_position&amp;#39;], clusters[i][&amp;#39;right_position&amp;#39;]
 muts = set(map(int, clusters[i][&amp;#39;mut_positions&amp;#39;].split(&amp;#39;,&amp;#39;)))
 j = i + 1
 while j &amp;lt; len(clusters) and clusters[j][&amp;#39;left_position&amp;#39;] &amp;lt;= r:
 r = max(r, clusters[j][&amp;#39;right_position&amp;#39;])
 muts.update(map(int, clusters[j][&amp;#39;mut_positions&amp;#39;].split(&amp;#39;,&amp;#39;)))
 j += 1
 if len(muts) &amp;gt;= MIN_MUTATIONS:
 merged.append({
 &amp;#39;left_position&amp;#39;: min(muts),
 &amp;#39;right_position&amp;#39;: max(muts),
 &amp;#39;length&amp;#39;: max(muts) - min(muts) + 1,
 &amp;#39;mut_positions&amp;#39;: &amp;#39;,&amp;#39;.join(map(str, sorted(muts)))
 })
 i = j

 with open(f&amp;#34;{info.outdir}/clusters_{tag}.txt&amp;#34;, &amp;#39;w&amp;#39;) as f:
 f.write(&amp;#39;\t&amp;#39;.join(merged[0].keys()) + &amp;#39;\n&amp;#39;)
 for m in merged:
 f.write(&amp;#39;\t&amp;#39;.join(map(str, m.values())) + &amp;#39;\n&amp;#39;)

 return merged
&lt;/code>&lt;/pre></description></item><item><title>MutClust #2 코드정리: arg_parser.py</title><link>https://yshghid.github.io/docs/study/algo/algo2/</link><pubDate>Thu, 31 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/algo/algo2/</guid><description>&lt;h1 id="mutclust-2-코드정리-arg_parserpy">
 MutClust #2 코드정리: arg_parser.py
 &lt;a class="anchor" href="#mutclust-2-%ec%bd%94%eb%93%9c%ec%a0%95%eb%a6%ac-arg_parserpy">#&lt;/a>
&lt;/h1>
&lt;p>#2025-07-31&lt;/p>
&lt;hr>
&lt;p>MutClust 알고리즘의 코드 구성은 아래와 같은데&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>MutClust
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── sc/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── lib.py 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── arg_parser.py // 실행 설정
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── utils.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── Test
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>arg_parser.py는 실험 환경 파라미터 세팅 및 CLI 인자 파싱을 포함한다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># === arg_parser.py ===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> argparse
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> os.path &lt;span style="color:#f92672">import&lt;/span> exists
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> src.mlib &lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DIMINISHING_FACTOR, EPSILON, EPSILON_SCALING_FACTOR,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MAX_EPS, MIN_CLUSTER_LENGTH, CCM_MIN_PERCENTAGE_SUM
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ArgsInfo&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">__init__&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>args &lt;span style="color:#f92672">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>fin &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>ref &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>outdir &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>eps &lt;span style="color:#f92672">=&lt;/span> EPSILON
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>maxeps &lt;span style="color:#f92672">=&lt;/span> MAX_EPS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>min_persum &lt;span style="color:#f92672">=&lt;/span> CCM_MIN_PERCENTAGE_SUM
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>eps_scaler_const &lt;span style="color:#f92672">=&lt;/span> EPSILON_SCALING_FACTOR
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>es_control_const &lt;span style="color:#f92672">=&lt;/span> DIMINISHING_FACTOR
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>min_cluster_length &lt;span style="color:#f92672">=&lt;/span> MIN_CLUSTER_LENGTH
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">set_env&lt;/span>(input_path&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">None&lt;/span>, reference&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">None&lt;/span>, output_path&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">None&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info &lt;span style="color:#f92672">=&lt;/span> ArgsInfo()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser &lt;span style="color:#f92672">=&lt;/span> argparse&lt;span style="color:#f92672">.&lt;/span>ArgumentParser(prog&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;cluster.py&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser&lt;span style="color:#f92672">.&lt;/span>add_argument(&lt;span style="color:#e6db74">&amp;#39;-f&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;--input_file&amp;#39;&lt;/span>, type&lt;span style="color:#f92672">=&lt;/span>str, default&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/data3/projects/2020_MUTCLUST/Data/Rawdata/COVID19/nucleotide_data/mutclust_input_data.txt&amp;#39;&lt;/span>, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;mutation frequency data file&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser&lt;span style="color:#f92672">.&lt;/span>add_argument(&lt;span style="color:#e6db74">&amp;#39;-r&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;--ref&amp;#39;&lt;/span>, type&lt;span style="color:#f92672">=&lt;/span>str, default&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/data3/projects/2020_MUTCLUST/Data/Rawdata/COVID19/nucleotide_data/new_reference.fasta&amp;#39;&lt;/span>, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;the reference genome&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser&lt;span style="color:#f92672">.&lt;/span>add_argument(&lt;span style="color:#e6db74">&amp;#39;-e&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;--eps&amp;#39;&lt;/span>, type&lt;span style="color:#f92672">=&lt;/span>int, default&lt;span style="color:#f92672">=&lt;/span>EPSILON, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;width of window (epsilon)&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser&lt;span style="color:#f92672">.&lt;/span>add_argument(&lt;span style="color:#e6db74">&amp;#39;--maxeps&amp;#39;&lt;/span>, type&lt;span style="color:#f92672">=&lt;/span>int, default&lt;span style="color:#f92672">=&lt;/span>MAX_EPS, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;maximum eps&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser&lt;span style="color:#f92672">.&lt;/span>add_argument(&lt;span style="color:#e6db74">&amp;#39;--minps&amp;#39;&lt;/span>, type&lt;span style="color:#f92672">=&lt;/span>float, default&lt;span style="color:#f92672">=&lt;/span>CCM_MIN_PERCENTAGE_SUM, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;minimum per_sum&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser&lt;span style="color:#f92672">.&lt;/span>add_argument(&lt;span style="color:#e6db74">&amp;#39;--es&amp;#39;&lt;/span>, type&lt;span style="color:#f92672">=&lt;/span>float, default&lt;span style="color:#f92672">=&lt;/span>EPSILON_SCALING_FACTOR, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;eps scaling factor&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser&lt;span style="color:#f92672">.&lt;/span>add_argument(&lt;span style="color:#e6db74">&amp;#39;--exd&amp;#39;&lt;/span>, type&lt;span style="color:#f92672">=&lt;/span>float, default&lt;span style="color:#f92672">=&lt;/span>DIMINISHING_FACTOR, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;cluster expansion es diminishing factor&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser&lt;span style="color:#f92672">.&lt;/span>add_argument(&lt;span style="color:#e6db74">&amp;#39;--minl&amp;#39;&lt;/span>, type&lt;span style="color:#f92672">=&lt;/span>int, default&lt;span style="color:#f92672">=&lt;/span>MIN_CLUSTER_LENGTH, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;minimum cluster length&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> args &lt;span style="color:#f92672">=&lt;/span> parser&lt;span style="color:#f92672">.&lt;/span>parse_args()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info&lt;span style="color:#f92672">.&lt;/span>fin &lt;span style="color:#f92672">=&lt;/span> input_path &lt;span style="color:#66d9ef">if&lt;/span> input_path &lt;span style="color:#66d9ef">else&lt;/span> args&lt;span style="color:#f92672">.&lt;/span>input_file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info&lt;span style="color:#f92672">.&lt;/span>ref &lt;span style="color:#f92672">=&lt;/span> reference &lt;span style="color:#66d9ef">if&lt;/span> reference &lt;span style="color:#66d9ef">else&lt;/span> args&lt;span style="color:#f92672">.&lt;/span>ref
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info&lt;span style="color:#f92672">.&lt;/span>outdir &lt;span style="color:#f92672">=&lt;/span> output_path &lt;span style="color:#66d9ef">if&lt;/span> output_path &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./output&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> exists(info&lt;span style="color:#f92672">.&lt;/span>fin):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Input file does not exist: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>fin&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info&lt;span style="color:#f92672">.&lt;/span>eps &lt;span style="color:#f92672">=&lt;/span> args&lt;span style="color:#f92672">.&lt;/span>eps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info&lt;span style="color:#f92672">.&lt;/span>maxeps &lt;span style="color:#f92672">=&lt;/span> args&lt;span style="color:#f92672">.&lt;/span>maxeps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info&lt;span style="color:#f92672">.&lt;/span>min_persum &lt;span style="color:#f92672">=&lt;/span> args&lt;span style="color:#f92672">.&lt;/span>minps
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info&lt;span style="color:#f92672">.&lt;/span>eps_scaler_const &lt;span style="color:#f92672">=&lt;/span> args&lt;span style="color:#f92672">.&lt;/span>es
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info&lt;span style="color:#f92672">.&lt;/span>es_control_const &lt;span style="color:#f92672">=&lt;/span> args&lt;span style="color:#f92672">.&lt;/span>exd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info&lt;span style="color:#f92672">.&lt;/span>min_cluster_length &lt;span style="color:#f92672">=&lt;/span> args&lt;span style="color:#f92672">.&lt;/span>minl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> info
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>MutClust #3 코드정리: utils.py</title><link>https://yshghid.github.io/docs/study/algo/algo3/</link><pubDate>Thu, 31 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/algo/algo3/</guid><description>&lt;h1 id="mutclust-3-코드정리-utilspy">
 MutClust #3 코드정리: utils.py
 &lt;a class="anchor" href="#mutclust-3-%ec%bd%94%eb%93%9c%ec%a0%95%eb%a6%ac-utilspy">#&lt;/a>
&lt;/h1>
&lt;p>#2025-07-31&lt;/p>
&lt;hr>
&lt;p>MutClust 알고리즘의 코드 구성은 아래와 같은데&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>MutClust
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── sc/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── lib.py 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── arg_parser.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── utils.py // 보조 함수
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── Test
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>utils.py는 시각화, 필터링등 보조 함수를 포함한다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># === utils.py ===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#66d9ef">as&lt;/span> np
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pandas &lt;span style="color:#66d9ef">as&lt;/span> pd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> matplotlib.pyplot &lt;span style="color:#66d9ef">as&lt;/span> plt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> matplotlib.transforms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> matplotlib.patches
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pandas &lt;span style="color:#f92672">import&lt;/span> read_csv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HSCORE &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;H-score&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>POS &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Position&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FREQ &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Frequency&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PER &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Percentage&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ENT &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Entropy&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NUCLEOTIDE_ANNOTATION_PATH &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/data3/projects/2020_MUTCLUST/paper/example_data/input/covid_annotation.tsv&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">mutation_filtering&lt;/span>(df):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> df[(df[POS] &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">266&lt;/span>) &lt;span style="color:#f92672">&amp;amp;&lt;/span> (df[POS] &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">29674&lt;/span>)]&lt;span style="color:#f92672">.&lt;/span>reset_index(drop&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_GeneInfo_df&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> read_csv(NUCLEOTIDE_ANNOTATION_PATH, sep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> collections &lt;span style="color:#f92672">import&lt;/span> Counter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> multiprocessing &lt;span style="color:#f92672">import&lt;/span> Pool, Process, Manager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> os.path &lt;span style="color:#f92672">import&lt;/span> join
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pathlib &lt;span style="color:#f92672">import&lt;/span> Path
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#66d9ef">as&lt;/span> np
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pandas &lt;span style="color:#66d9ef">as&lt;/span> pd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pandas &lt;span style="color:#f92672">import&lt;/span> read_csv, DataFrame, concat, Series
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> scipy.stats &lt;span style="color:#f92672">import&lt;/span> entropy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Bin.Utils.utils &lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#75715e"># NOTE: 반드시 환경에 맞게 경로 수정 필요&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 전역 참조 염기서열 로드&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ref_seq &lt;span style="color:#f92672">=&lt;/span> getNucleotideRefSeq()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># =========================&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 1. Codon / Nucleotide Sequence 불러오기&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># =========================&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_codon_sequence_dict&lt;/span>(path&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;./data/codon_data/codon_sequence&amp;#39;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> seq_dict &lt;span style="color:#f92672">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> file &lt;span style="color:#f92672">in&lt;/span> get_filenames_list(path):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df &lt;span style="color:#f92672">=&lt;/span> read_csv(join(path, file), index_col&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name &lt;span style="color:#f92672">=&lt;/span> file&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>)[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> seq_dict[name] &lt;span style="color:#f92672">=&lt;/span> dict(zip(df[&lt;span style="color:#e6db74">&amp;#39;gene&amp;#39;&lt;/span>], df[&lt;span style="color:#e6db74">&amp;#39;sequence&amp;#39;&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> seq_dict
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_nucleotide_sequence_dict&lt;/span>(seq_dir):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> seq_dict &lt;span style="color:#f92672">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> file &lt;span style="color:#f92672">in&lt;/span> get_filenames_list(seq_dir):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df &lt;span style="color:#f92672">=&lt;/span> read_csv(join(seq_dir, file), index_col&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>reset_index(drop&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name &lt;span style="color:#f92672">=&lt;/span> file&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>)[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> seq_dict[name] &lt;span style="color:#f92672">=&lt;/span> df
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> seq_dict
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># =========================&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 2. Reference 정보&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># =========================&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">getCodonRefSeqbyGene&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>read_csv(&lt;span style="color:#e6db74">&amp;#39;/data3/projects/2020_MUTCLUST/Data/Annotation/Codon/Reference/new_reference_codon.csv&amp;#39;&lt;/span>, index_col&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">getNucleotideRefSeqbyGene&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>read_csv(&lt;span style="color:#e6db74">&amp;#39;/data3/projects/2020_MUTCLUST/Data/Annotation/Nucleotide/covid_annotation.tsv&amp;#39;&lt;/span>, sep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">getStartDict&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ref &lt;span style="color:#f92672">=&lt;/span> getCodonRefSeqbyGene()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> dict(zip(ref[&lt;span style="color:#e6db74">&amp;#39;gene&amp;#39;&lt;/span>], ref[&lt;span style="color:#e6db74">&amp;#39;start&amp;#39;&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># =========================&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 3. Codon 입력 데이터 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># =========================&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">getTotal_df&lt;/span>(seq_dict, start&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, gene&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">None&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total_list, name_list &lt;span style="color:#f92672">=&lt;/span> [], []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> name, seq_by_gene_dict &lt;span style="color:#f92672">in&lt;/span> seq_dict&lt;span style="color:#f92672">.&lt;/span>items():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> seq &lt;span style="color:#f92672">=&lt;/span> seq_by_gene_dict[gene]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total_list&lt;span style="color:#f92672">.&lt;/span>append(list(seq))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name_list&lt;span style="color:#f92672">.&lt;/span>append(name)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total_df &lt;span style="color:#f92672">=&lt;/span> DataFrame(total_list, index&lt;span style="color:#f92672">=&lt;/span>name_list)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total_df&lt;span style="color:#f92672">.&lt;/span>columns &lt;span style="color:#f92672">=&lt;/span> [i &lt;span style="color:#f92672">+&lt;/span> start &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(len(total_df&lt;span style="color:#f92672">.&lt;/span>columns))]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> total_df
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">make_codon_input&lt;/span>(gene, seq_dict, ref_seq, out_dir):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> start_dict &lt;span style="color:#f92672">=&lt;/span> getStartDict()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total_df &lt;span style="color:#f92672">=&lt;/span> getTotal_df(seq_dict, start&lt;span style="color:#f92672">=&lt;/span>start_dict[gene], gene&lt;span style="color:#f92672">=&lt;/span>gene)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> records &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i, pos &lt;span style="color:#f92672">in&lt;/span> enumerate(total_df&lt;span style="color:#f92672">.&lt;/span>columns):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq &lt;span style="color:#f92672">=&lt;/span> total_df[pos]&lt;span style="color:#f92672">.&lt;/span>value_counts()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p &lt;span style="color:#f92672">=&lt;/span> freq &lt;span style="color:#f92672">/&lt;/span> freq&lt;span style="color:#f92672">.&lt;/span>sum()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ref_amino &lt;span style="color:#f92672">=&lt;/span> ref_seq[i]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq&lt;span style="color:#f92672">.&lt;/span>drop(index&lt;span style="color:#f92672">=&lt;/span>ref_amino, inplace&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>, errors&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ignore&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p&lt;span style="color:#f92672">.&lt;/span>drop(index&lt;span style="color:#f92672">=&lt;/span>ref_amino, inplace&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>, errors&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ignore&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(freq) &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> entropy_val &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>np&lt;span style="color:#f92672">.&lt;/span>sum(p &lt;span style="color:#f92672">*&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>log2(p))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> records&lt;span style="color:#f92672">.&lt;/span>append((int(pos) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, freq&lt;span style="color:#f92672">.&lt;/span>sum(), p&lt;span style="color:#f92672">.&lt;/span>sum(), entropy_val))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> input_df &lt;span style="color:#f92672">=&lt;/span> DataFrame(records, columns&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;Position&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;Frequency&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;Percentages&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;Entropy&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Path(out_dir)&lt;span style="color:#f92672">.&lt;/span>mkdir(parents&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>, exist_ok&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> input_df&lt;span style="color:#f92672">.&lt;/span>to_csv(join(out_dir, &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>gene&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">.input.tsv&amp;#39;&lt;/span>), sep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>, index&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">False&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> input_df
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">make_input_by_gene&lt;/span>(severity, seq_dict, ref_df):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> out_dir &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;./input/&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>severity&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">_&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>len(seq_dict)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Path(out_dir)&lt;span style="color:#f92672">.&lt;/span>mkdir(parents&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>, exist_ok&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> input_dfs &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> gene &lt;span style="color:#f92672">in&lt;/span> GENE_LIST:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Gene: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>gene&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ref_seq &lt;span style="color:#f92672">=&lt;/span> ref_df[ref_df[&lt;span style="color:#e6db74">&amp;#39;gene&amp;#39;&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> gene][&lt;span style="color:#e6db74">&amp;#39;sequence&amp;#39;&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>iloc[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> input_df &lt;span style="color:#f92672">=&lt;/span> make_codon_input(gene, seq_dict, ref_seq, out_dir)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> input_dfs&lt;span style="color:#f92672">.&lt;/span>append(input_df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> whole_df &lt;span style="color:#f92672">=&lt;/span> concat(input_dfs)&lt;span style="color:#f92672">.&lt;/span>astype({&lt;span style="color:#e6db74">&amp;#34;Position&amp;#34;&lt;/span>: int, &lt;span style="color:#e6db74">&amp;#34;Frequency&amp;#34;&lt;/span>: int})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> whole_df&lt;span style="color:#f92672">.&lt;/span>to_csv(join(out_dir, &lt;span style="color:#e6db74">&amp;#39;whole.input.tsv&amp;#39;&lt;/span>), sep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>, index&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">False&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> whole_df
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">make_codon_mutclust_input&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> seq_dict &lt;span style="color:#f92672">=&lt;/span> get_codon_sequence_dict()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ref &lt;span style="color:#f92672">=&lt;/span> getCodonRefSeqbyGene()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> make_input_by_gene(&lt;span style="color:#e6db74">&amp;#39;whole&amp;#39;&lt;/span>, seq_dict, ref)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># =========================&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 4. 병렬 처리 유틸&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># =========================&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">multi_processing&lt;/span>(func, parameter_list, core_n&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">100&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proc, proc_exec, proc_end &lt;span style="color:#f92672">=&lt;/span> [], [], []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> param &lt;span style="color:#f92672">in&lt;/span> parameter_list:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proc&lt;span style="color:#f92672">.&lt;/span>append(Process(target&lt;span style="color:#f92672">=&lt;/span>func, args&lt;span style="color:#f92672">=&lt;/span>param))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> proc &lt;span style="color:#f92672">or&lt;/span> proc_exec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(min(core_n &lt;span style="color:#f92672">-&lt;/span> len(proc_exec), len(proc))):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p &lt;span style="color:#f92672">=&lt;/span> proc&lt;span style="color:#f92672">.&lt;/span>pop(&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p&lt;span style="color:#f92672">.&lt;/span>start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proc_exec&lt;span style="color:#f92672">.&lt;/span>append(p)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> p &lt;span style="color:#f92672">in&lt;/span> proc_exec[:]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> p&lt;span style="color:#f92672">.&lt;/span>is_alive():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proc_exec&lt;span style="color:#f92672">.&lt;/span>remove(p)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proc_end&lt;span style="color:#f92672">.&lt;/span>append(p)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p&lt;span style="color:#f92672">.&lt;/span>join()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># =========================&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 5. 보조 기능들 추가&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># =========================&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">add_HSCORE&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path &lt;span style="color:#f92672">=&lt;/span> join(MUTCLUST_INPUT_DIR, &lt;span style="color:#e6db74">&amp;#39;gisaid_mutclust_input.tsv&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> new_path &lt;span style="color:#f92672">=&lt;/span> join(MUTCLUST_INPUT_DIR, &lt;span style="color:#e6db74">&amp;#39;gisaid_mutclust_input_with_score.tsv&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>read_csv(path, sep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df[HSCORE] &lt;span style="color:#f92672">=&lt;/span> df[PER] &lt;span style="color:#f92672">*&lt;/span> df[ENT]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df&lt;span style="color:#f92672">.&lt;/span>to_csv(new_path, sep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>, index&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">False&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">make_codon_annotation&lt;/span>(outdir):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ref_df &lt;span style="color:#f92672">=&lt;/span> getCodonRefSeqbyGene()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ano_df &lt;span style="color:#f92672">=&lt;/span> ref_df&lt;span style="color:#f92672">.&lt;/span>drop(columns&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;sequence&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ano_df&lt;span style="color:#f92672">.&lt;/span>to_csv(join(outdir, &lt;span style="color:#e6db74">&amp;#39;codon_annotation.tsv&amp;#39;&lt;/span>), sep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>, index&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">False&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">make_clade_divide_mutation&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clade_dir &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./clade_divide_mutation&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> file_list &lt;span style="color:#f92672">=&lt;/span> get_filenames_list(clade_dir)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> start_dict &lt;span style="color:#f92672">=&lt;/span> getStartDict()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> file &lt;span style="color:#f92672">in&lt;/span> file_list:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df &lt;span style="color:#f92672">=&lt;/span> read_csv(join(clade_dir, file), sep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># =========================&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 6. Mutation Info 처리 및 Matrix 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># =========================&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">read_thead&lt;/span>(filepathlist, return_list, i):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ref_seq_sr &lt;span style="color:#f92672">=&lt;/span> getNucleotideRefSeq()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_dict &lt;span style="color:#f92672">=&lt;/span> {pos: Counter({k: &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> k &lt;span style="color:#f92672">in&lt;/span> IUPAC_CODES&lt;span style="color:#f92672">.&lt;/span>keys()}) &lt;span style="color:#66d9ef">for&lt;/span> pos &lt;span style="color:#f92672">in&lt;/span> ref_seq_sr&lt;span style="color:#f92672">.&lt;/span>index}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> filepath &lt;span style="color:#f92672">in&lt;/span> filepathlist:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df &lt;span style="color:#f92672">=&lt;/span> read_csv(filepath, index_col&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>fillna(&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>reset_index(drop&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> index, mut &lt;span style="color:#f92672">in&lt;/span> enumerate(df[&lt;span style="color:#e6db74">&amp;#39;mut&amp;#39;&lt;/span>]):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> symbol &lt;span style="color:#f92672">=&lt;/span> mut &lt;span style="color:#66d9ef">if&lt;/span> mut &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> ref_seq_sr[index &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_dict[index &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>][symbol] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return_list&lt;span style="color:#f92672">.&lt;/span>append(sub_dict)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>i&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">th process complete!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">merge_thread&lt;/span>(poslist, sub_dict_list, return_dict):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> pos &lt;span style="color:#f92672">in&lt;/span> poslist:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> merged_dict &lt;span style="color:#f92672">=&lt;/span> {k: &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> k &lt;span style="color:#f92672">in&lt;/span> IUPAC_CODES&lt;span style="color:#f92672">.&lt;/span>keys()}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count_dict &lt;span style="color:#f92672">=&lt;/span> sum([a[pos] &lt;span style="color:#66d9ef">for&lt;/span> a &lt;span style="color:#f92672">in&lt;/span> sub_dict_list], Counter())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> k, v &lt;span style="color:#f92672">in&lt;/span> count_dict&lt;span style="color:#f92672">.&lt;/span>items():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> merged_dict[k] &lt;span style="color:#f92672">=&lt;/span> v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return_dict[pos] &lt;span style="color:#f92672">=&lt;/span> merged_dict
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">load_mutationinfo&lt;/span>(input_dir&lt;span style="color:#f92672">=&lt;/span>COVID19_MUTATIONINFO_DIR, sample_list&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">None&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> core_n &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> split_n &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_dict_list &lt;span style="color:#f92672">=&lt;/span> Manager()&lt;span style="color:#f92672">.&lt;/span>list()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filelist &lt;span style="color:#f92672">=&lt;/span> get_file_paths_recursive(input_dir)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> sample_list &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#f92672">not&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filelist &lt;span style="color:#f92672">=&lt;/span> [f &lt;span style="color:#66d9ef">for&lt;/span> f &lt;span style="color:#f92672">in&lt;/span> filelist &lt;span style="color:#66d9ef">if&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>basename(f)&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>)[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">in&lt;/span> sample_list]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> splited_filepaths &lt;span style="color:#f92672">=&lt;/span> array_split(filelist, split_n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parameter_list &lt;span style="color:#f92672">=&lt;/span> [(chunk, sub_dict_list, i) &lt;span style="color:#66d9ef">for&lt;/span> i, chunk &lt;span style="color:#f92672">in&lt;/span> enumerate(splited_filepaths)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;read thread start!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> multi_processing(read_thead, parameter_list, core_n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;read thread end!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> merged_dict &lt;span style="color:#f92672">=&lt;/span> Manager()&lt;span style="color:#f92672">.&lt;/span>dict()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> poslist &lt;span style="color:#f92672">=&lt;/span> ref_seq&lt;span style="color:#f92672">.&lt;/span>index
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> splited_positions &lt;span style="color:#f92672">=&lt;/span> array_split(poslist, split_n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parameter_list &lt;span style="color:#f92672">=&lt;/span> [(chunk, list(sub_dict_list), merged_dict) &lt;span style="color:#66d9ef">for&lt;/span> chunk &lt;span style="color:#f92672">in&lt;/span> splited_positions]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;merge thread start!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> multi_processing(merge_thread, parameter_list, core_n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;merge thread end!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> dict(merged_dict)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">make_matrix_thread&lt;/span>(file_list):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clusters_file_path &lt;span style="color:#f92672">=&lt;/span> join(GISAID_MUTCLUST_OUTPUT_DIR, &lt;span style="color:#e6db74">&amp;#39;clusters_hscore.txt&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clusters_df &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>read_csv(clusters_file_path, sep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> column_list &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;c&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>i&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">(&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>row[&lt;span style="color:#e6db74">&amp;#39;left_position&amp;#39;&lt;/span>]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">,&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>row[&lt;span style="color:#e6db74">&amp;#39;right_position&amp;#39;&lt;/span>]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i, row &lt;span style="color:#f92672">in&lt;/span> clusters_df&lt;span style="color:#f92672">.&lt;/span>iterrows()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cluster_df &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>DataFrame(columns&lt;span style="color:#f92672">=&lt;/span>column_list)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> mutation_path &lt;span style="color:#f92672">in&lt;/span> file_list:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> patient_df &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>read_csv(mutation_path)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> patient_name &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>basename(mutation_path)&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>)[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cluster_df&lt;span style="color:#f92672">.&lt;/span>loc[patient_name] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> patient_df[patient_df[&lt;span style="color:#e6db74">&amp;#39;mut&amp;#39;&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>notnull()][&lt;span style="color:#e6db74">&amp;#39;pos&amp;#39;&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> matched &lt;span style="color:#f92672">=&lt;/span> clusters_df[(clusters_df[&lt;span style="color:#e6db74">&amp;#39;left_position&amp;#39;&lt;/span>] &lt;span style="color:#f92672">&amp;lt;=&lt;/span> i) &lt;span style="color:#f92672">&amp;amp;&lt;/span> (i &lt;span style="color:#f92672">&amp;lt;=&lt;/span> clusters_df[&lt;span style="color:#e6db74">&amp;#39;right_position&amp;#39;&lt;/span>])]&lt;span style="color:#f92672">.&lt;/span>index
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cluster_df&lt;span style="color:#f92672">.&lt;/span>loc[patient_name][matched] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> cluster_df
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">make_matrix&lt;/span>(mutationinfo_dir, out_dir, tag, cpu_n&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">60&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;starting make matrix!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pool &lt;span style="color:#f92672">=&lt;/span> Pool(processes&lt;span style="color:#f92672">=&lt;/span>cpu_n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> file_list &lt;span style="color:#f92672">=&lt;/span> get_file_paths_recursive(mutationinfo_dir)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> file_chunks &lt;span style="color:#f92672">=&lt;/span> array_split(file_list, cpu_n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> results &lt;span style="color:#f92672">=&lt;/span> pool&lt;span style="color:#f92672">.&lt;/span>map(make_matrix_thread, file_chunks)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> merged_df &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>concat(results)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> merged_df&lt;span style="color:#f92672">.&lt;/span>to_csv(join(out_dir, &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;cluster_matrix_&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>tag&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">.csv&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pool&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pool&lt;span style="color:#f92672">.&lt;/span>join()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(merged_df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># =========================&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 7. 실행 예시 (main)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># =========================&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> make_codon_mutclust_input()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># =========================&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 8. FASTA → CSV 변환 및 Nucleotide 기반 MutClust 입력&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># =========================&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">fasta2csv&lt;/span>(home_dir, nation_dir, filechunk, ref, outdir):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> file &lt;span style="color:#f92672">in&lt;/span> filechunk:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path &lt;span style="color:#f92672">=&lt;/span> join(home_dir, nation_dir, file)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filename &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>splitext(file)[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> outpath &lt;span style="color:#f92672">=&lt;/span> join(outdir, filename &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;.csv&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>exists(outpath):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df &lt;span style="color:#f92672">=&lt;/span> DataFrame({&lt;span style="color:#e6db74">&amp;#39;ref&amp;#39;&lt;/span>: ref&lt;span style="color:#f92672">.&lt;/span>values, &lt;span style="color:#e6db74">&amp;#39;pos&amp;#39;&lt;/span>: ref&lt;span style="color:#f92672">.&lt;/span>index})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ref_list &lt;span style="color:#f92672">=&lt;/span> ref&lt;span style="color:#f92672">.&lt;/span>tolist()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> open(path) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines &lt;span style="color:#f92672">=&lt;/span> [line&lt;span style="color:#f92672">.&lt;/span>rstrip() &lt;span style="color:#66d9ef">for&lt;/span> line &lt;span style="color:#f92672">in&lt;/span> f&lt;span style="color:#f92672">.&lt;/span>readlines()]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> seq &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(lines[&lt;span style="color:#ae81ff">1&lt;/span>:])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mut &lt;span style="color:#f92672">=&lt;/span> [nt &lt;span style="color:#66d9ef">if&lt;/span> nt &lt;span style="color:#f92672">!=&lt;/span> ref_list[i] &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> i, nt &lt;span style="color:#f92672">in&lt;/span> enumerate(seq)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df[&lt;span style="color:#e6db74">&amp;#39;mut&amp;#39;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> Series(mut)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df&lt;span style="color:#f92672">.&lt;/span>to_csv(outpath, index&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">False&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">gisaid_fasta2csv&lt;/span>(homedir&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>GISAID_DIR&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/Sequence/Preprocessed/&amp;#34;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inputdir &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>homedir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/MSA_fasta&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> outdir &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>homedir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/MSA_mutationinfo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Path(outdir)&lt;span style="color:#f92672">.&lt;/span>mkdir(parents&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>, exist_ok&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> core_n &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> args_list &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> nation_dir &lt;span style="color:#f92672">in&lt;/span> get_dirnames_list(inputdir):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filelist &lt;span style="color:#f92672">=&lt;/span> get_filenames_list(join(inputdir, nation_dir))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> chunks &lt;span style="color:#f92672">=&lt;/span> array_split(filelist, core_n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> filechunk &lt;span style="color:#f92672">in&lt;/span> chunks:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> args_list&lt;span style="color:#f92672">.&lt;/span>append((inputdir, nation_dir, filechunk, ref_seq, outdir))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> Pool(core_n) &lt;span style="color:#66d9ef">as&lt;/span> pool:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pool&lt;span style="color:#f92672">.&lt;/span>starmap(fasta2csv, args_list)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">make_nucleotide_mutclust_input&lt;/span>(outdir, name, seq_dict&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">None&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>exists(outdir):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(outdir &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39; is not exist&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output_path &lt;span style="color:#f92672">=&lt;/span> join(outdir, &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>name&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">_mutclust_input.tsv&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq_df_path &lt;span style="color:#f92672">=&lt;/span> join(outdir, &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>name&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">_freq_ATGC.csv&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> seq_dict &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;No sequence dictionary provided.&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq_df &lt;span style="color:#f92672">=&lt;/span> DataFrame&lt;span style="color:#f92672">.&lt;/span>from_dict(seq_dict)&lt;span style="color:#f92672">.&lt;/span>T&lt;span style="color:#f92672">.&lt;/span>fillna(&lt;span style="color:#ae81ff">0&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>astype(int)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq_df &lt;span style="color:#f92672">=&lt;/span> freq_df[[nt &lt;span style="color:#66d9ef">for&lt;/span> nt &lt;span style="color:#f92672">in&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;A&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;T&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;G&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;C&amp;#39;&lt;/span>] &lt;span style="color:#66d9ef">if&lt;/span> nt &lt;span style="color:#f92672">in&lt;/span> freq_df&lt;span style="color:#f92672">.&lt;/span>columns]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq_df&lt;span style="color:#f92672">.&lt;/span>to_csv(freq_df_path)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pos_list, freq_list, per_list, entropy_list &lt;span style="color:#f92672">=&lt;/span> [], [], [], []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> pos &lt;span style="color:#f92672">in&lt;/span> freq_df&lt;span style="color:#f92672">.&lt;/span>index:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq &lt;span style="color:#f92672">=&lt;/span> freq_df&lt;span style="color:#f92672">.&lt;/span>loc[pos]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cnt_n &lt;span style="color:#f92672">=&lt;/span> freq&lt;span style="color:#f92672">.&lt;/span>sum()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> cnt_n &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> percentage &lt;span style="color:#f92672">=&lt;/span> freq &lt;span style="color:#f92672">/&lt;/span> cnt_n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ent &lt;span style="color:#f92672">=&lt;/span> entropy(percentage, base&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ref_nt &lt;span style="color:#f92672">=&lt;/span> ref_seq[int(pos)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq&lt;span style="color:#f92672">.&lt;/span>drop(ref_nt, inplace&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>, errors&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ignore&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> percentage&lt;span style="color:#f92672">.&lt;/span>drop(ref_nt, inplace&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>, errors&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ignore&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pos_list&lt;span style="color:#f92672">.&lt;/span>append(int(pos))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq_list&lt;span style="color:#f92672">.&lt;/span>append(freq&lt;span style="color:#f92672">.&lt;/span>sum())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> per_list&lt;span style="color:#f92672">.&lt;/span>append(percentage&lt;span style="color:#f92672">.&lt;/span>sum())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> entropy_list&lt;span style="color:#f92672">.&lt;/span>append(ent)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mutclust_input_df &lt;span style="color:#f92672">=&lt;/span> DataFrame({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;Position&amp;#39;&lt;/span>: pos_list,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;Frequency&amp;#39;&lt;/span>: freq_list,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;Percentages&amp;#39;&lt;/span>: per_list,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;Entropy&amp;#39;&lt;/span>: entropy_list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mutclust_input_df&lt;span style="color:#f92672">.&lt;/span>to_csv(output_path, sep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>, index&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">False&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> mutclust_input_df
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">annotation&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">import&lt;/span> ast
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mapping_df &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>read_csv(join(GISAID_METADATA_DIR, &lt;span style="color:#e6db74">&amp;#39;merged_info.tsv&amp;#39;&lt;/span>), sep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>, index_col&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> idx, row &lt;span style="color:#f92672">in&lt;/span> mapping_df&lt;span style="color:#f92672">.&lt;/span>iterrows():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> col &lt;span style="color:#f92672">in&lt;/span> row&lt;span style="color:#f92672">.&lt;/span>index:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mapping_df&lt;span style="color:#f92672">.&lt;/span>at[idx, col] &lt;span style="color:#f92672">=&lt;/span> ast&lt;span style="color:#f92672">.&lt;/span>literal_eval(row[col])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">except&lt;/span> &lt;span style="color:#a6e22e">Exception&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(mapping_df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">make_bedgraph&lt;/span>(mut_df, cluster_df, output_file):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> color_list &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;maroon&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;r&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;coral&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;chocolate&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;orange&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;gold&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;olive&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;yellow&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;lawngreen&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;palegreen&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;forestgreen&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;lime&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;mediumaquamarine&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;aquamarine&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;teal&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;aqua&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;steelblue&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;slategrey&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;cornflowerblue&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;blue&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;slateblue&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;indigo&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;plum&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;magenta&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;deeppink&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;pink&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gene_df &lt;span style="color:#f92672">=&lt;/span> get_GeneInfo_df()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fig, ax &lt;span style="color:#f92672">=&lt;/span> plt&lt;span style="color:#f92672">.&lt;/span>subplots(figsize&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">13.5&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ax&lt;span style="color:#f92672">.&lt;/span>bar(mut_df&lt;span style="color:#f92672">.&lt;/span>index, mut_df[HSCORE], width&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">30&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ax&lt;span style="color:#f92672">.&lt;/span>set_ylabel(HSCORE)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ax&lt;span style="color:#f92672">.&lt;/span>set_xticks(np&lt;span style="color:#f92672">.&lt;/span>arange(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">29903&lt;/span>, &lt;span style="color:#ae81ff">1000&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ax&lt;span style="color:#f92672">.&lt;/span>tick_params(labelrotation&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">45&lt;/span>, labelsize&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> _, row &lt;span style="color:#f92672">in&lt;/span> cluster_df&lt;span style="color:#f92672">.&lt;/span>iterrows():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ax&lt;span style="color:#f92672">.&lt;/span>axvspan(row[&lt;span style="color:#e6db74">&amp;#39;left_position&amp;#39;&lt;/span>], row[&lt;span style="color:#e6db74">&amp;#39;right_position&amp;#39;&lt;/span>], facecolor&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;lightgrey&amp;#39;&lt;/span>, alpha&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0.8&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> trans &lt;span style="color:#f92672">=&lt;/span> matplotlib&lt;span style="color:#f92672">.&lt;/span>transforms&lt;span style="color:#f92672">.&lt;/span>blended_transform_factory(ax&lt;span style="color:#f92672">.&lt;/span>transData, fig&lt;span style="color:#f92672">.&lt;/span>transFigure)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pre_y &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i, row &lt;span style="color:#f92672">in&lt;/span> gene_df&lt;span style="color:#f92672">.&lt;/span>iterrows():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rect &lt;span style="color:#f92672">=&lt;/span> matplotlib&lt;span style="color:#f92672">.&lt;/span>patches&lt;span style="color:#f92672">.&lt;/span>Rectangle(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (row[&lt;span style="color:#e6db74">&amp;#39;start&amp;#39;&lt;/span>], &lt;span style="color:#ae81ff">0.02&lt;/span>), row[&lt;span style="color:#e6db74">&amp;#39;end&amp;#39;&lt;/span>] &lt;span style="color:#f92672">-&lt;/span> row[&lt;span style="color:#e6db74">&amp;#39;start&amp;#39;&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0.02&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> facecolor&lt;span style="color:#f92672">=&lt;/span>color_list[i &lt;span style="color:#f92672">%&lt;/span> len(color_list)], transform&lt;span style="color:#f92672">=&lt;/span>trans,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> edgecolor&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;black&amp;#39;&lt;/span>, lw&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0.5&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fig&lt;span style="color:#f92672">.&lt;/span>add_artist(rect)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text_y &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.01&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> ((row[&lt;span style="color:#e6db74">&amp;#39;start&amp;#39;&lt;/span>] &lt;span style="color:#f92672">-&lt;/span> row[&lt;span style="color:#e6db74">&amp;#39;end&amp;#39;&lt;/span>]) &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">1000&lt;/span> &lt;span style="color:#f92672">and&lt;/span> pre_y &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0.01&lt;/span>) &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#ae81ff">0.05&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pre_y &lt;span style="color:#f92672">=&lt;/span> text_y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fig&lt;span style="color:#f92672">.&lt;/span>text((row[&lt;span style="color:#e6db74">&amp;#39;start&amp;#39;&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> row[&lt;span style="color:#e6db74">&amp;#39;end&amp;#39;&lt;/span>]) &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>, text_y, row[&lt;span style="color:#e6db74">&amp;#39;gene&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ha&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;center&amp;#39;&lt;/span>, va&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;center&amp;#39;&lt;/span>, fontsize&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>, fontweight&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;bold&amp;#39;&lt;/span>, transform&lt;span style="color:#f92672">=&lt;/span>trans)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> plt&lt;span style="color:#f92672">.&lt;/span>tight_layout()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> plt&lt;span style="color:#f92672">.&lt;/span>savefig(output_file, format&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;png&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>