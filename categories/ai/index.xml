<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AI on</title><link>https://yshghid.github.io/categories/ai/</link><description>Recent content in AI on</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 04 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://yshghid.github.io/categories/ai/index.xml" rel="self" type="application/rss+xml"/><item><title>RF-SHAP 연구 #1 모델 학습</title><link>https://yshghid.github.io/docs/study/ai/ai12/</link><pubDate>Mon, 04 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai12/</guid><description>&lt;h1 id="rf-shap-연구-1-모델-학습">
 RF-SHAP 연구 #1 모델 학습
 &lt;a class="anchor" href="#rf-shap-%ec%97%b0%ea%b5%ac-1-%eb%aa%a8%eb%8d%b8-%ed%95%99%ec%8a%b5">#&lt;/a>
&lt;/h1>
&lt;p>#2025-08-04&lt;/p>
&lt;hr>
&lt;h3 id="1-load-data">
 1. Load data
 &lt;a class="anchor" href="#1-load-data">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pandas &lt;span style="color:#66d9ef">as&lt;/span> pd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#66d9ef">as&lt;/span> np
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> sklearn.ensemble &lt;span style="color:#f92672">import&lt;/span> RandomForestClassifier
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> sklearn.model_selection &lt;span style="color:#f92672">import&lt;/span> train_test_split, cross_val_score
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> sklearn.metrics &lt;span style="color:#f92672">import&lt;/span> accuracy_score
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pickle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;/preprocessing/processed_data.pickle&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;rb&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> preproc_data &lt;span style="color:#f92672">=&lt;/span> pickle&lt;span style="color:#f92672">.&lt;/span>load(f)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cytokine_df &lt;span style="color:#f92672">=&lt;/span> preproc_data[&lt;span style="color:#e6db74">&amp;#39;cytokine_data&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>patient_meta &lt;span style="color:#f92672">=&lt;/span> preproc_data[&lt;span style="color:#e6db74">&amp;#39;metadata&amp;#39;&lt;/span>] 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>patient_info &lt;span style="color:#f92672">=&lt;/span> preproc_data[&lt;span style="color:#e6db74">&amp;#39;clinical&amp;#39;&lt;/span>] 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-train-data-split">
 2. Train data split
 &lt;a class="anchor" href="#2-train-data-split">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>normal_df &lt;span style="color:#f92672">=&lt;/span> cytokine_df[cytokine_df&lt;span style="color:#f92672">.&lt;/span>index&lt;span style="color:#f92672">.&lt;/span>str&lt;span style="color:#f92672">.&lt;/span>contains(&lt;span style="color:#e6db74">&amp;#39;Healthy&amp;#39;&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>severe_samples &lt;span style="color:#f92672">=&lt;/span> patient_meta[patient_meta&lt;span style="color:#f92672">.&lt;/span>Severity &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>severe_df &lt;span style="color:#f92672">=&lt;/span> cytokine_df[cytokine_df&lt;span style="color:#f92672">.&lt;/span>index&lt;span style="color:#f92672">.&lt;/span>isin(severe_samples&lt;span style="color:#f92672">.&lt;/span>Sample)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>normal_df[&lt;span style="color:#e6db74">&amp;#39;source&amp;#39;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>severe_df[&lt;span style="color:#e6db74">&amp;#39;source&amp;#39;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>normal_df,severe_df
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>( CXCL9 LIF CXCL11 IL25 IL12B IL10 \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Healthy1 6.560136 4.251866 4.151513 7.586942 5.541050 1.843384 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Healthy2 5.277100 4.089332 3.650800 7.886990 6.377469 2.113211 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL13 IL11 IL15 PTX3 ... FSTL3 FLT3LG \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Healthy1 6.470743 6.949630 3.716450 5.163174 ... 9.613881 4.906822 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Healthy2 6.450212 7.541794 4.181554 6.741940 ... 9.458981 4.658021 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FAP FABP4 F3 ESM1 ERBB3 ENPP2 \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Healthy1 10.903602 7.923477 3.383774 6.034197 9.096096 10.839433 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Healthy2 11.238270 8.730215 3.317157 5.497652 8.543655 10.454511 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WFDC2 source 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Healthy1 8.383246 0 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Healthy2 8.260845 0 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [2 rows x 167 columns],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CXCL9 LIF CXCL11 IL25 IL12B IL10 \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_1 7.426598 4.211594 4.429560 7.799068 6.318247 1.769972 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_2 7.541794 4.355353 4.514350 7.886990 6.741940 1.769972 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_3 7.541794 4.151513 3.933607 7.799068 6.159825 1.916796 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_4 7.130935 4.429560 3.585707 7.886990 5.612199 1.916796 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IL13 IL11 IL15 PTX3 ... FSTL3 FLT3LG \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_1 5.725485 6.782954 3.716450 8.190382 ... 8.802718 3.042321 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_2 5.843465 6.646599 3.716450 7.496809 ... 9.008530 3.317157 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_3 5.984188 6.701283 3.880626 7.210939 ... 9.214496 3.448254 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_4 6.214099 6.883351 3.933607 7.496809 ... 9.008530 3.448254 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FAP FABP4 F3 ESM1 ERBB3 ENPP2 \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_1 7.886990 9.296877 2.952843 5.214755 8.543655 9.096096 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_2 8.110591 9.168168 2.820616 5.497652 8.683792 9.296877 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_3 8.190382 9.296877 3.232241 5.306376 8.862940 9.535287 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_4 8.383246 9.296877 3.127159 5.306376 9.096096 9.613881 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WFDC2 source 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_1 8.909767 1 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_2 8.862940 1 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_3 8.909767 1 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Patient2_4 8.683792 1 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [4 rows x 167 columns])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-model-training">
 3. Model training
 &lt;a class="anchor" href="#3-model-training">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>concat([normal_df,severe_df],axis &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>X &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>drop(columns&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;source&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>y &lt;span style="color:#f92672">=&lt;/span> df[&lt;span style="color:#e6db74">&amp;#39;source&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#Assume X_train as X, y as well&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>X_train &lt;span style="color:#f92672">=&lt;/span> X
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>y_train &lt;span style="color:#f92672">=&lt;/span> y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rf_model &lt;span style="color:#f92672">=&lt;/span> RandomForestClassifier()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rf_model&lt;span style="color:#f92672">.&lt;/span>fit(X_train, y_train)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>X_train
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>	CXCL9	LIF	CXCL11	IL25	IL12B	IL10	IL13	IL11	IL15	PTX3	...	FURIN	FSTL3	FLT3LG	FAP	FABP4	F3	ESM1	ERBB3	ENPP2	WFDC2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Healthy1	6.560136	4.251866	4.151513	7.586942	5.541050	1.843384	6.470743	6.949630	3.716450	5.163174	...	6.883351	9.613881	4.906822	10.903602	7.923477	3.383774	6.034197	9.096096	10.839433	8.383246
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Healthy2	5.277100	4.089332	3.650800	7.886990	6.377469	2.113211	6.450212	7.541794	4.181554	6.741940	...	7.002611	9.458981	4.658021	11.238270	8.730215	3.317157	5.497652	8.543655	10.454511	8.260845
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Patient2_1	7.426598	4.211594	4.429560	7.799068	6.318247	1.769972	5.725485	6.782954	3.716450	8.190382	...	7.660761	8.802718	3.042321	7.886990	9.296877	2.952843	5.214755	8.543655	9.096096	8.909767
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Patient2_2	7.541794	4.355353	4.514350	7.886990	6.741940	1.769972	5.843465	6.646599	3.716450	7.496809	...	7.210939	9.008530	3.317157	8.110591	9.168168	2.820616	5.497652	8.683792	9.296877	8.862940
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Patient2_3	7.541794	4.151513	3.933607	7.799068	6.159825	1.916796	5.984188	6.701283	3.880626	7.210939	...	6.646599	9.214496	3.448254	8.190382	9.296877	3.232241	5.306376	8.862940	9.535287	8.909767
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Patient2_4	7.130935	4.429560	3.585707	7.886990	5.612199	1.916796	6.214099	6.883351	3.933607	7.496809	...	6.532043	9.008530	3.448254	8.383246	9.296877	3.127159	5.306376	9.096096	9.613881	8.683792
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>6 rows × 166 columns
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Let&amp;#39;s assume test set as well&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>y_test &lt;span style="color:#f92672">=&lt;/span> y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>X_test &lt;span style="color:#f92672">=&lt;/span> X
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>y_pred &lt;span style="color:#f92672">=&lt;/span> rf_model&lt;span style="color:#f92672">.&lt;/span>predict(X_test)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>accuracy &lt;span style="color:#f92672">=&lt;/span> accuracy_score(y_test, y_pred)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(accuracy)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>1.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="4-confusion-matrix">
 4. Confusion matrix
 &lt;a class="anchor" href="#4-confusion-matrix">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> sklearn.metrics &lt;span style="color:#f92672">import&lt;/span> confusion_matrix
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> matplotlib.pyplot &lt;span style="color:#66d9ef">as&lt;/span> plt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> seaborn &lt;span style="color:#66d9ef">as&lt;/span> sns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conf_matrix &lt;span style="color:#f92672">=&lt;/span> confusion_matrix(y_test, y_pred)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>figure(figsize&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sns&lt;span style="color:#f92672">.&lt;/span>heatmap(conf_matrix, annot&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">False&lt;/span>, fmt&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;d&amp;#34;&lt;/span>, cmap&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Blues&amp;#34;&lt;/span>, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> xticklabels&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;Healthy&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Severe&amp;#39;&lt;/span>], yticklabels&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;Healthy&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;Severe&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ,annot_kws&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;fontsize&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">14&lt;/span>},)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>xlabel(&lt;span style="color:#e6db74">&amp;#39;Predicted&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>ylabel(&lt;span style="color:#e6db74">&amp;#39;Actual&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>title(&lt;span style="color:#e6db74">&amp;#39;Confusion Matrix&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>tick_params(axis&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;both&amp;#39;&lt;/span>, which&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;major&amp;#39;&lt;/span>, labelsize&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">12&lt;/span>) &lt;span style="color:#75715e"># Adjust tick label size&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(len(rf_model&lt;span style="color:#f92672">.&lt;/span>classes_)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> j &lt;span style="color:#f92672">in&lt;/span> range(len(rf_model&lt;span style="color:#f92672">.&lt;/span>classes_)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> i &lt;span style="color:#f92672">==&lt;/span> j: &lt;span style="color:#75715e"># Condition to check diagonal cells (true positives)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> plt&lt;span style="color:#f92672">.&lt;/span>text(j &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0.5&lt;/span>, i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0.5&lt;/span>, conf_matrix[i, j],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ha&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;center&amp;#34;&lt;/span>, va&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;center&amp;#34;&lt;/span>, color&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;white&amp;#39;&lt;/span>, fontsize&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">16&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> plt&lt;span style="color:#f92672">.&lt;/span>text(j &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0.5&lt;/span>, i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0.5&lt;/span>, conf_matrix[i, j],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ha&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;center&amp;#34;&lt;/span>, va&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;center&amp;#34;&lt;/span>, color&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;black&amp;#39;&lt;/span>, fontsize&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">16&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>show()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;img width="1816" height="808" alt="image" src="https://github.com/user-attachments/assets/6a1206bc-14d4-4917-b63a-af3db972f7f6" />
&lt;h3 id="5-save-model">
 5. Save model
 &lt;a class="anchor" href="#5-save-model">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> joblib
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>joblib&lt;span style="color:#f92672">.&lt;/span>dump(rf_model, &lt;span style="color:#e6db74">&amp;#39;/model/rf_model.pkl&amp;#39;&lt;/span>) 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>RF-SHAP 연구 #2 SHAP 분석</title><link>https://yshghid.github.io/docs/study/ai/ai13/</link><pubDate>Mon, 04 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai13/</guid><description>&lt;h1 id="rf-shap-연구-2-shap-분석">
 RF-SHAP 연구 #2 SHAP 분석
 &lt;a class="anchor" href="#rf-shap-%ec%97%b0%ea%b5%ac-2-shap-%eb%b6%84%ec%84%9d">#&lt;/a>
&lt;/h1>
&lt;p>#2025-08-04&lt;/p>
&lt;hr>
&lt;h3 id="1-load-data">
 1. Load data
 &lt;a class="anchor" href="#1-load-data">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pandas &lt;span style="color:#66d9ef">as&lt;/span> pd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#66d9ef">as&lt;/span> np
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pickle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> joblib
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> shap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> matplotlib.pyplot &lt;span style="color:#66d9ef">as&lt;/span> plt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> seaborn &lt;span style="color:#66d9ef">as&lt;/span> sns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#Load rf model&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;/model/rf_model.pkl&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;rb&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rf_model &lt;span style="color:#f92672">=&lt;/span> joblib&lt;span style="color:#f92672">.&lt;/span>load(f)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#Load dataset&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;/preprocessing/processed_data.pickle&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;rb&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> preproc_data &lt;span style="color:#f92672">=&lt;/span> pickle&lt;span style="color:#f92672">.&lt;/span>load(f)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cytokine_df &lt;span style="color:#f92672">=&lt;/span> preproc_data[&lt;span style="color:#e6db74">&amp;#39;cytokine_data&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>patient_meta &lt;span style="color:#f92672">=&lt;/span> preproc_data[&lt;span style="color:#e6db74">&amp;#39;metadata&amp;#39;&lt;/span>] 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>patient_info &lt;span style="color:#f92672">=&lt;/span> preproc_data[&lt;span style="color:#e6db74">&amp;#39;clinical&amp;#39;&lt;/span>] 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-model-evaluation---feature-importance">
 2. Model evaluation - feature importance
 &lt;a class="anchor" href="#2-model-evaluation---feature-importance">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Get feature importances&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>importances &lt;span style="color:#f92672">=&lt;/span> rf_model&lt;span style="color:#f92672">.&lt;/span>feature_importances_
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>feature_names &lt;span style="color:#f92672">=&lt;/span> cytokine_df&lt;span style="color:#f92672">.&lt;/span>columns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>feature_importances &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>DataFrame({&lt;span style="color:#e6db74">&amp;#39;feature&amp;#39;&lt;/span>: feature_names, &lt;span style="color:#e6db74">&amp;#39;importance&amp;#39;&lt;/span>: importances})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Sort the feature importances in descending order and select the top 20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>top_20_features &lt;span style="color:#f92672">=&lt;/span> feature_importances&lt;span style="color:#f92672">.&lt;/span>sort_values(by&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;importance&amp;#39;&lt;/span>, ascending&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">False&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>head(&lt;span style="color:#ae81ff">20&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Plot the top 20 feature importances&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>figure(figsize&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sns&lt;span style="color:#f92672">.&lt;/span>barplot(x&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;importance&amp;#39;&lt;/span>, y&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;feature&amp;#39;&lt;/span>, data&lt;span style="color:#f92672">=&lt;/span>top_20_features)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>show()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;img width="1802" height="1198" alt="image" src="https://github.com/user-attachments/assets/f8c04c4d-eaf1-4dad-9b6f-783ddf073f1b" />
&lt;h3 id="3-model-evaluation---shap">
 3. Model evaluation - SHAP
 &lt;a class="anchor" href="#3-model-evaluation---shap">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>tree_explainer &lt;span style="color:#f92672">=&lt;/span> shap&lt;span style="color:#f92672">.&lt;/span>TreeExplainer(rf_model) &lt;span style="color:#75715e">## TreeExplainer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>shap_values &lt;span style="color:#f92672">=&lt;/span> tree_explainer&lt;span style="color:#f92672">.&lt;/span>shap_values(cytokine_df) &lt;span style="color:#75715e">## SHAP Value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fig &lt;span style="color:#f92672">=&lt;/span> plt&lt;span style="color:#f92672">.&lt;/span>figure(figsize&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">8&lt;/span>,&lt;span style="color:#ae81ff">8&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fig&lt;span style="color:#f92672">.&lt;/span>set_facecolor(&lt;span style="color:#e6db74">&amp;#39;white&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ax &lt;span style="color:#f92672">=&lt;/span> fig&lt;span style="color:#f92672">.&lt;/span>add_subplot()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#Plot SHAP as sever probability&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>shap&lt;span style="color:#f92672">.&lt;/span>summary_plot(shap_values[&lt;span style="color:#ae81ff">1&lt;/span>], cytokine_df, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cmap&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;bwr&amp;#39;&lt;/span>, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> show&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">False&lt;/span>, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> plot_type&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dot&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ax&lt;span style="color:#f92672">.&lt;/span>set_xlabel(&lt;span style="color:#e6db74">&amp;#39;SHAP Value&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ax&lt;span style="color:#f92672">.&lt;/span>set_title(&lt;span style="color:#e6db74">&amp;#39;SHAP Dot Plot&amp;#39;&lt;/span>, fontsize&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">20&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>show()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;img width="1808" height="1388" alt="image" src="https://github.com/user-attachments/assets/bf1fcf5f-3469-429b-bb7b-cc7491d64682" />
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>shap_df &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>DataFrame(shap_values[&lt;span style="color:#ae81ff">1&lt;/span>],columns &lt;span style="color:#f92672">=&lt;/span> cytokine_df&lt;span style="color:#f92672">.&lt;/span>columns)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>shap_df&lt;span style="color:#f92672">.&lt;/span>index &lt;span style="color:#f92672">=&lt;/span> cytokine_df&lt;span style="color:#f92672">.&lt;/span>index
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>shap_df
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>	CXCL9	LIF	CXCL11	IL25	IL12B	IL10	IL13	IL11	IL15	PTX3	...	FURIN	FSTL3	FLT3LG	FAP	FABP4	F3	ESM1	ERBB3	ENPP2	WFDC2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Healthy1	0.0	0.001667	0.0	0.0	-0.008333	0.0	0.0	-0.003333	0.0	0.0	...	0.0	-0.011667	-0.005	-0.013333	0.0	-0.006667	0.0	0.0	0.0	-0.005
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Healthy2	0.0	-0.008333	0.0	0.0	0.001667	0.0	0.0	-0.013333	0.0	0.0	...	0.0	-0.011667	-0.005	-0.013333	0.0	-0.006667	0.0	0.0	0.0	-0.005
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Patient1_1	0.0	0.001667	0.0	0.0	0.001667	0.0	0.0	-0.013333	0.0	0.0	...	0.0	-0.011667	-0.005	-0.013333	0.0	-0.006667	0.0	0.0	0.0	-0.005
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Patient1_2	0.0	0.001667	0.0	0.0	0.001667	0.0	0.0	-0.013333	0.0	0.0	...	0.0	-0.011667	0.005	-0.013333	0.0	-0.006667	0.0	0.0	0.0	-0.005
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Patient1_5	0.0	-0.008333	0.0	0.0	0.001667	0.0	0.0	-0.003333	0.0	0.0	...	0.0	-0.011667	-0.005	-0.013333	0.0	-0.006667	0.0	0.0	0.0	-0.005
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Patient1_6	0.0	-0.008333	0.0	0.0	0.001667	0.0	0.0	0.006667	0.0	0.0	...	0.0	-0.011667	-0.005	0.006667	0.0	0.003333	0.0	0.0	0.0	-0.005
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Patient2_1	0.0	0.001667	0.0	0.0	0.001667	0.0	0.0	0.006667	0.0	0.0	...	0.0	0.008333	0.005	0.006667	0.0	0.003333	0.0	0.0	0.0	0.005
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Patient2_2	0.0	0.001667	0.0	0.0	0.001667	0.0	0.0	0.006667	0.0	0.0	...	0.0	0.008333	0.005	0.006667	0.0	0.003333	0.0	0.0	0.0	0.005
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Patient2_3	0.0	0.001667	0.0	0.0	0.001667	0.0	0.0	0.006667	0.0	0.0	...	0.0	0.008333	0.005	0.006667	0.0	-0.006667	0.0	0.0	0.0	0.005
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Patient2_4	0.0	0.001667	0.0	0.0	0.001667	0.0	0.0	0.006667	0.0	0.0	...	0.0	0.008333	0.005	0.006667	0.0	0.003333	0.0	0.0	0.0	0.005
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Patient2_5	0.0	0.001667	0.0	0.0	0.001667	0.0	0.0	0.006667	0.0	0.0	...	0.0	0.008333	-0.005	0.006667	0.0	-0.006667	0.0	0.0	0.0	-0.005
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>11 rows × 166 columns
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="4-umap">
 4. UMAP
 &lt;a class="anchor" href="#4-umap">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> umap.umap_ &lt;span style="color:#66d9ef">as&lt;/span> umap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pandas &lt;span style="color:#66d9ef">as&lt;/span> pd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> matplotlib.pyplot &lt;span style="color:#66d9ef">as&lt;/span> plt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> seaborn &lt;span style="color:#66d9ef">as&lt;/span> sns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>reducer &lt;span style="color:#f92672">=&lt;/span> umap&lt;span style="color:#f92672">.&lt;/span>UMAP()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>embedding &lt;span style="color:#f92672">=&lt;/span> reducer&lt;span style="color:#f92672">.&lt;/span>fit_transform(shap_df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> matplotlib.pyplot &lt;span style="color:#66d9ef">as&lt;/span> plt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Extract UMAP coordinates and labels&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>umap_x &lt;span style="color:#f92672">=&lt;/span> embedding[:, &lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>umap_y &lt;span style="color:#f92672">=&lt;/span> embedding[:, &lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="5-dbscan">
 5. DBSCAN
 &lt;a class="anchor" href="#5-dbscan">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> sklearn.cluster &lt;span style="color:#f92672">import&lt;/span> DBSCAN
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Initialize DBSCAN&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dbscan &lt;span style="color:#f92672">=&lt;/span> DBSCAN(eps&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0.8&lt;/span>, min_samples&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#75715e"># partial data is too small to set min_sample=20.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Fit to UMAP data and get cluster labels&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>clusters &lt;span style="color:#f92672">=&lt;/span> dbscan&lt;span style="color:#f92672">.&lt;/span>fit_predict(embedding)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>embedding, clusters
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>(array([[16.714314 , -2.0475426],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [17.279623 , -2.4140635],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [16.705837 , -3.002305 ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [17.19955 , -1.342096 ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [17.838465 , -2.021136 ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [18.537838 , -1.5079662],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [21.44188 , -2.1259143],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [21.123413 , -3.075382 ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [20.373632 , -3.0233152],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [21.83852 , -2.899527 ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [20.435349 , -2.2629123]], dtype=float32),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> array([ 0, 0, -1, -1, 0, -1, -1, 1, 1, 1, 1]))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="6-save-result">
 6. Save result
 &lt;a class="anchor" href="#6-save-result">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>analyzed_data &lt;span style="color:#f92672">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>analyzed_data[&lt;span style="color:#e6db74">&amp;#39;shap_value&amp;#39;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> shap_df
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>analyzed_data[&lt;span style="color:#e6db74">&amp;#39;umap&amp;#39;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> embedding
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>analyzed_data[&lt;span style="color:#e6db74">&amp;#39;cluster&amp;#39;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> clusters
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;/analysis/analyzed_data.pickle&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;wb&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pickle&lt;span style="color:#f92672">.&lt;/span>dump(analyzed_data,f)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="7-hierarchical-dendrogram">
 7. Hierarchical dendrogram
 &lt;a class="anchor" href="#7-hierarchical-dendrogram">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> matplotlib.patches &lt;span style="color:#f92672">import&lt;/span> Patch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>patient_meta&lt;span style="color:#f92672">.&lt;/span>index &lt;span style="color:#f92672">=&lt;/span> patient_meta&lt;span style="color:#f92672">.&lt;/span>Sample
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>label_colors_1 &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;sDP&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;red&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;mDP&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;orange&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;sRP&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;purple&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;mRP&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;green&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>label_colors_2 &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">4.0&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;orange&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">5.0&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;orange&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">7.0&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;red&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">8.0&lt;/span>:&lt;span style="color:#e6db74">&amp;#39;red&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>label_colors_3 &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;DP&amp;#39;&lt;/span> :&lt;span style="color:#e6db74">&amp;#39;red&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;RP&amp;#39;&lt;/span> : &lt;span style="color:#e6db74">&amp;#39;blue&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>col_colors_1 &lt;span style="color:#f92672">=&lt;/span> patient_meta&lt;span style="color:#f92672">.&lt;/span>Detailed_PPG&lt;span style="color:#f92672">.&lt;/span>map(label_colors_1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>col_colors_2 &lt;span style="color:#f92672">=&lt;/span> patient_meta&lt;span style="color:#f92672">.&lt;/span>Severity&lt;span style="color:#f92672">.&lt;/span>map(label_colors_2)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>col_colors_3 &lt;span style="color:#f92672">=&lt;/span> patient_meta&lt;span style="color:#f92672">.&lt;/span>PPG&lt;span style="color:#f92672">.&lt;/span>map(label_colors_3)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>col_colors &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>DataFrame({&lt;span style="color:#e6db74">&amp;#39;PPGs&amp;#39;&lt;/span>: col_colors_1,&lt;span style="color:#e6db74">&amp;#39;severity&amp;#39;&lt;/span>:col_colors_2,})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>legend_elements_1 &lt;span style="color:#f92672">=&lt;/span> [Patch(facecolor&lt;span style="color:#f92672">=&lt;/span>color, label&lt;span style="color:#f92672">=&lt;/span>label) &lt;span style="color:#66d9ef">for&lt;/span> label, color &lt;span style="color:#f92672">in&lt;/span> label_colors_1&lt;span style="color:#f92672">.&lt;/span>items()]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>legend_elements_2 &lt;span style="color:#f92672">=&lt;/span> [Patch(facecolor&lt;span style="color:#f92672">=&lt;/span>color, label&lt;span style="color:#f92672">=&lt;/span>label) &lt;span style="color:#66d9ef">for&lt;/span> label, color &lt;span style="color:#f92672">in&lt;/span> label_colors_2&lt;span style="color:#f92672">.&lt;/span>items()]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> sklearn.preprocessing &lt;span style="color:#f92672">import&lt;/span> StandardScaler
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> shap_df[&lt;span style="color:#f92672">~&lt;/span>shap_df&lt;span style="color:#f92672">.&lt;/span>index&lt;span style="color:#f92672">.&lt;/span>str&lt;span style="color:#f92672">.&lt;/span>contains(&lt;span style="color:#e6db74">&amp;#39;Healthy&amp;#39;&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df_filtered &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>loc[:, (df &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>any(axis&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>scaler &lt;span style="color:#f92672">=&lt;/span> StandardScaler()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df_scaled &lt;span style="color:#f92672">=&lt;/span> scaler&lt;span style="color:#f92672">.&lt;/span>fit_transform(df_filtered)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df_scaled &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>DataFrame(df_scaled, index&lt;span style="color:#f92672">=&lt;/span>df_filtered&lt;span style="color:#f92672">.&lt;/span>index, columns&lt;span style="color:#f92672">=&lt;/span>df_filtered&lt;span style="color:#f92672">.&lt;/span>columns)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">except&lt;/span> &lt;span style="color:#a6e22e">FloatingPointError&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> e:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Error during scaling: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>e&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>g&lt;span style="color:#f92672">=&lt;/span> sns&lt;span style="color:#f92672">.&lt;/span>clustermap(df_scaled&lt;span style="color:#f92672">.&lt;/span>T, cmap&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;coolwarm&amp;#39;&lt;/span>, figsize&lt;span style="color:#f92672">=&lt;/span>(&lt;span style="color:#ae81ff">20&lt;/span>, &lt;span style="color:#ae81ff">27&lt;/span>), col_colors&lt;span style="color:#f92672">=&lt;/span>col_colors)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>legend_ax_1 &lt;span style="color:#f92672">=&lt;/span> g&lt;span style="color:#f92672">.&lt;/span>fig&lt;span style="color:#f92672">.&lt;/span>add_axes([&lt;span style="color:#ae81ff">1.05&lt;/span>, &lt;span style="color:#ae81ff">0.60&lt;/span>, &lt;span style="color:#ae81ff">0.3&lt;/span>, &lt;span style="color:#ae81ff">0.2&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>legend_ax_2 &lt;span style="color:#f92672">=&lt;/span> g&lt;span style="color:#f92672">.&lt;/span>fig&lt;span style="color:#f92672">.&lt;/span>add_axes([&lt;span style="color:#ae81ff">1.05&lt;/span>, &lt;span style="color:#ae81ff">0.48&lt;/span>, &lt;span style="color:#ae81ff">0.3&lt;/span>, &lt;span style="color:#ae81ff">0.2&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>legend_ax_1&lt;span style="color:#f92672">.&lt;/span>legend(handles&lt;span style="color:#f92672">=&lt;/span>legend_elements_1, title&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;PPGs&amp;#34;&lt;/span>, loc&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;center&amp;#34;&lt;/span>, fontsize &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>legend_ax_1&lt;span style="color:#f92672">.&lt;/span>axis(&lt;span style="color:#e6db74">&amp;#39;off&amp;#39;&lt;/span>) &lt;span style="color:#75715e"># Turn off the axis&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>legend_ax_2&lt;span style="color:#f92672">.&lt;/span>legend(handles&lt;span style="color:#f92672">=&lt;/span>legend_elements_2, title&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Sample Severity&amp;#34;&lt;/span>, loc&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;center&amp;#34;&lt;/span>, fontsize &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>legend_ax_2&lt;span style="color:#f92672">.&lt;/span>axis(&lt;span style="color:#e6db74">&amp;#39;off&amp;#39;&lt;/span>) &lt;span style="color:#75715e"># Turn off the axis&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>show()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;img width="2292" height="1466" alt="image" src="https://github.com/user-attachments/assets/865246b0-f54b-4195-9b2d-ae6fe0231203" />
&lt;h1 id="">
 
 &lt;a class="anchor" href="#">#&lt;/a>
&lt;/h1></description></item><item><title>skala 강의자료공부 #1 DL-CNN, RNN</title><link>https://yshghid.github.io/docs/study/ai/ai11/</link><pubDate>Sun, 03 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai11/</guid><description>&lt;h1 id="skala-강의자료공부-1-dl-cnn-rnn">
 skala 강의자료공부 #1 DL-CNN, RNN
 &lt;a class="anchor" href="#skala-%ea%b0%95%ec%9d%98%ec%9e%90%eb%a3%8c%ea%b3%b5%eb%b6%80-1-dl-cnn-rnn">#&lt;/a>
&lt;/h1>
&lt;p>#2025-08-03&lt;/p>
&lt;hr>
&lt;p>#1 p.90-92&lt;/p>
&lt;p>Convolution, 즉 합성곱은 CNN의 가장 핵심적인 연산이다. 말 그대로 &amp;lsquo;겹쳐서 곱하고 더하는&amp;rsquo; 방식이다. 이는 우리가 이미지를 처리할 때, 그 이미지의 일부분만을 보며 특징을 추출하는 원리와 매우 유사하다. CNN에서는 이 연산을 통해 이미지 속에서 선, 모서리, 윤곽선 같은 패턴을 뽑아낸다.&lt;/p>
&lt;p>p.90에서는 합성곱을 아주 직관적으로 보여준다. 왼쪽에 있는 초록색 격자는 이미지이고, 그 위에 씌워진 주황색 네모는 필터(또는 커널)다. 이 필터는 보통 3x3 크기를 가지며, 그 내부에 있는 값들은 학습을 통해 결정된다. 필터가 한 위치에 씌워지면, 그 영역의 이미지 픽셀들과 필터 값을 각각 곱한 뒤 전부 더한다. 이 값이 새로운 출력 이미지의 한 칸이 된다. 즉, 이미지의 한 조각에 필터를 덧씌워 곱하고 더한 값을 새로운 이미지의 특징으로 만들어내는 것이다. 필터가 한 칸씩 옆으로 이동하면서(이것이 stride), 전체 이미지를 스캔하듯 반복하게 되면, 하나의 convolved feature map이 생성된다. 그림에서는 결과값이 4로 계산되었고, 이 값이 오른쪽의 새로운 이미지에 기록되었다.&lt;/p></description></item><item><title>MutClust 코드 리펙토링 #1 lib.py</title><link>https://yshghid.github.io/docs/study/algorithm/algo1/</link><pubDate>Thu, 31 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/algorithm/algo1/</guid><description>&lt;h1 id="mutclust-코드-리펙토링-1-libpy">
 MutClust 코드 리펙토링 #1 lib.py
 &lt;a class="anchor" href="#mutclust-%ec%bd%94%eb%93%9c-%eb%a6%ac%ed%8e%99%ed%86%a0%eb%a7%81-1-libpy">#&lt;/a>
&lt;/h1>
&lt;p>#2025-07-31&lt;/p>
&lt;hr>
&lt;p>MutClust 알고리즘의 코드 구성은 아래와 같은데&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>MutClust
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── sc/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── lib.py // 핵심 알고리즘 로직
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── arg_parser.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── utils.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── Test
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>lib.py는 후보 Core 선택 로직과 클러스터 탐지 알고리즘을 포함한다.&lt;/p>
&lt;h1 id="">
 
 &lt;a class="anchor" href="#">#&lt;/a>
&lt;/h1>
&lt;h3 id="1-config--constant-선언">
 1. Config &amp;amp; Constant 선언
 &lt;a class="anchor" href="#1-config--constant-%ec%84%a0%ec%96%b8">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># === mlib.py ===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> math &lt;span style="color:#f92672">import&lt;/span> ceil
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#66d9ef">as&lt;/span> np
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> src.utils &lt;span style="color:#f92672">import&lt;/span> mutation_filtering
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># --- Constants ---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>POS &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Position&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FREQ &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Frequency&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PER &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Percentage&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ENT &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Entropy&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HSCORE &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;H-score&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HSCORE_SUM &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;H-score_sum&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HSCORE_AVR &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;H-score_avr&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PER_SUM &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;per_sum&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ENT_SUM &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;ent_sum&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PER_AVR &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;per_avr&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ENT_AVR &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;ent_avr&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>EPSILON &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>EPSILON_SCALING_FACTOR &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DIMINISHING_FACTOR &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MIN_CLUSTER_LENGTH &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CCM_MIN_HSCORE_SUM &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.05&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CCM_MIN_HSCORE_AVR &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.01&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CCM_MIN_HSCORE &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.03&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MIN_MUTATIONS &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># --- Config Init ---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">init&lt;/span>(d, info):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">--- Configurations ---&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Input data: &amp;#39;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>fin&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39; &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>d&lt;span style="color:#f92672">.&lt;/span>shape&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Output dir: &amp;#39;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>outdir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;Parameters:&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34; Min Eps=&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>eps&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34; Max Eps=&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>maxeps&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34; Min per_sum=&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>min_persum&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#e6db74">.1f&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34; Eps scaling factor=&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>eps_scaler_const&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#e6db74">.1f&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34; Expansion diminishing factor=&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>es_control_const&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34; Min cluster length=&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>min_cluster_length&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;----------------------&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-eps-내-중요도-계산">
 2. Eps 내 중요도 계산
 &lt;a class="anchor" href="#2-eps-%eb%82%b4-%ec%a4%91%ec%9a%94%eb%8f%84-%ea%b3%84%ec%82%b0">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># --- EPS Stats ---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">get_eps_stats&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">__init__&lt;/span>(self, idx, pos, df, lr_index, lr_distance, es):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>idx &lt;span style="color:#f92672">=&lt;/span> idx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>i &lt;span style="color:#f92672">=&lt;/span> pos
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>i_per &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>loc[idx, PER]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>i_freq &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>loc[idx, FREQ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>i_ent &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>loc[idx, ENT]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>i_hscore &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>loc[idx, HSCORE]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>l_dist, self&lt;span style="color:#f92672">.&lt;/span>r_dist &lt;span style="color:#f92672">=&lt;/span> lr_distance
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ccm_df &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>loc[lr_index[&lt;span style="color:#ae81ff">0&lt;/span>]:lr_index[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>length &lt;span style="color:#f92672">=&lt;/span> len(ccm_df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>l_pos &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>loc[lr_index[&lt;span style="color:#ae81ff">0&lt;/span>], POS]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>r_pos &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>loc[lr_index[&lt;span style="color:#ae81ff">1&lt;/span>], POS]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>mut_n &lt;span style="color:#f92672">=&lt;/span> len(ccm_df[ccm_df[HSCORE] &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>eps_scaler &lt;span style="color:#f92672">=&lt;/span> es
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>freq_sum &lt;span style="color:#f92672">=&lt;/span> ccm_df[FREQ]&lt;span style="color:#f92672">.&lt;/span>sum()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>freq_avr &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>freq_sum &lt;span style="color:#f92672">/&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>length
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>per_sum &lt;span style="color:#f92672">=&lt;/span> ccm_df[PER]&lt;span style="color:#f92672">.&lt;/span>sum()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>per_avr &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>per_sum &lt;span style="color:#f92672">/&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>length
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>ent_sum &lt;span style="color:#f92672">=&lt;/span> ccm_df[ENT]&lt;span style="color:#f92672">.&lt;/span>sum()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>ent_avr &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>ent_sum &lt;span style="color:#f92672">/&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>length
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>hscore_sum &lt;span style="color:#f92672">=&lt;/span> ccm_df[HSCORE]&lt;span style="color:#f92672">.&lt;/span>sum()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>hscore_avr &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>hscore_sum &lt;span style="color:#f92672">/&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>length
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">to_dict&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;index&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>idx, POS: self&lt;span style="color:#f92672">.&lt;/span>i, FREQ: self&lt;span style="color:#f92672">.&lt;/span>i_freq, PER: self&lt;span style="color:#f92672">.&lt;/span>i_per,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ENT: self&lt;span style="color:#f92672">.&lt;/span>i_ent, HSCORE: self&lt;span style="color:#f92672">.&lt;/span>i_hscore, &lt;span style="color:#e6db74">&amp;#39;length&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>length,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;freq_sum&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>freq_sum, &lt;span style="color:#e6db74">&amp;#39;freq_avr&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>freq_avr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PER_SUM: self&lt;span style="color:#f92672">.&lt;/span>per_sum, PER_AVR: self&lt;span style="color:#f92672">.&lt;/span>per_avr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ENT_SUM: self&lt;span style="color:#f92672">.&lt;/span>ent_sum, ENT_AVR: self&lt;span style="color:#f92672">.&lt;/span>ent_avr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HSCORE_SUM: self&lt;span style="color:#f92672">.&lt;/span>hscore_sum, HSCORE_AVR: self&lt;span style="color:#f92672">.&lt;/span>hscore_avr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;eps_scaler&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>eps_scaler, &lt;span style="color:#e6db74">&amp;#39;left_distance&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>l_dist,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;right_distance&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>r_dist, &lt;span style="color:#e6db74">&amp;#39;l_pos&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>l_pos,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;r_pos&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>r_pos, &lt;span style="color:#e6db74">&amp;#39;mut_n&amp;#39;&lt;/span>: self&lt;span style="color:#f92672">.&lt;/span>mut_n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-local-eps-계산">
 3. Local Eps 계산
 &lt;a class="anchor" href="#3-local-eps-%ea%b3%84%ec%82%b0">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># --- EPS Region ---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_eps_region&lt;/span>(df, idx, info):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pos &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>loc[idx, POS]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cur_hscore &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>loc[idx, HSCORE]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> eps_scaler &lt;span style="color:#f92672">=&lt;/span> ceil(EPSILON_SCALING_FACTOR &lt;span style="color:#f92672">*&lt;/span> cur_hscore)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ldeps &lt;span style="color:#f92672">=&lt;/span> rdeps &lt;span style="color:#f92672">=&lt;/span> eps_scaler &lt;span style="color:#f92672">*&lt;/span> EPSILON
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ldeps &lt;span style="color:#f92672">=&lt;/span> min(ldeps, info&lt;span style="color:#f92672">.&lt;/span>maxeps)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rdeps &lt;span style="color:#f92672">=&lt;/span> min(rdeps, info&lt;span style="color:#f92672">.&lt;/span>maxeps)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l_idx, r_idx &lt;span style="color:#f92672">=&lt;/span> idx &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, idx &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> l_idx &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">and&lt;/span> (pos &lt;span style="color:#f92672">-&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>loc[l_idx, POS]) &lt;span style="color:#f92672">&amp;lt;=&lt;/span> ldeps:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l_idx &lt;span style="color:#f92672">-=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> r_idx &lt;span style="color:#f92672">&amp;lt;&lt;/span> len(df) &lt;span style="color:#f92672">and&lt;/span> (df&lt;span style="color:#f92672">.&lt;/span>loc[r_idx, POS] &lt;span style="color:#f92672">-&lt;/span> pos) &lt;span style="color:#f92672">&amp;lt;=&lt;/span> rdeps:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r_idx &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> [l_idx &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, r_idx &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>], [idx &lt;span style="color:#f92672">-&lt;/span> (l_idx &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>), (r_idx &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">-&lt;/span> idx], eps_scaler
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="4-후보-core-돌연변이-선택">
 4. 후보 Core 돌연변이 선택
 &lt;a class="anchor" href="#4-%ed%9b%84%eb%b3%b4-core-%eb%8f%8c%ec%97%b0%eb%b3%80%ec%9d%b4-%ec%84%a0%ed%83%9d">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># --- Core Mutation Detection ---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_candidate_core_mutations&lt;/span>(df, info, tag):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mut_list &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ccm_list &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df &lt;span style="color:#f92672">=&lt;/span> mutation_filtering(df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> idx, pos &lt;span style="color:#f92672">in&lt;/span> enumerate(df[POS]):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lr_idx, lr_dist, es &lt;span style="color:#f92672">=&lt;/span> get_eps_region(df, idx, info)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stat &lt;span style="color:#f92672">=&lt;/span> get_eps_stats(idx, pos, df, lr_idx, lr_dist, es)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d &lt;span style="color:#f92672">=&lt;/span> stat&lt;span style="color:#f92672">.&lt;/span>to_dict()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mut_list&lt;span style="color:#f92672">.&lt;/span>append(d)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> d[&lt;span style="color:#e6db74">&amp;#39;mut_n&amp;#39;&lt;/span>] &lt;span style="color:#f92672">&amp;gt;=&lt;/span> MIN_MUTATIONS &lt;span style="color:#f92672">and&lt;/span> d[HSCORE_SUM] &lt;span style="color:#f92672">&amp;gt;=&lt;/span> CCM_MIN_HSCORE_SUM &lt;span style="color:#f92672">and&lt;/span> d[HSCORE_AVR] &lt;span style="color:#f92672">&amp;gt;=&lt;/span> CCM_MIN_HSCORE_AVR &lt;span style="color:#f92672">and&lt;/span> d[HSCORE] &lt;span style="color:#f92672">&amp;gt;=&lt;/span> CCM_MIN_HSCORE:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ccm_list&lt;span style="color:#f92672">.&lt;/span>append(idx)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>outdir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/total_results_&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>tag&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">.tsv&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(mut_list[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>keys()) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> m &lt;span style="color:#f92672">in&lt;/span> mut_list:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(map(str, m&lt;span style="color:#f92672">.&lt;/span>values())) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>outdir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/ccm_results_&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>tag&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">.tsv&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(mut_list[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>keys()) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> ccm_list:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(map(str, mut_list[i]&lt;span style="color:#f92672">.&lt;/span>values())) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>array(mut_list), ccm_list
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="5-cluster-expansion">
 5. Cluster Expansion
 &lt;a class="anchor" href="#5-cluster-expansion">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># --- Cluster Expansion ---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">expand_cluster&lt;/span>(ccm_idx, mut_list, info):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> es_l &lt;span style="color:#f92672">=&lt;/span> es_r &lt;span style="color:#f92672">=&lt;/span> mut_list[ccm_idx][&lt;span style="color:#e6db74">&amp;#39;eps_scaler&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l_idx, r_idx &lt;span style="color:#f92672">=&lt;/span> ccm_idx &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, ccm_idx &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mut_n &lt;span style="color:#f92672">=&lt;/span> len(mut_list)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l_max, r_max &lt;span style="color:#f92672">=&lt;/span> mut_list[ccm_idx][&lt;span style="color:#e6db74">&amp;#39;left_distance&amp;#39;&lt;/span>], mut_list[ccm_idx][&lt;span style="color:#e6db74">&amp;#39;right_distance&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l_pos &lt;span style="color:#f92672">=&lt;/span> mut_list[ccm_idx][POS]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> l_idx &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">and&lt;/span> (l_pos &lt;span style="color:#f92672">-&lt;/span> mut_list[l_idx][POS]) &lt;span style="color:#f92672">&amp;lt;=&lt;/span> l_max:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> delta &lt;span style="color:#f92672">=&lt;/span> es_l &lt;span style="color:#f92672">-&lt;/span> mut_list[l_idx][&lt;span style="color:#e6db74">&amp;#39;eps_scaler&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> es_l &lt;span style="color:#f92672">-=&lt;/span> delta &lt;span style="color:#f92672">/&lt;/span> info&lt;span style="color:#f92672">.&lt;/span>es_control_const
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l_max &lt;span style="color:#f92672">=&lt;/span> max(info&lt;span style="color:#f92672">.&lt;/span>eps &lt;span style="color:#f92672">*&lt;/span> es_l, &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l_idx &lt;span style="color:#f92672">-=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> r_idx &lt;span style="color:#f92672">&amp;lt;&lt;/span> mut_n &lt;span style="color:#f92672">and&lt;/span> (mut_list[r_idx][POS] &lt;span style="color:#f92672">-&lt;/span> l_pos) &lt;span style="color:#f92672">&amp;lt;=&lt;/span> r_max:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> delta &lt;span style="color:#f92672">=&lt;/span> es_r &lt;span style="color:#f92672">-&lt;/span> mut_list[r_idx][&lt;span style="color:#e6db74">&amp;#39;eps_scaler&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> es_r &lt;span style="color:#f92672">-=&lt;/span> delta &lt;span style="color:#f92672">/&lt;/span> info&lt;span style="color:#f92672">.&lt;/span>es_control_const
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r_max &lt;span style="color:#f92672">=&lt;/span> max(info&lt;span style="color:#f92672">.&lt;/span>eps &lt;span style="color:#f92672">*&lt;/span> es_r, &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r_idx &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l_idx &lt;span style="color:#f92672">=&lt;/span> max(l_idx &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r_idx &lt;span style="color:#f92672">=&lt;/span> min(r_idx &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, mut_n &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clust &lt;span style="color:#f92672">=&lt;/span> [a[POS] &lt;span style="color:#66d9ef">for&lt;/span> a &lt;span style="color:#f92672">in&lt;/span> mut_list[l_idx:r_idx &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#66d9ef">if&lt;/span> a[HSCORE] &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;left_position&amp;#39;&lt;/span>: min(clust),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;right_position&amp;#39;&lt;/span>: max(clust),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;length&amp;#39;&lt;/span>: max(clust) &lt;span style="color:#f92672">-&lt;/span> min(clust) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;mut_positions&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(map(str, sorted(clust)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="6-dynamic-clustering">
 6. Dynamic Clustering
 &lt;a class="anchor" href="#6-dynamic-clustering">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># --- Dynamic Clustering ---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">dynaclust&lt;/span>(mut_list, ccm_list, info, tag):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clusters &lt;span style="color:#f92672">=&lt;/span> [expand_cluster(i, mut_list, info) &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> ccm_list]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clusters&lt;span style="color:#f92672">.&lt;/span>sort(key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">lambda&lt;/span> x: x[&lt;span style="color:#e6db74">&amp;#39;left_position&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> merged &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> i &lt;span style="color:#f92672">&amp;lt;&lt;/span> len(clusters):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l, r &lt;span style="color:#f92672">=&lt;/span> clusters[i][&lt;span style="color:#e6db74">&amp;#39;left_position&amp;#39;&lt;/span>], clusters[i][&lt;span style="color:#e6db74">&amp;#39;right_position&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> muts &lt;span style="color:#f92672">=&lt;/span> set(map(int, clusters[i][&lt;span style="color:#e6db74">&amp;#39;mut_positions&amp;#39;&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j &lt;span style="color:#f92672">=&lt;/span> i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> j &lt;span style="color:#f92672">&amp;lt;&lt;/span> len(clusters) &lt;span style="color:#f92672">and&lt;/span> clusters[j][&lt;span style="color:#e6db74">&amp;#39;left_position&amp;#39;&lt;/span>] &lt;span style="color:#f92672">&amp;lt;=&lt;/span> r:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r &lt;span style="color:#f92672">=&lt;/span> max(r, clusters[j][&lt;span style="color:#e6db74">&amp;#39;right_position&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> muts&lt;span style="color:#f92672">.&lt;/span>update(map(int, clusters[j][&lt;span style="color:#e6db74">&amp;#39;mut_positions&amp;#39;&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(muts) &lt;span style="color:#f92672">&amp;gt;=&lt;/span> MIN_MUTATIONS:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> merged&lt;span style="color:#f92672">.&lt;/span>append({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;left_position&amp;#39;&lt;/span>: min(muts),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;right_position&amp;#39;&lt;/span>: max(muts),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;length&amp;#39;&lt;/span>: max(muts) &lt;span style="color:#f92672">-&lt;/span> min(muts) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;mut_positions&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(map(str, sorted(muts)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i &lt;span style="color:#f92672">=&lt;/span> j
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>outdir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/clusters_&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>tag&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">.txt&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(merged[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>keys()) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> m &lt;span style="color:#f92672">in&lt;/span> merged:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(map(str, m&lt;span style="color:#f92672">.&lt;/span>values())) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> merged
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>MutClust 함수 #1 expand_cluster</title><link>https://yshghid.github.io/docs/study/algorithm/algo13/</link><pubDate>Thu, 31 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/algorithm/algo13/</guid><description>&lt;h1 id="mutclust-함수-1-expand_cluster">
 MutClust 함수 #1 expand_cluster
 &lt;a class="anchor" href="#mutclust-%ed%95%a8%ec%88%98-1-expand_cluster">#&lt;/a>
&lt;/h1>
&lt;p>#2025-08-05&lt;/p>
&lt;hr>
&lt;p>#1&lt;/p>
&lt;p>input 변수&lt;/p>
&lt;ul>
&lt;li>ccm의 인덱스 ccm_idx&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># --- Cluster Expansion ---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">expand_cluster&lt;/span>(ccm_idx, mut_list, info):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> es_l &lt;span style="color:#f92672">=&lt;/span> mut_list[ccm_idx][&lt;span style="color:#e6db74">&amp;#39;eps_scaler&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l_idx, r_idx &lt;span style="color:#f92672">=&lt;/span> ccm_idx &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, ccm_idx &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mut_n &lt;span style="color:#f92672">=&lt;/span> len(mut_list)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l_max, r_max &lt;span style="color:#f92672">=&lt;/span> mut_list[ccm_idx][&lt;span style="color:#e6db74">&amp;#39;left_distance&amp;#39;&lt;/span>], mut_list[ccm_idx][&lt;span style="color:#e6db74">&amp;#39;right_distance&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l_pos &lt;span style="color:#f92672">=&lt;/span> mut_list[ccm_idx][POS]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> l_idx &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">and&lt;/span> (l_pos &lt;span style="color:#f92672">-&lt;/span> mut_list[l_idx][POS]) &lt;span style="color:#f92672">&amp;lt;=&lt;/span> l_max:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> delta &lt;span style="color:#f92672">=&lt;/span> es_l &lt;span style="color:#f92672">-&lt;/span> mut_list[l_idx][&lt;span style="color:#e6db74">&amp;#39;eps_scaler&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> es_l &lt;span style="color:#f92672">-=&lt;/span> delta &lt;span style="color:#f92672">/&lt;/span> info&lt;span style="color:#f92672">.&lt;/span>es_control_const
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l_max &lt;span style="color:#f92672">=&lt;/span> max(info&lt;span style="color:#f92672">.&lt;/span>eps &lt;span style="color:#f92672">*&lt;/span> es_l, &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l_idx &lt;span style="color:#f92672">-=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l_idx &lt;span style="color:#f92672">=&lt;/span> max(l_idx &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r_idx &lt;span style="color:#f92672">=&lt;/span> min(r_idx &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, mut_n &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clust &lt;span style="color:#f92672">=&lt;/span> [a[POS] &lt;span style="color:#66d9ef">for&lt;/span> a &lt;span style="color:#f92672">in&lt;/span> mut_list[l_idx:r_idx &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#66d9ef">if&lt;/span> a[HSCORE] &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>#full code&lt;/p></description></item><item><title>DBSCAN #2 슈도코드</title><link>https://yshghid.github.io/docs/study/ai/ai9/</link><pubDate>Mon, 28 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai9/</guid><description>&lt;h1 id="dbscan-2-슈도코드">
 DBSCAN #2 슈도코드
 &lt;a class="anchor" href="#dbscan-2-%ec%8a%88%eb%8f%84%ec%bd%94%eb%93%9c">#&lt;/a>
&lt;/h1>
&lt;p>#2025-07-28&lt;/p>
&lt;hr>
&lt;h3 id="1">
 1
 &lt;a class="anchor" href="#1">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code>Input:
 - D: 데이터 포인트 집합
 - eps: 이웃 거리 임계값
 - minPts: 최소 이웃 수 (밀도 기준)

Output:
 - cluster_labels: 각 데이터 포인트에 대한 클러스터 라벨 (노이즈는 -1)

Initialize:
 - cluster_id ← 0
 - label[x] ← UNVISITED for all x in D
&lt;/code>&lt;/pre>&lt;p>데이터 집합 D, 파라미터 eps와 minPts가 들어간다.&lt;/p>
&lt;h3 id="2">
 2
 &lt;a class="anchor" href="#2">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code>For each point x in D:
 If label[x] ≠ UNVISITED:
 continue

 N ← regionQuery(x, eps) // x 주변의 eps 이내 이웃 포인트 탐색

 If |N| &amp;lt; minPts:
 label[x] ← NOISE
// Else:
// cluster_id ← cluster_id + 1
// expandCluster(x, N, cluster_id, eps, minPts, label)

Function regionQuery(x, eps):
 return { all points y in D such that distance(x, y) ≤ eps }
&lt;/code>&lt;/pre>&lt;p>주석 처리 안된 부분만 보기.&lt;/p></description></item><item><title>DBSCAN #3 MutClust 슈도코드</title><link>https://yshghid.github.io/docs/study/ai/ai10/</link><pubDate>Mon, 28 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai10/</guid><description>&lt;h1 id="dbscan-3-mutclust-슈도코드">
 DBSCAN #3 MutClust 슈도코드
 &lt;a class="anchor" href="#dbscan-3-mutclust-%ec%8a%88%eb%8f%84%ec%bd%94%eb%93%9c">#&lt;/a>
&lt;/h1>
&lt;p>#2025-07-28&lt;/p>
&lt;hr>
&lt;h3 id="1">
 1
 &lt;a class="anchor" href="#1">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code>Input:
 - D: 데이터 포인트 집합
 - Efactor: 이웃 거리 조정값
 - DiminFactor: 클러스터 경계 조정값
 - minPts: 최소 이웃 수 (밀도 기준)

Output:
 - cluster_labels: 각 데이터 포인트에 대한 클러스터 라벨 (노이즈는 -1)

Initialize:
 - cluster_id ← 0
 - Label[x] ← UNVISITED for all x in D
&lt;/code>&lt;/pre>&lt;p>데이터 집합 D, 파라미터 eps와 minPts가 들어간다.&lt;/p>
&lt;h3 id="2-h-중요도-계산">
 2. H-중요도 계산
 &lt;a class="anchor" href="#2-h-%ec%a4%91%ec%9a%94%eb%8f%84-%ea%b3%84%ec%82%b0">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code>For each point x in D:
 x.H ← calculateHscore(x)
&lt;/code>&lt;/pre>&lt;p>각 데이터포인트에 대해 H-score를 계산한다.&lt;/p></description></item><item><title>DBSCAN: #1 1D 클러스터링의 성능 평가</title><link>https://yshghid.github.io/docs/study/ai/ai8/</link><pubDate>Mon, 28 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai8/</guid><description>&lt;h1 id="dbscan-1-1d-클러스터링의-성능-평가">
 DBSCAN: #1 1D 클러스터링의 성능 평가
 &lt;a class="anchor" href="#dbscan-1-1d-%ed%81%b4%eb%9f%ac%ec%8a%a4%ed%84%b0%eb%a7%81%ec%9d%98-%ec%84%b1%eb%8a%a5-%ed%8f%89%ea%b0%80">#&lt;/a>
&lt;/h1>
&lt;p>#2025-07-28&lt;/p>
&lt;hr>
&lt;h3 id="1-problem">
 1. Problem
 &lt;a class="anchor" href="#1-problem">#&lt;/a>
&lt;/h3>
&lt;p>클러스터 응집도는 보통 클러스터 내 데이터 간의 평균 거리나 분산, 혹은 실루엣 계수처럼 군집 내 응집도와 군집 간 분리도를 동시에 평가한다.&lt;/p>
&lt;p>하지만 1차원 데이터에서는 클러스터 응집도(Cluster Cohesion) 또는 실루엣 계수(Silhouette coefficient) 같은 지표가 잘 작동하지 않는다.&lt;/p>
&lt;h3 id="2-클러스터-응집도">
 2. 클러스터 응집도
 &lt;a class="anchor" href="#2-%ed%81%b4%eb%9f%ac%ec%8a%a4%ed%84%b0-%ec%9d%91%ec%a7%91%eb%8f%84">#&lt;/a>
&lt;/h3>
&lt;p>클러스터링 성능을 평가하는 지표 중 하나인 응집도(Cohesion)는 클러스터 내부의 데이터들이 얼마나 서로 가까운지를 측정하는 지표다. 대표적으로는 클러스터 내 모든 점 간의 평균 거리, 클러스터 중심과 각 점 사이의 평균 거리, 혹은 분산을 사용하는 방식 등이 있다. 이와 함께 자주 사용되는 분리도(Separation)는 클러스터 간의 거리가 얼마나 떨어져 있는지를 평가하며, 이 두 지표를 동시에 고려하는 실루엣 계수(Silhouette coefficient) 같은 복합 지표도 존재한다.&lt;/p></description></item><item><title>TFT #0 연구 방향</title><link>https://yshghid.github.io/docs/study/ai/ai4/</link><pubDate>Wed, 23 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai4/</guid><description>&lt;h1 id="tft-0-연구-방향">
 TFT #0 연구 방향
 &lt;a class="anchor" href="#tft-0-%ec%97%b0%ea%b5%ac-%eb%b0%a9%ed%96%a5">#&lt;/a>
&lt;/h1>
&lt;p>#2025-07-23&lt;/p>
&lt;hr>
&lt;p>(#2025-05-31 작성)&lt;/p>
&lt;p>#1&lt;/p>
&lt;p>사용하고자 하는 데이터는?&lt;/p>
&lt;ul>
&lt;li>feature
&lt;ul>
&lt;li>Clinical feature (17, float): Creatinine, Hemoglobin, LDH, Lymphocytes, Neutrophils, Platelet count, WBC count, hs-CRP, D-Dimer, BDTEMP, BREATH, DBP, SBP, PULSE, SPO2, O2_APPLY&lt;/li>
&lt;li>Antibiotics feature (2, str)
&lt;ul>
&lt;li>Treatment (list, str): 투여한 항생제, 결측값일수도있고 2개 이상일수도 있음&lt;/li>
&lt;li>Strain (str): 환자가 감염된 균주, 1개&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>NEWS (int): 중증도&lt;/li>
&lt;li>Code (int/str): 환자 등록번호&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>time-series
&lt;ul>
&lt;li>10개 시점 (항생제 투여 기준 D-3 ~ D+6)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>TFT input 형식은?&lt;/p></description></item><item><title>TFT #1 입력 시퀀스 생성</title><link>https://yshghid.github.io/docs/study/ai/ai5/</link><pubDate>Wed, 23 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai5/</guid><description>&lt;h1 id="tft-1-입력-시퀀스-생성">
 TFT #1 입력 시퀀스 생성
 &lt;a class="anchor" href="#tft-1-%ec%9e%85%eb%a0%a5-%ec%8b%9c%ed%80%80%ec%8a%a4-%ec%83%9d%ec%84%b1">#&lt;/a>
&lt;/h1>
&lt;p>#2025-07-23&lt;/p>
&lt;hr>
&lt;h3 id="1-load-package">
 1. Load package
 &lt;a class="anchor" href="#1-load-package">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">%&lt;/span>load_ext autoreload
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">%&lt;/span>autoreload &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pandas &lt;span style="color:#66d9ef">as&lt;/span> pd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#66d9ef">as&lt;/span> np
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pickle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> ast
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sys&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>append(&lt;span style="color:#e6db74">&amp;#39;/data3/projects/2025_Antibiotics/YSH/bin&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> sc &lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>os&lt;span style="color:#f92672">.&lt;/span>chdir(&lt;span style="color:#e6db74">&amp;#39;/data3/projects/2025_Antibiotics/YSH/workspace&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-load-raw-data">
 2. Load raw data
 &lt;a class="anchor" href="#2-load-raw-data">#&lt;/a>
&lt;/h3>
&lt;p>#data&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>/data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── PreprocessedData/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── TimecourseData/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── * (*: patient id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── SeverityScore.csv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── Laboratory_processed.csv 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── Medication.csv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── PreprocessedData_knuh/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── (PreprocessedData와 동일)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── 병원체자원은행 균주현황(2014-2024.06)_Sepsis.xlsx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/data_knuch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── (empty)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/data_knuh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── (empty)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>data_knuch &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/data/PreprocessedData/TimecourseData&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data_knuh &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/data/PreprocessedData_knuh/TimecourseData&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pids &lt;span style="color:#f92672">=&lt;/span> [d &lt;span style="color:#66d9ef">for&lt;/span> d &lt;span style="color:#f92672">in&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>listdir(data_knuch)] &lt;span style="color:#f92672">+&lt;/span> [d &lt;span style="color:#66d9ef">for&lt;/span> d &lt;span style="color:#f92672">in&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>listdir(data_knuh)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>len(pids)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>13779
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-raw-data-processing">
 3. Raw data processing
 &lt;a class="anchor" href="#3-raw-data-processing">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#processing knuch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>datadir &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/data/PreprocessedData/TimecourseData&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pids &lt;span style="color:#f92672">=&lt;/span> [d &lt;span style="color:#66d9ef">for&lt;/span> d &lt;span style="color:#f92672">in&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>listdir(datadir)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>input_dict &lt;span style="color:#f92672">=&lt;/span> make_input(datadir, pids)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>input_dict, no_strains &lt;span style="color:#f92672">=&lt;/span> add_strain(input_dict)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>outdir &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;data_knuch&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>outdir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/Input.pkl&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;wb&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pickle&lt;span style="color:#f92672">.&lt;/span>dump(input_dict, f)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(len(list(input_dict&lt;span style="color:#f92672">.&lt;/span>keys())))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(len(no_strains))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>4516
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#processing knuh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>datadir &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/data/PreprocessedData_knuh/TimecourseData&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pids &lt;span style="color:#f92672">=&lt;/span> [d &lt;span style="color:#66d9ef">for&lt;/span> d &lt;span style="color:#f92672">in&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>listdir(datadir)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>input_dict &lt;span style="color:#f92672">=&lt;/span> make_input(datadir, pids)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>input_dict, no_strains &lt;span style="color:#f92672">=&lt;/span> add_strain(input_dict)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>outdir &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;data_knuh&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>outdir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/Input.pkl&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;wb&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pickle&lt;span style="color:#f92672">.&lt;/span>dump(input_dict, f)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(len(list(input_dict&lt;span style="color:#f92672">.&lt;/span>keys())))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(len(no_strains))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>9100
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>#result&lt;/p></description></item><item><title>TFT #2 입력 feature 생성</title><link>https://yshghid.github.io/docs/study/ai/ai6/</link><pubDate>Wed, 23 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai6/</guid><description>&lt;h1 id="tft-2-입력-feature-생성">
 TFT #2 입력 feature 생성
 &lt;a class="anchor" href="#tft-2-%ec%9e%85%eb%a0%a5-feature-%ec%83%9d%ec%84%b1">#&lt;/a>
&lt;/h1>
&lt;p>#2025-07-23&lt;/p>
&lt;hr>
&lt;h3 id="1-load-package">
 1. Load package
 &lt;a class="anchor" href="#1-load-package">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">%&lt;/span>load_ext autoreload
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">%&lt;/span>autoreload &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pandas &lt;span style="color:#66d9ef">as&lt;/span> pd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#66d9ef">as&lt;/span> np
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pickle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> ast
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sys&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>append(&lt;span style="color:#e6db74">&amp;#39;/data3/projects/2025_Antibiotics/YSH/bin&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> sc &lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>os&lt;span style="color:#f92672">.&lt;/span>chdir(&lt;span style="color:#e6db74">&amp;#39;/data3/projects/2025_Antibiotics/YSH/workspace&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-make-feature1">
 2. Make feature1
 &lt;a class="anchor" href="#2-make-feature1">#&lt;/a>
&lt;/h3>
&lt;p>#data&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>/data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── all_meds.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/data_knuch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── sequence
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── *.pkl (*: antibiotics)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/data_knuh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── sequence
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── *.pkl (*: antibiotics)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>medinfo &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/data/all_meds.txt&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> open(medinfo, &lt;span style="color:#e6db74">&amp;#39;r&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> meds &lt;span style="color:#f92672">=&lt;/span> [line&lt;span style="color:#f92672">.&lt;/span>strip()&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;_&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">for&lt;/span> line &lt;span style="color:#f92672">in&lt;/span> f &lt;span style="color:#66d9ef">if&lt;/span> line&lt;span style="color:#f92672">.&lt;/span>strip()]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>outdir &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;data_&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>dtype&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>strain_dic &lt;span style="color:#f92672">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> med &lt;span style="color:#f92672">in&lt;/span> meds:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;data_&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>dtype&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/sequence/&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>med&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">.pkl&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;rb&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res_dict &lt;span style="color:#f92672">=&lt;/span> pickle&lt;span style="color:#f92672">.&lt;/span>load(f)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> feature1_list &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> pid, df &lt;span style="color:#f92672">in&lt;/span> res_dict&lt;span style="color:#f92672">.&lt;/span>items():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> news_bf &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>iloc[&lt;span style="color:#ae81ff">2&lt;/span>][&lt;span style="color:#e6db74">&amp;#39;NEWS&amp;#39;&lt;/span>] &lt;span style="color:#75715e"># 3번째 행 (0-indexed)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> news_af &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>iloc[&lt;span style="color:#ae81ff">3&lt;/span>:][&lt;span style="color:#e6db74">&amp;#39;NEWS&amp;#39;&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>max() &lt;span style="color:#75715e"># 4번째 행부터 마지막까지 중 최댓값&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> news_af &lt;span style="color:#f92672">&amp;lt;&lt;/span> news_bf: &lt;span style="color:#75715e"># &amp;#34;작은&amp;#34; 경우만 (같은 건 포함하지 않음)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> feature1_list&lt;span style="color:#f92672">.&lt;/span>append(pid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#print(len(feature1_list))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filtered_res_dict &lt;span style="color:#f92672">=&lt;/span> {pid: res_dict[pid] &lt;span style="color:#66d9ef">for&lt;/span> pid &lt;span style="color:#f92672">in&lt;/span> feature1_list &lt;span style="color:#66d9ef">if&lt;/span> pid &lt;span style="color:#f92672">in&lt;/span> res_dict}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;data_&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>dtype&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/temp/feature1/&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>med&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">.pkl&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;wb&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pickle&lt;span style="color:#f92672">.&lt;/span>dump(filtered_res_dict, f)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> pid, df &lt;span style="color:#f92672">in&lt;/span> filtered_res_dict&lt;span style="color:#f92672">.&lt;/span>items():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(df) &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cur_strain &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>iloc[&lt;span style="color:#ae81ff">2&lt;/span>][&lt;span style="color:#e6db74">&amp;#39;strain&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> isinstance(cur_strain, list):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strains &lt;span style="color:#f92672">=&lt;/span> cur_strain
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strains &lt;span style="color:#f92672">=&lt;/span> [cur_strain]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">except&lt;/span> &lt;span style="color:#a6e22e">Exception&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> e:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#print(med)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> strain &lt;span style="color:#f92672">in&lt;/span> strains:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> strain &lt;span style="color:#f92672">in&lt;/span> strain_dic:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strain_dic[strain]&lt;span style="color:#f92672">.&lt;/span>append(med)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strain_dic[strain] &lt;span style="color:#f92672">=&lt;/span> [med]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> strain &lt;span style="color:#f92672">in&lt;/span> strain_dic:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strain_dic[strain] &lt;span style="color:#f92672">=&lt;/span> list(set(strain_dic[strain]))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Save feature1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>outdir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/feature1.pkl&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;wb&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pickle&lt;span style="color:#f92672">.&lt;/span>dump(strain_dic, f)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>#result&lt;/p></description></item><item><title>TFT #3 모델 학습</title><link>https://yshghid.github.io/docs/study/ai/ai7/</link><pubDate>Wed, 23 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai7/</guid><description>&lt;h1 id="tft-3-모델-학습">
 TFT #3 모델 학습
 &lt;a class="anchor" href="#tft-3-%eb%aa%a8%eb%8d%b8-%ed%95%99%ec%8a%b5">#&lt;/a>
&lt;/h1>
&lt;p>#2025-07-23&lt;/p>
&lt;hr>
&lt;h3 id="1-load-package">
 1. Load package
 &lt;a class="anchor" href="#1-load-package">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pytorch_lightning &lt;span style="color:#66d9ef">as&lt;/span> pl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pytorch_lightning.callbacks &lt;span style="color:#f92672">import&lt;/span> EarlyStopping, LearningRateMonitor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pytorch_lightning.loggers &lt;span style="color:#f92672">import&lt;/span> TensorBoardLogger
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pytorch_forecasting &lt;span style="color:#f92672">import&lt;/span> TimeSeriesDataSet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pytorch_forecasting.models &lt;span style="color:#f92672">import&lt;/span> TemporalFusionTransformer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pytorch_forecasting.models.baseline &lt;span style="color:#f92672">import&lt;/span> Baseline
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pytorch_forecasting.metrics &lt;span style="color:#f92672">import&lt;/span> QuantileLoss
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pytorch_forecasting.metrics &lt;span style="color:#f92672">import&lt;/span> MAE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pytorch_forecasting.data &lt;span style="color:#f92672">import&lt;/span> GroupNormalizer, NaNLabelEncoder
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#66d9ef">as&lt;/span> np
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pandas &lt;span style="color:#66d9ef">as&lt;/span> pd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> torch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pickle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> matplotlib.pyplot &lt;span style="color:#66d9ef">as&lt;/span> plt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>#data&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>/data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── Sequence.pkl
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-load-data">
 2. Load data
 &lt;a class="anchor" href="#2-load-data">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>sequence &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>read_pickle(&lt;span style="color:#e6db74">&amp;#34;/data/Sequence.pkl&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sequence
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://github.com/user-attachments/assets/2dc80ef0-4da5-4d72-bf2d-4d7087b38b64" alt="image" />&lt;/p></description></item><item><title>RAG #2 출력 파서의 개념, Pydantic/Json 출력 파서</title><link>https://yshghid.github.io/docs/study/ai/ai2/</link><pubDate>Sat, 19 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai2/</guid><description>&lt;h1 id="rag-2-출력-파서의-개념-pydanticjson-출력-파서">
 RAG #2 출력 파서의 개념, Pydantic/Json 출력 파서
 &lt;a class="anchor" href="#rag-2-%ec%b6%9c%eb%a0%a5-%ed%8c%8c%ec%84%9c%ec%9d%98-%ea%b0%9c%eb%85%90-pydanticjson-%ec%b6%9c%eb%a0%a5-%ed%8c%8c%ec%84%9c">#&lt;/a>
&lt;/h1>
&lt;p>#2025-07-19&lt;/p>
&lt;hr>
&lt;h3 id="1-출력-파서의-개념과-종류-그리고-세가지-주요-메서드">
 1. 출력 파서의 개념과 종류 그리고 세가지 주요 메서드
 &lt;a class="anchor" href="#1-%ec%b6%9c%eb%a0%a5-%ed%8c%8c%ec%84%9c%ec%9d%98-%ea%b0%9c%eb%85%90%ea%b3%bc-%ec%a2%85%eb%a5%98-%ea%b7%b8%eb%a6%ac%ea%b3%a0-%ec%84%b8%ea%b0%80%ec%a7%80-%ec%a3%bc%ec%9a%94-%eb%a9%94%ec%84%9c%eb%93%9c">#&lt;/a>
&lt;/h3>
&lt;p>출력 파서(output parser)는 LLM에서 생성된 응답을 받아서 우리가 원하는 형식으로 변환해주는 역할을 한다. 쉽게 말해, LLM은 텍스트만 생성하지만 우리는 그 텍스트를 리스트, 딕셔너리, JSON, 숫자 등 구조화된 데이터로 바꾸어서 프로그램에 넘기거나, 다음 단계 체인으로 활용하길 원할 때가 많다. 출력 파서는 이 연결고리 역할을 한다. 출력 파서는 LLM이라는 기계가 말한 인간 언어를 다시 기계가 이해할 수 있는 언어로 &amp;lsquo;번역&amp;rsquo;하는 통역사 같은 존재이다. 예를 들어 LLM이 “답은 아시아입니다”라고 말하면, 이걸 다시 &lt;code>{&amp;quot;answer&amp;quot;: &amp;quot;아시아&amp;quot;}&lt;/code> 같은 JSON 객체로 바꿔주는 게 파서의 역할이다. 반대로 말하면, 출력 파서 없이는 LLM이 말한 결과를 그대로 사람이 읽고 판단하거나 후처리 코드를 추가해야만 한다.&lt;/p></description></item><item><title>RAG #3 자동 대화 이력 관리</title><link>https://yshghid.github.io/docs/study/ai/ai3/</link><pubDate>Sat, 19 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai3/</guid><description>&lt;h1 id="rag-3-자동-대화-이력-관리">
 RAG #3 자동 대화 이력 관리
 &lt;a class="anchor" href="#rag-3-%ec%9e%90%eb%8f%99-%eb%8c%80%ed%99%94-%ec%9d%b4%eb%a0%a5-%ea%b4%80%eb%a6%ac">#&lt;/a>
&lt;/h1>
&lt;p>#2025-07-19&lt;/p>
&lt;hr>
&lt;h3 id="1-자동-대화-이력-관리">
 1. 자동 대화 이력 관리
 &lt;a class="anchor" href="#1-%ec%9e%90%eb%8f%99-%eb%8c%80%ed%99%94-%ec%9d%b4%eb%a0%a5-%ea%b4%80%eb%a6%ac">#&lt;/a>
&lt;/h3>
&lt;p>&lt;code>ChatPromptTemplate&lt;/code>을 통해 시스템 메시지를 포함하는 프롬프트를 만든다. 시스템 메시지는 모델에게 “너는 금융 상담사야”라고 역할을 부여하는 것이다. 이어지는 &lt;code>(&amp;quot;placeholder&amp;quot;, &amp;quot;{messages}&amp;quot;)&lt;/code>는 실제 사용자의 질문과 AI의 답변이 이 자리에 채워질 것이라는 의미다. 이 프롬프트는 &lt;code>chat = ChatOpenAI(model=&amp;quot;gpt-4o-mini&amp;quot;)&lt;/code>와 연결되는데, 이는 OpenAI의 gpt-4o-mini 모델을 사용하는 챗 인터페이스이다. 이 프롬프트와 모델을 &lt;code>prompt | chat&lt;/code>이라는 LCEL 표현으로 묶으면, 하나의 체인이 만들어진다. 이 체인은 주어진 메시지 목록을 받아, GPT 모델에 전달하고 응답을 생성하는 구조다.&lt;/p></description></item><item><title>RAG #1 랭체인, LCEL, 프롬프트</title><link>https://yshghid.github.io/docs/study/ai/ai1/</link><pubDate>Thu, 17 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai1/</guid><description>&lt;h1 id="rag-1-랭체인-lcel-프롬프트">
 RAG #1 랭체인, LCEL, 프롬프트
 &lt;a class="anchor" href="#rag-1-%eb%9e%ad%ec%b2%b4%ec%9d%b8-lcel-%ed%94%84%eb%a1%ac%ed%94%84%ed%8a%b8">#&lt;/a>
&lt;/h1>
&lt;p>#2025-07-17&lt;/p>
&lt;hr>
&lt;h3 id="1-랭체인-생태계의-주요-패키지">
 1. 랭체인 생태계의 주요 패키지
 &lt;a class="anchor" href="#1-%eb%9e%ad%ec%b2%b4%ec%9d%b8-%ec%83%9d%ed%83%9c%ea%b3%84%ec%9d%98-%ec%a3%bc%ec%9a%94-%ed%8c%a8%ed%82%a4%ec%a7%80">#&lt;/a>
&lt;/h3>
&lt;p>랭체인(LangChain)은 LLM(Large Language Model)을 활용한 애플리케이션을 쉽게 만들 수 있도록 돕는 프레임워크이다. 이 생태계는 단일 라이브러리로 구성된 것이 아니라 여러 개의 하위 패키지로 나뉘어 있고, 각각의 역할이 명확하게 분리되어 있다. 랭체인의 주요 목적은 LLM을 단순한 텍스트 생성 도구가 아니라, 여러 시스템과 결합하여 유의미한 작업을 수행하는 &amp;ldquo;생각하고 행동하는&amp;rdquo; 에이전트로 만드는 것이다. 이 생태계의 핵심 구성 요소들을 쉽게 설명하자면, 마치 LLM이라는 뇌에 주변 감각기관과 기억장치, 도구들, 그리고 의사결정 능력을 붙여주는 것이라고 보면 된다.&lt;/p></description></item><item><title>#2 Explainable AI</title><link>https://yshghid.github.io/docs/study/etc/etc2/</link><pubDate>Thu, 26 Jun 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/etc/etc2/</guid><description>&lt;h1 id="2-explainable-ai">
 #2 Explainable AI
 &lt;a class="anchor" href="#2-explainable-ai">#&lt;/a>
&lt;/h1>
&lt;p>#2025-06-26&lt;/p>
&lt;hr>
&lt;h3 id="1-explainable-ai란">
 1. Explainable AI란?
 &lt;a class="anchor" href="#1-explainable-ai%eb%9e%80">#&lt;/a>
&lt;/h3>
&lt;p>Explainable AI는 인공지능(AI) 또는 머신러닝(ML) 모델이 어떤 방식으로 특정 결과를 도출했는지 사람이 이해할 수 있도록 설명하는 기술과 방법론.&lt;/p>
&lt;h3 id="2-xai-기법-분류">
 2. XAI 기법 분류
 &lt;a class="anchor" href="#2-xai-%ea%b8%b0%eb%b2%95-%eb%b6%84%eb%a5%98">#&lt;/a>
&lt;/h3>
&lt;p>모델 구조&lt;/p>
&lt;ul>
&lt;li>Intrinsic:	모델 자체가 설명 가능한 구조 (예: 의사결정나무, 선형회귀 등)&lt;/li>
&lt;li>Post-hoc:	모델 학습 후 별도로 설명 생성 (예: SHAP, LIME)
대상&lt;/li>
&lt;li>Global:	전체 모델의 작동 원리를 설명&lt;/li>
&lt;li>Local:	특정 샘플의 예측 결과를 설명&lt;/li>
&lt;/ul>
&lt;h3 id="3-주요-post-hoc-설명-기법">
 3. 주요 Post-hoc 설명 기법
 &lt;a class="anchor" href="#3-%ec%a3%bc%ec%9a%94-post-hoc-%ec%84%a4%eb%aa%85-%ea%b8%b0%eb%b2%95">#&lt;/a>
&lt;/h3>
&lt;p>LIME (Local Interpretable Model-Agnostic Explanations): 주변 입력을 랜덤하게 생성하고, 단순 모델(선형 회귀 등)을 학습해 근사&lt;/p></description></item><item><title>#3 Random Forest</title><link>https://yshghid.github.io/docs/study/etc/etc3/</link><pubDate>Thu, 26 Jun 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/etc/etc3/</guid><description>&lt;h1 id="3-random-forest">
 #3 Random Forest
 &lt;a class="anchor" href="#3-random-forest">#&lt;/a>
&lt;/h1>
&lt;p>#2025-06-26&lt;/p>
&lt;hr>
&lt;h3 id="1-random-forest의-분류와-회귀">
 1. Random Forest의 분류와 회귀
 &lt;a class="anchor" href="#1-random-forest%ec%9d%98-%eb%b6%84%eb%a5%98%ec%99%80-%ed%9a%8c%ea%b7%80">#&lt;/a>
&lt;/h3>
&lt;p>랜덤 포레스트(Random Forest)는&lt;/p>
&lt;ul>
&lt;li>RandomForestClassifier: 분류용&lt;/li>
&lt;li>RandomForestRegressor: 회귀용 이다.&lt;/li>
&lt;/ul>
&lt;p>분류와 회귀의 핵심 차이는&lt;/p>
&lt;ul>
&lt;li>분류는 각 leaf node에 속한 클래스의 비율을 기반으로 확률 예측&lt;/li>
&lt;li>회귀는 leaf node에 있는 target 값들의 평균을 예측값으로 사용&lt;/li>
&lt;/ul>
&lt;p>랜덤 포레스트의 트리 구조(= 리프 분기 방식)는 분류나 회귀나 똑같고&lt;/p>
&lt;ul>
&lt;li>단지 리프 노드에 어떤 데이터 형식이 들어가느냐에 따라
&lt;ul>
&lt;li>분류이면 라벨 비율(확률 분포)&lt;/li>
&lt;li>회귀이면 값의 평균으로 예측을 내놓는다&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="2-트리-기반-모델과-클러스터링의-차이">
 2. 트리 기반 모델과 클러스터링의 차이
 &lt;a class="anchor" href="#2-%ed%8a%b8%eb%a6%ac-%ea%b8%b0%eb%b0%98-%eb%aa%a8%eb%8d%b8%ea%b3%bc-%ed%81%b4%eb%9f%ac%ec%8a%a4%ed%84%b0%eb%a7%81%ec%9d%98-%ec%b0%a8%ec%9d%b4">#&lt;/a>
&lt;/h3>
&lt;p>랜덤 포레스트(혹은 결정 트리)의 리프 분기 방식은 &amp;lsquo;거리 기반&amp;rsquo;이 아님&lt;/p></description></item></channel></rss>