<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AI on</title><link>https://yshghid.github.io/categories/ai/</link><description>Recent content in AI on</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 19 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://yshghid.github.io/categories/ai/index.xml" rel="self" type="application/rss+xml"/><item><title>RAG #2 출력 파서의 개념, Pydantic/Json 출력 파서</title><link>https://yshghid.github.io/docs/study/ai/ai2/</link><pubDate>Sat, 19 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai2/</guid><description>&lt;h1 id="rag-2-출력-파서의-개념-pydanticjson-출력-파서">
 RAG #2 출력 파서의 개념, Pydantic/Json 출력 파서
 &lt;a class="anchor" href="#rag-2-%ec%b6%9c%eb%a0%a5-%ed%8c%8c%ec%84%9c%ec%9d%98-%ea%b0%9c%eb%85%90-pydanticjson-%ec%b6%9c%eb%a0%a5-%ed%8c%8c%ec%84%9c">#&lt;/a>
&lt;/h1>
&lt;p>#2025-07-19&lt;/p>
&lt;hr>
&lt;h3 id="1-출력-파서의-개념과-종류-그리고-세가지-주요-메서드">
 1. 출력 파서의 개념과 종류 그리고 세가지 주요 메서드
 &lt;a class="anchor" href="#1-%ec%b6%9c%eb%a0%a5-%ed%8c%8c%ec%84%9c%ec%9d%98-%ea%b0%9c%eb%85%90%ea%b3%bc-%ec%a2%85%eb%a5%98-%ea%b7%b8%eb%a6%ac%ea%b3%a0-%ec%84%b8%ea%b0%80%ec%a7%80-%ec%a3%bc%ec%9a%94-%eb%a9%94%ec%84%9c%eb%93%9c">#&lt;/a>
&lt;/h3>
&lt;p>출력 파서(output parser)는 LLM에서 생성된 응답을 받아서 우리가 원하는 형식으로 변환해주는 역할을 한다. 쉽게 말해, LLM은 텍스트만 생성하지만 우리는 그 텍스트를 리스트, 딕셔너리, JSON, 숫자 등 구조화된 데이터로 바꾸어서 프로그램에 넘기거나, 다음 단계 체인으로 활용하길 원할 때가 많다. 출력 파서는 이 연결고리 역할을 한다. 출력 파서는 LLM이라는 기계가 말한 인간 언어를 다시 기계가 이해할 수 있는 언어로 &amp;lsquo;번역&amp;rsquo;하는 통역사 같은 존재이다. 예를 들어 LLM이 “답은 아시아입니다”라고 말하면, 이걸 다시 &lt;code>{&amp;quot;answer&amp;quot;: &amp;quot;아시아&amp;quot;}&lt;/code> 같은 JSON 객체로 바꿔주는 게 파서의 역할이다. 반대로 말하면, 출력 파서 없이는 LLM이 말한 결과를 그대로 사람이 읽고 판단하거나 후처리 코드를 추가해야만 한다.&lt;/p></description></item><item><title>RAG #1 랭체인, LCEL, 프롬프트</title><link>https://yshghid.github.io/docs/study/ai/ai1/</link><pubDate>Thu, 17 Jul 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/ai/ai1/</guid><description>&lt;h1 id="rag-1-랭체인-lcel-프롬프트">
 RAG #1 랭체인, LCEL, 프롬프트
 &lt;a class="anchor" href="#rag-1-%eb%9e%ad%ec%b2%b4%ec%9d%b8-lcel-%ed%94%84%eb%a1%ac%ed%94%84%ed%8a%b8">#&lt;/a>
&lt;/h1>
&lt;p>#2025-07-17&lt;/p>
&lt;hr>
&lt;h3 id="1-랭체인-생태계의-주요-패키지">
 1. 랭체인 생태계의 주요 패키지
 &lt;a class="anchor" href="#1-%eb%9e%ad%ec%b2%b4%ec%9d%b8-%ec%83%9d%ed%83%9c%ea%b3%84%ec%9d%98-%ec%a3%bc%ec%9a%94-%ed%8c%a8%ed%82%a4%ec%a7%80">#&lt;/a>
&lt;/h3>
&lt;p>랭체인(LangChain)은 LLM(Large Language Model)을 활용한 애플리케이션을 쉽게 만들 수 있도록 돕는 프레임워크이다. 이 생태계는 단일 라이브러리로 구성된 것이 아니라 여러 개의 하위 패키지로 나뉘어 있고, 각각의 역할이 명확하게 분리되어 있다. 랭체인의 주요 목적은 LLM을 단순한 텍스트 생성 도구가 아니라, 여러 시스템과 결합하여 유의미한 작업을 수행하는 &amp;ldquo;생각하고 행동하는&amp;rdquo; 에이전트로 만드는 것이다. 이 생태계의 핵심 구성 요소들을 파인만 방식으로 쉽게 설명하자면, 마치 LLM이라는 뇌에 주변 감각기관과 기억장치, 도구들, 그리고 의사결정 능력을 붙여주는 것이라고 보면 된다.&lt;/p></description></item><item><title>#2 Explainable AI</title><link>https://yshghid.github.io/docs/study/etc/etc2/</link><pubDate>Thu, 26 Jun 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/etc/etc2/</guid><description>&lt;h1 id="2-explainable-ai">
 #2 Explainable AI
 &lt;a class="anchor" href="#2-explainable-ai">#&lt;/a>
&lt;/h1>
&lt;p>#2025-06-26&lt;/p>
&lt;hr>
&lt;h3 id="1-explainable-ai란">
 1. Explainable AI란?
 &lt;a class="anchor" href="#1-explainable-ai%eb%9e%80">#&lt;/a>
&lt;/h3>
&lt;p>Explainable AI는 인공지능(AI) 또는 머신러닝(ML) 모델이 어떤 방식으로 특정 결과를 도출했는지 사람이 이해할 수 있도록 설명하는 기술과 방법론.&lt;/p>
&lt;h3 id="2-xai-기법-분류">
 2. XAI 기법 분류
 &lt;a class="anchor" href="#2-xai-%ea%b8%b0%eb%b2%95-%eb%b6%84%eb%a5%98">#&lt;/a>
&lt;/h3>
&lt;p>모델 구조&lt;/p>
&lt;ul>
&lt;li>Intrinsic:	모델 자체가 설명 가능한 구조 (예: 의사결정나무, 선형회귀 등)&lt;/li>
&lt;li>Post-hoc:	모델 학습 후 별도로 설명 생성 (예: SHAP, LIME)
대상&lt;/li>
&lt;li>Global:	전체 모델의 작동 원리를 설명&lt;/li>
&lt;li>Local:	특정 샘플의 예측 결과를 설명&lt;/li>
&lt;/ul>
&lt;h3 id="3-주요-post-hoc-설명-기법">
 3. 주요 Post-hoc 설명 기법
 &lt;a class="anchor" href="#3-%ec%a3%bc%ec%9a%94-post-hoc-%ec%84%a4%eb%aa%85-%ea%b8%b0%eb%b2%95">#&lt;/a>
&lt;/h3>
&lt;p>LIME (Local Interpretable Model-Agnostic Explanations): 주변 입력을 랜덤하게 생성하고, 단순 모델(선형 회귀 등)을 학습해 근사&lt;/p></description></item><item><title>#3 Random Forest</title><link>https://yshghid.github.io/docs/study/etc/etc3/</link><pubDate>Thu, 26 Jun 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/etc/etc3/</guid><description>&lt;h1 id="3-random-forest">
 #3 Random Forest
 &lt;a class="anchor" href="#3-random-forest">#&lt;/a>
&lt;/h1>
&lt;p>#2025-06-26&lt;/p>
&lt;hr>
&lt;h3 id="1-random-forest의-분류와-회귀">
 1. Random Forest의 분류와 회귀
 &lt;a class="anchor" href="#1-random-forest%ec%9d%98-%eb%b6%84%eb%a5%98%ec%99%80-%ed%9a%8c%ea%b7%80">#&lt;/a>
&lt;/h3>
&lt;p>랜덤 포레스트(Random Forest)는&lt;/p>
&lt;ul>
&lt;li>RandomForestClassifier: 분류용&lt;/li>
&lt;li>RandomForestRegressor: 회귀용 이다.&lt;/li>
&lt;/ul>
&lt;p>분류와 회귀의 핵심 차이는&lt;/p>
&lt;ul>
&lt;li>분류는 각 leaf node에 속한 클래스의 비율을 기반으로 확률 예측&lt;/li>
&lt;li>회귀는 leaf node에 있는 target 값들의 평균을 예측값으로 사용&lt;/li>
&lt;/ul>
&lt;p>랜덤 포레스트의 트리 구조(= 리프 분기 방식)는 분류나 회귀나 똑같고&lt;/p>
&lt;ul>
&lt;li>단지 리프 노드에 어떤 데이터 형식이 들어가느냐에 따라
&lt;ul>
&lt;li>분류이면 라벨 비율(확률 분포)&lt;/li>
&lt;li>회귀이면 값의 평균으로 예측을 내놓는다&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="2-트리-기반-모델과-클러스터링의-차이">
 2. 트리 기반 모델과 클러스터링의 차이
 &lt;a class="anchor" href="#2-%ed%8a%b8%eb%a6%ac-%ea%b8%b0%eb%b0%98-%eb%aa%a8%eb%8d%b8%ea%b3%bc-%ed%81%b4%eb%9f%ac%ec%8a%a4%ed%84%b0%eb%a7%81%ec%9d%98-%ec%b0%a8%ec%9d%b4">#&lt;/a>
&lt;/h3>
&lt;p>랜덤 포레스트(혹은 결정 트리)의 리프 분기 방식은 &amp;lsquo;거리 기반&amp;rsquo;이 아님&lt;/p></description></item></channel></rss>