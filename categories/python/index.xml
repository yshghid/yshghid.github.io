<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Lifelog 2025</title>
    <link>http://localhost:1313/categories/python/</link>
    <description>Recent content in Python on Lifelog 2025</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>프로그래머스 알고리즘 고득점 kit - 스택/큐</title>
      <link>http://localhost:1313/docs/study/tech/tech8/</link>
      <pubDate>Wed, 09 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/tech/tech8/</guid>
      <description>프로그래머스 알고리즘 고득점 kit - 스택/큐 # 목록 # 2024-04-09 ⋯ [스택/큐] 기능개발&#xA;2024-04-10 ⋯ [스택/큐] 올바른 괄호&#xA;2024-04-10 ⋯ [스택/큐] 프로세스&#xA;2024-04-10 ⋯ [스택/큐] 다리를 지나는 트럭&#xA;기능개발 # 입출력 예 # progresses = [93, 30, 55] speeds = [1, 30, 5] return = [2, 1] 개념 # progresses = [99,99,97] speeds = [1,1,1]이면 cnt=0 progresses = [100,100,98] -&amp;gt; cnt=1 -&amp;gt; cnt=2 -&amp;gt; answer = [2] cnt=0 progresses = [99] -&amp;gt; cnt=0, answer = [2] cnt=0 progresses = [100] -&amp;gt; cnt=1 -&amp;gt; answer = [1] cnt=0 progresses = [] -&amp;gt; 종료 코드 # def solution(progresses, speeds): answer = [] while progresses: for i in range(len(progresses)): progresses[i] += speeds[i] cnt = 0 while progresses and progresses[0] &amp;gt;= 100: progresses.</description>
    </item>
    <item>
      <title>프로그래머스 알고리즘 고득점 kit - 해시, 정렬</title>
      <link>http://localhost:1313/docs/study/tech/study2/</link>
      <pubDate>Wed, 09 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/tech/study2/</guid>
      <description>프로그래머스 알고리즘 고득점 kit - 해시, 정렬 # 목록 # 2024-04-09 ⋯ [해시] 완주하지 못한 선수&#xA;2024-04-09 ⋯ [해시] 전화번호 목록&#xA;2024-04-09 ⋯ [해시] 의상&#xA;2024-04-09 ⋯ [정렬] 완주하지 못한 선수&#xA;2024-04-09 ⋯ [정렬] H-Index&#xA;2024-04-10 ⋯ [해시] 베스트앨범&#xA;완주하지 못한 선수 # 입출력 예 # participant = [&amp;#34;leo&amp;#34;, &amp;#34;kiki&amp;#34;, &amp;#34;eden&amp;#34;]&#x9;completion = [&amp;#34;eden&amp;#34;, &amp;#34;kiki&amp;#34;]&#x9;return = &amp;#34;leo&amp;#34; 개념 # Counter([&amp;#34;leo&amp;#34;, &amp;#34;kiki&amp;#34;, &amp;#34;eden&amp;#34;]) -&amp;gt; {&amp;#39;leo&amp;#39;:1, &amp;#39;kiki&amp;#39;:1, &amp;#39;eden&amp;#39;:1} Counter([&amp;#34;leo&amp;#34;, &amp;#34;kiki&amp;#34;, &amp;#34;eden&amp;#34;]) - Counter([&amp;#34;kiki&amp;#34;, &amp;#34;eden&amp;#34;]) -&amp;gt; {&amp;#39;leo&amp;#39;:1} (key별로 value를 빼서 0이나 음수되면 제거) 코드 # from collections import Counter def solution(participant, completion): answer = Counter(participant) - Counter(completion) return list(answer.</description>
    </item>
    <item>
      <title>딥러닝을 이용한 자연어 처리 입문 | BERT</title>
      <link>http://localhost:1313/docs/study/bioinformatics/cs14/</link>
      <pubDate>Tue, 31 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/bioinformatics/cs14/</guid>
      <description>[딥러닝] 딥러닝을 이용한 자연어 처리 입문 | BERT # 목록 # 2024-12-31 ⋯ 17-02 버트(Bidirectional Encoder Representations from Transformers, BERT)&#xA;2024-12-31 ⋯ 17-03 구글 BERT의 마스크드 언어 모델&#xA;2024-12-31 ⋯ 17-04 한국어 BERT의 마스크드 언어 모델&#xA;2024-12-31 ⋯ 17-05 구글 BERT의 다음 문장 예측&#xA;2024-12-31 ⋯ 17-06 한국어 BERT의 다음 문장 예측&#xA;17-02 버트(Bidirectional Encoder Representations from Transformers, BERT) # BERT?&#xA;BERT는 문맥 정보를 반영한 임베딩(Contextual Embedding)을 사용함. 이는 단어의 의미가 문맥에 따라 달라질 수 있음을 모델이 학습하도록 설계된 방식.</description>
    </item>
    <item>
      <title>혼자 공부하는 딥러닝 | ANN</title>
      <link>http://localhost:1313/docs/study/bioinformatics/cs12/</link>
      <pubDate>Tue, 31 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/bioinformatics/cs12/</guid>
      <description>[딥러닝] 혼자 공부하는 딥러닝 | ANN # 목록 # 2024-12-31 ⋯ 17. 간단한 인공 신경망 모델 만들기&#xA;2024-12-31 ⋯ 18. 인공 신경망에 층을 추가하여 심층 신경망 만들어 보기&#xA;2024-12-31 ⋯ 19. 인경 신경망 모델 훈련의 모범 사례 학습하기&#xA;17. 간단한 인공 신경망 모델 만들기 # 데이터 준비 fashion_mnist 데이터셋에서 학습과 테스트용 이미지 데이터를 가져온다. 학습 데이터는 60,000개의 28x28 픽셀 이미지, 테스트 데이터는 10,000개의 28x28 픽셀 이미지. train_target과 test_target은 각 이미지에 해당하는 레이블(0~9)을 갖고있다.</description>
    </item>
  </channel>
</rss>
