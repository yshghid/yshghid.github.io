<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>알고리즘 on</title><link>https://yshghid.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/</link><description>Recent content in 알고리즘 on</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 01 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://yshghid.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/index.xml" rel="self" type="application/rss+xml"/><item><title>MutClust 코드 리펙토링 #3 utils</title><link>https://yshghid.github.io/docs/study/algorithm/algo9/</link><pubDate>Fri, 01 Aug 2025 00:00:00 +0000</pubDate><guid>https://yshghid.github.io/docs/study/algorithm/algo9/</guid><description>&lt;h1 id="mutclust-코드-리펙토링-3-utils">
 MutClust 코드 리펙토링 #3 utils
 &lt;a class="anchor" href="#mutclust-%ec%bd%94%eb%93%9c-%eb%a6%ac%ed%8e%99%ed%86%a0%eb%a7%81-3-utils">#&lt;/a>
&lt;/h1>
&lt;p>#2025-08-01&lt;/p>
&lt;hr>
&lt;p>MutClust 알고리즘의 코드 구성은 아래와 같은데&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>MutClust
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── sc/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── lib.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── arg_parser.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── utils.py // 전처리 및 분석
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── Test
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>lib.py는 데이터 전처리 및 분석 함수를 포함한다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># === Fasta 전처리 ===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">fasta2csv&lt;/span>(home_dir, nation_dir, filechunk, ref, outdir):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> file &lt;span style="color:#f92672">in&lt;/span> filechunk:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(home_dir, nation_dir, file)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filename &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>splitext(os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>basename(file))[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> outpath &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(outdir, &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>filename&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">.csv&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>exists(outpath):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df &lt;span style="color:#f92672">=&lt;/span> DataFrame({&lt;span style="color:#e6db74">&amp;#39;ref&amp;#39;&lt;/span>: ref&lt;span style="color:#f92672">.&lt;/span>values, &lt;span style="color:#e6db74">&amp;#39;pos&amp;#39;&lt;/span>: ref&lt;span style="color:#f92672">.&lt;/span>index})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> seq &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(open(path)&lt;span style="color:#f92672">.&lt;/span>readlines()[&lt;span style="color:#ae81ff">1&lt;/span>:])&lt;span style="color:#f92672">.&lt;/span>strip()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df[&lt;span style="color:#e6db74">&amp;#39;mut&amp;#39;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> [a &lt;span style="color:#66d9ef">if&lt;/span> a &lt;span style="color:#f92672">!=&lt;/span> ref[i] &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> i, a &lt;span style="color:#f92672">in&lt;/span> enumerate(seq)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df&lt;span style="color:#f92672">.&lt;/span>to_csv(outpath, index&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">False&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">gisaid_fasta2csv&lt;/span>(homedir&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>GISAID_DIR&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/Sequence/Preprocessed/&amp;#34;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inputdir &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(homedir, &lt;span style="color:#e6db74">&amp;#39;MSA_fasta&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> outdir &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(homedir, &lt;span style="color:#e6db74">&amp;#39;MSA_mutationinfo&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Path(outdir)&lt;span style="color:#f92672">.&lt;/span>mkdir(exist_ok&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>, parents&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> core_n &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> args_list &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> nation_dir &lt;span style="color:#f92672">in&lt;/span> get_dirnames_list(inputdir):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filelist &lt;span style="color:#f92672">=&lt;/span> get_filenames_list(os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(inputdir, nation_dir))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> chunk &lt;span style="color:#f92672">in&lt;/span> array_split(filelist, core_n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> args_list&lt;span style="color:#f92672">.&lt;/span>append((inputdir, nation_dir, chunk, ref_seq, outdir))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> Pool(core_n) &lt;span style="color:#66d9ef">as&lt;/span> pool:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pool&lt;span style="color:#f92672">.&lt;/span>map(fasta2csv, args_list)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># === Nucleotide 전처리 ===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_nucleotide_sequence_dict&lt;/span>(seq_dir):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> seq_dict &lt;span style="color:#f92672">=&lt;/span> dict()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> seq_list &lt;span style="color:#f92672">=&lt;/span> get_filenames_list(seq_dir)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> file &lt;span style="color:#f92672">in&lt;/span> seq_list:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filepath &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(seq_dir, file)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df &lt;span style="color:#f92672">=&lt;/span> read_csv(filepath, index_col&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df&lt;span style="color:#f92672">.&lt;/span>name &lt;span style="color:#f92672">=&lt;/span> file&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>)[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df &lt;span style="color:#f92672">=&lt;/span> df&lt;span style="color:#f92672">.&lt;/span>reset_index(drop&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> seq_dict[df&lt;span style="color:#f92672">.&lt;/span>name] &lt;span style="color:#f92672">=&lt;/span> df
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> seq_dict
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">getNucleotideRefSeqbyGene&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> read_csv(&lt;span style="color:#e6db74">&amp;#39;/data3/projects/2020_MUTCLUST/Data/Annotation/Nucleotide/covid_annotation.tsv&amp;#39;&lt;/span>, sep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">make_nucleotide_mutclust_input&lt;/span>(outdir, name, seq_dict&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">None&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>exists(outdir):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(outdir &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39; is not exist&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output_path &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(outdir, name &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;_mutclust_input.tsv&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq_df_ATGC_path &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(outdir, name &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;_freq_ATGC.csv&amp;#39;&lt;/span>) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pos_list, freq_list, per_list, entropy_list &lt;span style="color:#f92672">=&lt;/span> [], [], [], []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>exists(freq_df_ATGC_path):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> seq_dict &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;load seq_dict&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq_df &lt;span style="color:#f92672">=&lt;/span> DataFrame&lt;span style="color:#f92672">.&lt;/span>from_dict(seq_dict)&lt;span style="color:#f92672">.&lt;/span>transpose()&lt;span style="color:#f92672">.&lt;/span>fillna(&lt;span style="color:#ae81ff">0&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>astype(int)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq_df &lt;span style="color:#f92672">=&lt;/span> freq_df&lt;span style="color:#f92672">.&lt;/span>sort_index()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq_df &lt;span style="color:#f92672">=&lt;/span> freq_df[list(IUPAC_CODES&lt;span style="color:#f92672">.&lt;/span>keys())][[&lt;span style="color:#e6db74">&amp;#39;A&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;T&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;G&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;C&amp;#39;&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq_df&lt;span style="color:#f92672">.&lt;/span>to_csv(freq_df_ATGC_path)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq_df &lt;span style="color:#f92672">=&lt;/span> read_csv(freq_df_ATGC_path, index_col&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> pos &lt;span style="color:#f92672">in&lt;/span> freq_df&lt;span style="color:#f92672">.&lt;/span>index:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq &lt;span style="color:#f92672">=&lt;/span> freq_df&lt;span style="color:#f92672">.&lt;/span>loc[pos]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cnt_n &lt;span style="color:#f92672">=&lt;/span> freq&lt;span style="color:#f92672">.&lt;/span>sum()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> percentage &lt;span style="color:#f92672">=&lt;/span> freq &lt;span style="color:#f92672">/&lt;/span> cnt_n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> entrpy &lt;span style="color:#f92672">=&lt;/span> entropy(percentage, base&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> percentage&lt;span style="color:#f92672">.&lt;/span>drop(ref_seq[pos], inplace&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq&lt;span style="color:#f92672">.&lt;/span>drop(ref_seq[pos], inplace&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pos_list&lt;span style="color:#f92672">.&lt;/span>append(int(pos))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> freq_list&lt;span style="color:#f92672">.&lt;/span>append(freq&lt;span style="color:#f92672">.&lt;/span>sum())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> per_list&lt;span style="color:#f92672">.&lt;/span>append(percentage&lt;span style="color:#f92672">.&lt;/span>sum())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> entropy_list&lt;span style="color:#f92672">.&lt;/span>append(entrpy)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mutclust_input_df &lt;span style="color:#f92672">=&lt;/span> DataFrame({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;Position&amp;#39;&lt;/span>: pos_list,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;Frequency&amp;#39;&lt;/span>: freq_list,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;Percentages&amp;#39;&lt;/span>: per_list,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;Entropy&amp;#39;&lt;/span>: entropy_list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mutclust_input_df&lt;span style="color:#f92672">.&lt;/span>to_csv(output_path, sep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>, index&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">False&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> mutclust_input_df
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># === Mutation 데이터 병렬 처리 ===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">read_thead&lt;/span>(filepathlist, return_list, i):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ref_seq_sr &lt;span style="color:#f92672">=&lt;/span> getNucleotideRefSeq()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_dict &lt;span style="color:#f92672">=&lt;/span> {pos: Counter({k: &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> k &lt;span style="color:#f92672">in&lt;/span> IUPAC_CODES&lt;span style="color:#f92672">.&lt;/span>keys()}) &lt;span style="color:#66d9ef">for&lt;/span> pos &lt;span style="color:#f92672">in&lt;/span> ref_seq_sr&lt;span style="color:#f92672">.&lt;/span>index}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> filepath &lt;span style="color:#f92672">in&lt;/span> filepathlist:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df &lt;span style="color:#f92672">=&lt;/span> read_csv(filepath, index_col&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>fillna(&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>reset_index(drop&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> index, mut &lt;span style="color:#f92672">in&lt;/span> enumerate(df[&lt;span style="color:#e6db74">&amp;#39;mut&amp;#39;&lt;/span>]):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> symbol &lt;span style="color:#f92672">=&lt;/span> mut &lt;span style="color:#66d9ef">if&lt;/span> mut &lt;span style="color:#66d9ef">else&lt;/span> ref_seq_sr[index &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> symbol &lt;span style="color:#f92672">in&lt;/span> sub_dict[index &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_dict[index &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>][symbol] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_dict[index &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>][symbol] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return_list&lt;span style="color:#f92672">.&lt;/span>append(sub_dict)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>i&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">th process complete!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">merge_thread&lt;/span>(poslist, sub_dict_list, return_dict):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> pos &lt;span style="color:#f92672">in&lt;/span> poslist:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count_dict &lt;span style="color:#f92672">=&lt;/span> sum([d[pos] &lt;span style="color:#66d9ef">for&lt;/span> d &lt;span style="color:#f92672">in&lt;/span> sub_dict_list], Counter())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> merged_dict &lt;span style="color:#f92672">=&lt;/span> {k: count_dict&lt;span style="color:#f92672">.&lt;/span>get(k, &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#66d9ef">for&lt;/span> k &lt;span style="color:#f92672">in&lt;/span> IUPAC_CODES&lt;span style="color:#f92672">.&lt;/span>keys()}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return_dict[pos] &lt;span style="color:#f92672">=&lt;/span> merged_dict
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">load_mutationinfo&lt;/span>(input_dir&lt;span style="color:#f92672">=&lt;/span>COVID19_MUTATIONINFO_DIR, sample_list&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">None&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> core_n, split_n &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">1000&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_dict_list &lt;span style="color:#f92672">=&lt;/span> Manager()&lt;span style="color:#f92672">.&lt;/span>list()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filelist &lt;span style="color:#f92672">=&lt;/span> get_file_paths_recursive(input_dir)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> sample_list:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filelist &lt;span style="color:#f92672">=&lt;/span> [f &lt;span style="color:#66d9ef">for&lt;/span> f &lt;span style="color:#f92672">in&lt;/span> filelist &lt;span style="color:#66d9ef">if&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>basename(f)&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>)[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">in&lt;/span> sample_list]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;sample_n: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>len(sample_list)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> splited_filepaths &lt;span style="color:#f92672">=&lt;/span> array_split(filelist, split_n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parameter_list &lt;span style="color:#f92672">=&lt;/span> [(chunk, sub_dict_list, i) &lt;span style="color:#66d9ef">for&lt;/span> i, chunk &lt;span style="color:#f92672">in&lt;/span> enumerate(splited_filepaths)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;read thread start!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> multi_processing(read_thead, parameter_list, core_n&lt;span style="color:#f92672">=&lt;/span>core_n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;read thread end!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> merged_dict &lt;span style="color:#f92672">=&lt;/span> Manager()&lt;span style="color:#f92672">.&lt;/span>dict()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> poslist &lt;span style="color:#f92672">=&lt;/span> ref_seq&lt;span style="color:#f92672">.&lt;/span>index
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> splited_poslist &lt;span style="color:#f92672">=&lt;/span> array_split(poslist, split_n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_dict_list &lt;span style="color:#f92672">=&lt;/span> list(sub_dict_list)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parameter_list &lt;span style="color:#f92672">=&lt;/span> [(pos_chunk, sub_dict_list, merged_dict) &lt;span style="color:#66d9ef">for&lt;/span> pos_chunk &lt;span style="color:#f92672">in&lt;/span> splited_poslist]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;merge thread start!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> multi_processing(merge_thread, parameter_list, core_n&lt;span style="color:#f92672">=&lt;/span>core_n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;merge thread end!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> dict(merged_dict)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># === Matrix 생성 병렬 처리 ===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">make_matrix_thread&lt;/span>(file_list):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clusters_df &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>read_csv(os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(GISAID_MUTCLUST_OUTPUT_DIR, &lt;span style="color:#e6db74">&amp;#39;clusters_hscore.txt&amp;#39;&lt;/span>), sep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> column_list &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;c&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>i&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">(&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>row[&lt;span style="color:#e6db74">&amp;#39;left_position&amp;#39;&lt;/span>]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">,&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>row[&lt;span style="color:#e6db74">&amp;#39;right_position&amp;#39;&lt;/span>]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">)&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> i, row &lt;span style="color:#f92672">in&lt;/span> clusters_df&lt;span style="color:#f92672">.&lt;/span>iterrows()]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cluster_df &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>DataFrame(columns&lt;span style="color:#f92672">=&lt;/span>column_list)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> path &lt;span style="color:#f92672">in&lt;/span> file_list:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>read_csv(path)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> patient_name &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>splitext(os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>basename(path))[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cluster_df&lt;span style="color:#f92672">.&lt;/span>loc[patient_name] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> pos &lt;span style="color:#f92672">in&lt;/span> df[df[&lt;span style="color:#e6db74">&amp;#39;mut&amp;#39;&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>notnull()][&lt;span style="color:#e6db74">&amp;#39;pos&amp;#39;&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cluster_idx &lt;span style="color:#f92672">=&lt;/span> clusters_df[(clusters_df[&lt;span style="color:#e6db74">&amp;#39;left_position&amp;#39;&lt;/span>] &lt;span style="color:#f92672">&amp;lt;=&lt;/span> pos) &lt;span style="color:#f92672">&amp;amp;&lt;/span> (pos &lt;span style="color:#f92672">&amp;lt;=&lt;/span> clusters_df[&lt;span style="color:#e6db74">&amp;#39;right_position&amp;#39;&lt;/span>])]&lt;span style="color:#f92672">.&lt;/span>index
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cluster_df&lt;span style="color:#f92672">.&lt;/span>loc[patient_name][cluster_idx] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> cluster_df
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">make_matrix&lt;/span>(mutationinfo_dir, out_dir, tag, cpu_n&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">60&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;starting make matrix!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pool &lt;span style="color:#f92672">=&lt;/span> Pool(processes&lt;span style="color:#f92672">=&lt;/span>cpu_n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> file_list &lt;span style="color:#f92672">=&lt;/span> get_file_paths_recursive(mutationinfo_dir)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> results &lt;span style="color:#f92672">=&lt;/span> pool&lt;span style="color:#f92672">.&lt;/span>map(make_matrix_thread, array_split(file_list, cpu_n))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pd&lt;span style="color:#f92672">.&lt;/span>concat(results)&lt;span style="color:#f92672">.&lt;/span>to_csv(os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(out_dir, &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;cluster_matrix_&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>tag&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">.csv&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pool&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pool&lt;span style="color:#f92672">.&lt;/span>join()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># === H-score 계산 ===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">add_HSCORE&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>read_csv(os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(MUTCLUST_INPUT_DIR, &lt;span style="color:#e6db74">&amp;#39;gisaid_mutclust_input.tsv&amp;#39;&lt;/span>), sep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df[HSCORE] &lt;span style="color:#f92672">=&lt;/span> df[PER] &lt;span style="color:#f92672">*&lt;/span> df[ENT]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df&lt;span style="color:#f92672">.&lt;/span>to_csv(os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(MUTCLUST_INPUT_DIR, &lt;span style="color:#e6db74">&amp;#39;gisaid_mutclust_input_with_score.tsv&amp;#39;&lt;/span>), sep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>, index&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">False&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># === 주석(Annotation) ===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">annotation&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">import&lt;/span> ast
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mapping_df &lt;span style="color:#f92672">=&lt;/span> pd&lt;span style="color:#f92672">.&lt;/span>read_csv(os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(GISAID_METADATA_DIR, &lt;span style="color:#e6db74">&amp;#39;merged_info.tsv&amp;#39;&lt;/span>), sep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>, index_col&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i, row &lt;span style="color:#f92672">in&lt;/span> mapping_df&lt;span style="color:#f92672">.&lt;/span>iterrows():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mapping_df&lt;span style="color:#f92672">.&lt;/span>loc[i] &lt;span style="color:#f92672">=&lt;/span> [ast&lt;span style="color:#f92672">.&lt;/span>literal_eval(val) &lt;span style="color:#66d9ef">for&lt;/span> val &lt;span style="color:#f92672">in&lt;/span> row]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(mapping_df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">make_clade_divide_mutation&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clade_dir &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./clade_divide_mutation&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> start_dict &lt;span style="color:#f92672">=&lt;/span> getStartDict()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> file &lt;span style="color:#f92672">in&lt;/span> get_filenames_list(clade_dir):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> df &lt;span style="color:#f92672">=&lt;/span> read_csv(os&lt;span style="color:#f92672">.&lt;/span>path&lt;span style="color:#f92672">.&lt;/span>join(clade_dir, file), sep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(df)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># === 병렬 처리 유틸리티 ===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">multi_processing&lt;/span>(func, parameter_list, core_n&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">100&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proc, proc_excution, proc_end &lt;span style="color:#f92672">=&lt;/span> [], [], []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> param &lt;span style="color:#f92672">in&lt;/span> parameter_list:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proc&lt;span style="color:#f92672">.&lt;/span>append(Process(target&lt;span style="color:#f92672">=&lt;/span>func, args&lt;span style="color:#f92672">=&lt;/span>param))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> proc &lt;span style="color:#f92672">or&lt;/span> proc_excution:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(len(proc)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(proc_excution) &lt;span style="color:#f92672">&amp;lt;&lt;/span> core_n:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p &lt;span style="color:#f92672">=&lt;/span> proc&lt;span style="color:#f92672">.&lt;/span>pop(&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p&lt;span style="color:#f92672">.&lt;/span>start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proc_excution&lt;span style="color:#f92672">.&lt;/span>append(p)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> p &lt;span style="color:#f92672">in&lt;/span> proc_excution[:]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> p&lt;span style="color:#f92672">.&lt;/span>is_alive():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proc_excution&lt;span style="color:#f92672">.&lt;/span>remove(p)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p&lt;span style="color:#f92672">.&lt;/span>join()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proc_end&lt;span style="color:#f92672">.&lt;/span>append(p)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># === 메인 실행 ===&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> annotation()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>